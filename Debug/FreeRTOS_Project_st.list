
FreeRTOS_Project_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f44  0800bf10  0800bf10  0001bf10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee54  0800ee54  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee54  0800ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee5c  0800ee5c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee5c  0800ee5c  0001ee5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee60  0800ee60  0001ee60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800ee64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000234  0800f098  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  0800f098  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a10a  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000568b  00000000  00000000  0004a36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  0004fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  00051870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a9c4  00000000  00000000  00053470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024fff  00000000  00000000  0009de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4089  00000000  00000000  000c2e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001b6ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dbc  00000000  00000000  001b6f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000234 	.word	0x20000234
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bef8 	.word	0x0800bef8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000238 	.word	0x20000238
 80001ec:	0800bef8 	.word	0x0800bef8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA2D_Init+0x60>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef6:	f002 ff23 	bl	8003d40 <HAL_DMA2D_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f00:	f000 fe1c 	bl	8001b3c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000f08:	f003 f988 	bl	800421c <HAL_DMA2D_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fe13 	bl	8001b3c <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200004c4 	.word	0x200004c4
 8000f20:	4002b000 	.word	0x4002b000

08000f24 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_DMA2D_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f002 fce8 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f5c:	205a      	movs	r0, #90	; 0x5a
 8000f5e:	f002 fd01 	bl	8003964 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_FMC_Init+0x98>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_FMC_Init+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_FMC_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_FMC_Init+0x98>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_FMC_Init+0x98>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_FMC_Init+0x98>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_FMC_Init+0x98>)
 8000fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000fb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_FMC_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_FMC_Init+0x98>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_FMC_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_FMC_Init+0x98>)
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_FMC_Init+0x98>)
 8000ff6:	f005 fd53 	bl	8006aa0 <HAL_SDRAM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001000:	f000 fd9c 	bl	8001b3c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000504 	.word	0x20000504
 8001010:	a0000140 	.word	0xa0000140

08001014 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_FMC_MspInit+0x104>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d16f      	bne.n	8001110 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_FMC_MspInit+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_FMC_MspInit+0x108>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_FMC_MspInit+0x10c>)
 800106e:	f003 fa03 	bl	8004478 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_FMC_MspInit+0x110>)
 800108c:	f003 f9f4 	bl	8004478 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001090:	f248 1333 	movw	r3, #33075	; 0x8133
 8001094:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <HAL_FMC_MspInit+0x114>)
 80010ac:	f003 f9e4 	bl	8004478 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_FMC_MspInit+0x118>)
 80010cc:	f003 f9d4 	bl	8004478 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_FMC_MspInit+0x11c>)
 80010ec:	f003 f9c4 	bl	8004478 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_FMC_MspInit+0x120>)
 800110a:	f003 f9b5 	bl	8004478 <HAL_GPIO_Init>
 800110e:	e000      	b.n	8001112 <HAL_FMC_MspInit+0xfe>
    return;
 8001110:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000250 	.word	0x20000250
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020800 	.word	0x40020800
 8001128:	40021800 	.word	0x40021800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001140:	f7ff ff68 	bl	8001014 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	4b89      	ldr	r3, [pc, #548]	; (800138c <MX_GPIO_Init+0x240>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a88      	ldr	r2, [pc, #544]	; (800138c <MX_GPIO_Init+0x240>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b86      	ldr	r3, [pc, #536]	; (800138c <MX_GPIO_Init+0x240>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	4b82      	ldr	r3, [pc, #520]	; (800138c <MX_GPIO_Init+0x240>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a81      	ldr	r2, [pc, #516]	; (800138c <MX_GPIO_Init+0x240>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b7f      	ldr	r3, [pc, #508]	; (800138c <MX_GPIO_Init+0x240>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	4b7b      	ldr	r3, [pc, #492]	; (800138c <MX_GPIO_Init+0x240>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a7a      	ldr	r2, [pc, #488]	; (800138c <MX_GPIO_Init+0x240>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b78      	ldr	r3, [pc, #480]	; (800138c <MX_GPIO_Init+0x240>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <MX_GPIO_Init+0x240>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a73      	ldr	r2, [pc, #460]	; (800138c <MX_GPIO_Init+0x240>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b71      	ldr	r3, [pc, #452]	; (800138c <MX_GPIO_Init+0x240>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <MX_GPIO_Init+0x240>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a6c      	ldr	r2, [pc, #432]	; (800138c <MX_GPIO_Init+0x240>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b6a      	ldr	r3, [pc, #424]	; (800138c <MX_GPIO_Init+0x240>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <MX_GPIO_Init+0x240>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <MX_GPIO_Init+0x240>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <MX_GPIO_Init+0x240>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <MX_GPIO_Init+0x240>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a5e      	ldr	r2, [pc, #376]	; (800138c <MX_GPIO_Init+0x240>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <MX_GPIO_Init+0x240>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <MX_GPIO_Init+0x240>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a57      	ldr	r2, [pc, #348]	; (800138c <MX_GPIO_Init+0x240>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <MX_GPIO_Init+0x240>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2116      	movs	r1, #22
 8001246:	4852      	ldr	r0, [pc, #328]	; (8001390 <MX_GPIO_Init+0x244>)
 8001248:	f003 fbce 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4850      	ldr	r0, [pc, #320]	; (8001394 <MX_GPIO_Init+0x248>)
 8001252:	f003 fbc9 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800125c:	484e      	ldr	r0, [pc, #312]	; (8001398 <MX_GPIO_Init+0x24c>)
 800125e:	f003 fbc3 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001268:	484c      	ldr	r0, [pc, #304]	; (800139c <MX_GPIO_Init+0x250>)
 800126a:	f003 fbbd 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800126e:	2316      	movs	r3, #22
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4842      	ldr	r0, [pc, #264]	; (8001390 <MX_GPIO_Init+0x244>)
 8001286:	f003 f8f7 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800128a:	f248 0307 	movw	r3, #32775	; 0x8007
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <MX_GPIO_Init+0x254>)
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	483d      	ldr	r0, [pc, #244]	; (8001394 <MX_GPIO_Init+0x248>)
 80012a0:	f003 f8ea 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4836      	ldr	r0, [pc, #216]	; (8001394 <MX_GPIO_Init+0x248>)
 80012bc:	f003 f8dc 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012c0:	2320      	movs	r3, #32
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <MX_GPIO_Init+0x254>)
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <MX_GPIO_Init+0x244>)
 80012d4:	f003 f8d0 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	482e      	ldr	r0, [pc, #184]	; (80013a4 <MX_GPIO_Init+0x258>)
 80012ec:	f003 f8c4 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80012f0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001302:	230c      	movs	r3, #12
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4825      	ldr	r0, [pc, #148]	; (80013a4 <MX_GPIO_Init+0x258>)
 800130e:	f003 f8b3 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <MX_GPIO_Init+0x258>)
 8001328:	f003 f8a6 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800132c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4815      	ldr	r0, [pc, #84]	; (8001398 <MX_GPIO_Init+0x24c>)
 8001342:	f003 f899 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001346:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_GPIO_Init+0x24c>)
 8001360:	f003 f88a 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001364:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_GPIO_Init+0x250>)
 800137e:	f003 f87b 	bl	8004478 <HAL_GPIO_Init>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	; 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40020800 	.word	0x40020800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021800 	.word	0x40021800
 80013a0:	10120000 	.word	0x10120000
 80013a4:	40020400 	.word	0x40020400

080013a8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_I2C3_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_I2C3_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_I2C3_Init+0x74>)
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <MX_I2C3_Init+0x7c>)
 80013b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_I2C3_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_I2C3_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_I2C3_Init+0x74>)
 80013c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_I2C3_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C3_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_I2C3_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C3_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_I2C3_Init+0x74>)
 80013e6:	f003 fb19 	bl	8004a1c <HAL_I2C_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013f0:	f000 fba4 	bl	8001b3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <MX_I2C3_Init+0x74>)
 80013f8:	f004 f899 	bl	800552e <HAL_I2CEx_ConfigAnalogFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fb9b 	bl	8001b3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C3_Init+0x74>)
 800140a:	f004 f8cc 	bl	80055a6 <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fb92 	bl	8001b3c <Error_Handler>
  }

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000538 	.word	0x20000538
 8001420:	40005c00 	.word	0x40005c00
 8001424:	000186a0 	.word	0x000186a0

08001428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_I2C_MspInit+0xc4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d14b      	bne.n	80014e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <HAL_I2C_MspInit+0xcc>)
 80014a0:	f002 ffea 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014aa:	2312      	movs	r3, #18
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014b6:	2304      	movs	r3, #4
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <HAL_I2C_MspInit+0xd0>)
 80014c2:	f002 ffd9 	bl	8004478 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 80014d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40005c00 	.word	0x40005c00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000

080014fc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2234      	movs	r2, #52	; 0x34
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f008 f82b 	bl	8009564 <memset>

  hltdc.Instance = LTDC;
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001510:	4a39      	ldr	r2, [pc, #228]	; (80015f8 <MX_LTDC_Init+0xfc>)
 8001512:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800152e:	2209      	movs	r2, #9
 8001530:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001534:	2201      	movs	r2, #1
 8001536:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800153a:	221d      	movs	r2, #29
 800153c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001540:	2203      	movs	r2, #3
 8001542:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001546:	f240 120d 	movw	r2, #269	; 0x10d
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800154e:	f240 1243 	movw	r2, #323	; 0x143
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001556:	f240 1217 	movw	r2, #279	; 0x117
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800155e:	f240 1247 	movw	r2, #327	; 0x147
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800157e:	f004 f851 	bl	8005624 <HAL_LTDC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001588:	f000 fad8 	bl	8001b3c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001590:	23f0      	movs	r3, #240	; 0xf0
 8001592:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001598:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800159c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015a2:	23ff      	movs	r3, #255	; 0xff
 80015a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015b0:	2307      	movs	r3, #7
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80015b4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80015ba:	23f0      	movs	r3, #240	; 0xf0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80015be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_LTDC_Init+0xf8>)
 80015de:	f004 f9b3 	bl	8005948 <HAL_LTDC_ConfigLayer>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80015e8:	f000 faa8 	bl	8001b3c <Error_Handler>
  }

}
 80015ec:	bf00      	nop
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000058c 	.word	0x2000058c
 80015f8:	40016800 	.word	0x40016800

080015fc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a7b      	ldr	r2, [pc, #492]	; (8001808 <HAL_LTDC_MspInit+0x20c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80f0 	bne.w	8001800 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a78      	ldr	r2, [pc, #480]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800162a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	4b72      	ldr	r3, [pc, #456]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a71      	ldr	r2, [pc, #452]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a5c      	ldr	r2, [pc, #368]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800169a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a55      	ldr	r2, [pc, #340]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80016e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016f6:	230e      	movs	r3, #14
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4843      	ldr	r0, [pc, #268]	; (8001810 <HAL_LTDC_MspInit+0x214>)
 8001702:	f002 feb9 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001706:	f641 0358 	movw	r3, #6232	; 0x1858
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001718:	230e      	movs	r3, #14
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	483c      	ldr	r0, [pc, #240]	; (8001814 <HAL_LTDC_MspInit+0x218>)
 8001724:	f002 fea8 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001728:	2303      	movs	r3, #3
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001738:	2309      	movs	r3, #9
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4835      	ldr	r0, [pc, #212]	; (8001818 <HAL_LTDC_MspInit+0x21c>)
 8001744:	f002 fe98 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001748:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175a:	230e      	movs	r3, #14
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	482c      	ldr	r0, [pc, #176]	; (8001818 <HAL_LTDC_MspInit+0x21c>)
 8001766:	f002 fe87 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800176a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800177c:	230e      	movs	r3, #14
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4825      	ldr	r0, [pc, #148]	; (800181c <HAL_LTDC_MspInit+0x220>)
 8001788:	f002 fe76 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800178c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800179e:	230e      	movs	r3, #14
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	481d      	ldr	r0, [pc, #116]	; (8001820 <HAL_LTDC_MspInit+0x224>)
 80017aa:	f002 fe65 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80017ae:	2348      	movs	r3, #72	; 0x48
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017be:	230e      	movs	r3, #14
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <HAL_LTDC_MspInit+0x228>)
 80017ca:	f002 fe55 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80017ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017e0:	2309      	movs	r3, #9
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <HAL_LTDC_MspInit+0x220>)
 80017ec:	f002 fe44 	bl	8004478 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2105      	movs	r1, #5
 80017f4:	2058      	movs	r0, #88	; 0x58
 80017f6:	f002 f899 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017fa:	2058      	movs	r0, #88	; 0x58
 80017fc:	f002 f8b2 	bl	8003964 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40016800 	.word	0x40016800
 800180c:	40023800 	.word	0x40023800
 8001810:	40021400 	.word	0x40021400
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	40021800 	.word	0x40021800
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00

08001828 <RTOS_AppGetRuntimeCounterValueFromISR>:
  RTOS_RunTimeCounter = 0;
  HAL_TIM_Base_Start_IT(&htim7);
}

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000634 	.word	0x20000634

08001840 <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001848:	1d39      	adds	r1, r7, #4
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	2201      	movs	r2, #1
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <__io_putchar+0x20>)
 8001852:	f006 fb8a 	bl	8007f6a <HAL_UART_Transmit>
	return ch;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200006d0 	.word	0x200006d0

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f001 ff41 	bl	80036f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f8c9 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f7ff fc6b 	bl	800114c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001876:	f7ff fb23 	bl	8000ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800187a:	f7ff fb7b 	bl	8000f74 <MX_FMC_Init>
  MX_I2C3_Init();
 800187e:	f7ff fd93 	bl	80013a8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001882:	f7ff fe3b 	bl	80014fc <MX_LTDC_Init>
  MX_SPI5_Init();
 8001886:	f000 f961 	bl	8001b4c <MX_SPI5_Init>
  MX_TIM1_Init();
 800188a:	f000 fbb9 	bl	8002000 <MX_TIM1_Init>
  MX_TIM7_Init();
 800188e:	f000 fc55 	bl	800213c <MX_TIM7_Init>
  MX_TIM5_Init();
 8001892:	f000 fc05 	bl	80020a0 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001896:	f000 fce3 	bl	8002260 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	484c      	ldr	r0, [pc, #304]	; (80019d4 <main+0x170>)
 80018a2:	f003 f8a1 	bl	80049e8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4849      	ldr	r0, [pc, #292]	; (80019d4 <main+0x170>)
 80018ae:	f003 f89b 	bl	80049e8 <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 80018b2:	f001 f8d3 	bl	8002a5c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 80018b6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80018ba:	2000      	movs	r0, #0
 80018bc:	f001 f950 	bl	8002b60 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 80018c0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80018c4:	2001      	movs	r0, #1
 80018c6:	f001 f94b 	bl	8002b60 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f001 f9ac 	bl	8002c28 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80018d0:	f001 fb46 	bl	8002f60 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f001 fa18 	bl	8002d0c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80018dc:	483e      	ldr	r0, [pc, #248]	; (80019d8 <main+0x174>)
 80018de:	f001 f9e5 	bl	8002cac <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295
 80018e6:	f001 f9c7 	bl	8002c78 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 80018ea:	483c      	ldr	r0, [pc, #240]	; (80019dc <main+0x178>)
 80018ec:	f001 f9ac 	bl	8002c48 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 80018f0:	f001 f9f6 	bl	8002ce0 <BSP_LCD_GetFont>
 80018f4:	4603      	mov	r3, r0
 80018f6:	88d9      	ldrh	r1, [r3, #6]
 80018f8:	2301      	movs	r3, #1
 80018fa:	4a39      	ldr	r2, [pc, #228]	; (80019e0 <main+0x17c>)
 80018fc:	2000      	movs	r0, #0
 80018fe:	f001 fa71 	bl	8002de4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 8001902:	f001 f9ed 	bl	8002ce0 <BSP_LCD_GetFont>
 8001906:	4603      	mov	r3, r0
 8001908:	88db      	ldrh	r3, [r3, #6]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b299      	uxth	r1, r3
 800190e:	2301      	movs	r3, #1
 8001910:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <main+0x180>)
 8001912:	2000      	movs	r0, #0
 8001914:	f001 fa66 	bl	8002de4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 8001918:	f001 f9e2 	bl	8002ce0 <BSP_LCD_GetFont>
 800191c:	4603      	mov	r3, r0
 800191e:	88db      	ldrh	r3, [r3, #6]
 8001920:	461a      	mov	r2, r3
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	4413      	add	r3, r2
 8001926:	b299      	uxth	r1, r3
 8001928:	2301      	movs	r3, #1
 800192a:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <main+0x184>)
 800192c:	2000      	movs	r0, #0
 800192e:	f001 fa59 	bl	8002de4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 8001932:	482e      	ldr	r0, [pc, #184]	; (80019ec <main+0x188>)
 8001934:	f001 f988 	bl	8002c48 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2020/2021", CENTER_MODE);
 8001938:	f001 f9d2 	bl	8002ce0 <BSP_LCD_GetFont>
 800193c:	4603      	mov	r3, r0
 800193e:	88db      	ldrh	r3, [r3, #6]
 8001940:	461a      	mov	r2, r3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4413      	add	r3, r2
 8001946:	b299      	uxth	r1, r3
 8001948:	2301      	movs	r3, #1
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <main+0x18c>)
 800194c:	2000      	movs	r0, #0
 800194e:	f001 fa49 	bl	8002de4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 8001952:	4828      	ldr	r0, [pc, #160]	; (80019f4 <main+0x190>)
 8001954:	f001 f978 	bl	8002c48 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 8001958:	f001 f9c2 	bl	8002ce0 <BSP_LCD_GetFont>
 800195c:	4603      	mov	r3, r0
 800195e:	88db      	ldrh	r3, [r3, #6]
 8001960:	461a      	mov	r2, r3
 8001962:	00d2      	lsls	r2, r2, #3
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b299      	uxth	r1, r3
 8001968:	2301      	movs	r3, #1
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <main+0x194>)
 800196c:	2000      	movs	r0, #0
 800196e:	f001 fa39 	bl	8002de4 <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 8001972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001976:	f001 fefd 	bl	8003774 <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <main+0x198>)
 800197c:	f001 f996 	bl	8002cac <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f001 f9c2 	bl	8002d0c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001988:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800198c:	f001 f95c 	bl	8002c48 <BSP_LCD_SetTextColor>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <main+0x170>)
 8001998:	f003 f826 	bl	80049e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <main+0x170>)
 80019a4:	f003 f820 	bl	80049e8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

	char adresse[10];
	I2C_Scan(&hi2c3, adresse);
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <main+0x19c>)
 80019ae:	f007 fced 	bl	800938c <I2C_Scan>
	Init_BMP280(&hi2c3);
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <main+0x19c>)
 80019b4:	f007 fd12 	bl	80093dc <Init_BMP280>
	Init_MPU9250(&hi2c3);
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <main+0x19c>)
 80019ba:	f007 fd3f 	bl	800943c <Init_MPU9250>
	BSP_LCD_SetFont(&Font16);
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <main+0x174>)
 80019c0:	f001 f974 	bl	8002cac <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f001 f956 	bl	8002c78 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <main+0x178>)
 80019ce:	f001 f93b 	bl	8002c48 <BSP_LCD_SetTextColor>
 // osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <main+0x16e>
 80019d4:	40021800 	.word	0x40021800
 80019d8:	20000048 	.word	0x20000048
 80019dc:	ff065784 	.word	0xff065784
 80019e0:	0800bf10 	.word	0x0800bf10
 80019e4:	0800bf18 	.word	0x0800bf18
 80019e8:	0800bf24 	.word	0x0800bf24
 80019ec:	ff81b835 	.word	0xff81b835
 80019f0:	0800bf30 	.word	0x0800bf30
 80019f4:	ff813c2f 	.word	0xff813c2f
 80019f8:	0800bf3c 	.word	0x0800bf3c
 80019fc:	20000050 	.word	0x20000050
 8001a00:	20000538 	.word	0x20000538

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0a0      	sub	sp, #128	; 0x80
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a0e:	2230      	movs	r2, #48	; 0x30
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f007 fda6 	bl	8009564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2230      	movs	r2, #48	; 0x30
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f007 fd97 	bl	8009564 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <SystemClock_Config+0x10c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a34      	ldr	r2, [pc, #208]	; (8001b10 <SystemClock_Config+0x10c>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <SystemClock_Config+0x10c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <SystemClock_Config+0x110>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <SystemClock_Config+0x110>)
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <SystemClock_Config+0x110>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a82:	2304      	movs	r3, #4
 8001a84:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a86:	23b4      	movs	r3, #180	; 0xb4
 8001a88:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f9a6 	bl	8005de8 <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001aa2:	f000 f84b 	bl	8001b3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001aa6:	f004 f94f 	bl	8005d48 <HAL_PWREx_EnableOverDrive>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ab0:	f000 f844 	bl	8001b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001acc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fbf8 	bl	80062c8 <HAL_RCC_ClockConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001ade:	f000 f82d 	bl	8001b3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001ae6:	233c      	movs	r3, #60	; 0x3c
 8001ae8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001aea:	2305      	movs	r3, #5
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fe13 	bl	8006724 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001b04:	f000 f81a 	bl	8001b3c <Error_Handler>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3780      	adds	r7, #128	; 0x80
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b2a:	f001 fe03 	bl	8003734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40001000 	.word	0x40001000

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <MX_SPI5_Init+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b80:	2218      	movs	r2, #24
 8001b82:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b98:	220a      	movs	r2, #10
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_SPI5_Init+0x64>)
 8001b9e:	f004 fffe 	bl	8006b9e <HAL_SPI_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ba8:	f7ff ffc8 	bl	8001b3c <Error_Handler>
  }

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000638 	.word	0x20000638
 8001bb4:	40015000 	.word	0x40015000

08001bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_SPI_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c12:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c24:	2305      	movs	r3, #5
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_SPI_MspInit+0x8c>)
 8001c30:	f002 fc22 	bl	8004478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40015000 	.word	0x40015000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40021400 	.word	0x40021400

08001c48 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_SPI_MspDeInit+0x30>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10a      	bne.n	8001c70 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_SPI_MspDeInit+0x34>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_SPI_MspDeInit+0x34>)
 8001c60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c66:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_SPI_MspDeInit+0x38>)
 8001c6c:	f002 fdb0 	bl	80047d0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40015000 	.word	0x40015000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40021400 	.word	0x40021400

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	f06f 0001 	mvn.w	r0, #1
 8001cca:	f001 fe2f 	bl	800392c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	2036      	movs	r0, #54	; 0x36
 8001cf2:	f001 fe1b 	bl	800392c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cf6:	2036      	movs	r0, #54	; 0x36
 8001cf8:	f001 fe34 	bl	8003964 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_InitTick+0xa4>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_InitTick+0xa4>)
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_InitTick+0xa4>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fccc 	bl	80066c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d28:	f004 fca2 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_InitTick+0xa8>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_InitTick+0xac>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_InitTick+0xb0>)
 8001d44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_InitTick+0xac>)
 8001d48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_InitTick+0xac>)
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_InitTick+0xac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_InitTick+0xac>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <HAL_InitTick+0xac>)
 8001d62:	f005 fca7 	bl	80076b4 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d6c:	4806      	ldr	r0, [pc, #24]	; (8001d88 <HAL_InitTick+0xac>)
 8001d6e:	f005 fccc 	bl	800770a <HAL_TIM_Base_Start_IT>
 8001d72:	4603      	mov	r3, r0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3730      	adds	r7, #48	; 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	20000690 	.word	0x20000690
 8001d8c:	40001000 	.word	0x40001000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler+0x4>

08001daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <USART1_IRQHandler+0x10>)
 8001dca:	f006 f967 	bl	800809c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200006d0 	.word	0x200006d0

08001dd8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM5_IRQHandler+0x10>)
 8001dde:	f005 fcb8 	bl	8007752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000710 	.word	0x20000710

08001dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM6_DAC_IRQHandler+0x10>)
 8001df2:	f005 fcae 	bl	8007752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000690 	.word	0x20000690

08001e00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <TIM7_IRQHandler+0x18>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <TIM7_IRQHandler+0x18>)
 8001e0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e0e:	4803      	ldr	r0, [pc, #12]	; (8001e1c <TIM7_IRQHandler+0x1c>)
 8001e10:	f005 fc9f 	bl	8007752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000634 	.word	0x20000634
 8001e1c:	20000790 	.word	0x20000790

08001e20 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <LTDC_IRQHandler+0x10>)
 8001e26:	f003 fccd 	bl	80057c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000058c 	.word	0x2000058c

08001e34 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA2D_IRQHandler+0x10>)
 8001e3a:	f002 f8de 	bl	8003ffa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200004c4 	.word	0x200004c4

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e62:	f007 fb47 	bl	80094f4 <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e8a:	e7fe      	b.n	8001e8a <_exit+0x12>

08001e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e00a      	b.n	8001eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9e:	f3af 8000 	nop.w
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	b2ca      	uxtb	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf0      	blt.n	8001e9e <_read+0x12>
	}

return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e009      	b.n	8001eec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fcad 	bl	8001840 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf1      	blt.n	8001ed8 <_write+0x12>
	}
	return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f007 faac 	bl	80094f4 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20030000 	.word	0x20030000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	20000254 	.word	0x20000254
 8001fd0:	20000890 	.word	0x20000890

08001fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <SystemInit+0x28>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <SystemInit+0x28>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SystemInit+0x28>)
 8001fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fee:	609a      	str	r2, [r3, #8]
#endif
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	463b      	mov	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <MX_TIM1_Init+0x98>)
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <MX_TIM1_Init+0x9c>)
 8002020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <MX_TIM1_Init+0x98>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <MX_TIM1_Init+0x98>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <MX_TIM1_Init+0x98>)
 8002030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <MX_TIM1_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <MX_TIM1_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <MX_TIM1_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002048:	4813      	ldr	r0, [pc, #76]	; (8002098 <MX_TIM1_Init+0x98>)
 800204a:	f005 fb33 	bl	80076b4 <HAL_TIM_Base_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002054:	f7ff fd72 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_TIM1_Init+0x98>)
 8002066:	f005 fc7c 	bl	8007962 <HAL_TIM_ConfigClockSource>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002070:	f7ff fd64 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800207c:	463b      	mov	r3, r7
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_TIM1_Init+0x98>)
 8002082:	f005 fe95 	bl	8007db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800208c:	f7ff fd56 	bl	8001b3c <Error_Handler>
  }

}
 8002090:	bf00      	nop
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000750 	.word	0x20000750
 800209c:	40010000 	.word	0x40010000

080020a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM5_Init+0x94>)
 80020be:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <MX_TIM5_Init+0x98>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_TIM5_Init+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM5_Init+0x94>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_TIM5_Init+0x94>)
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_TIM5_Init+0x94>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_TIM5_Init+0x94>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <MX_TIM5_Init+0x94>)
 80020e4:	f005 fae6 	bl	80076b4 <HAL_TIM_Base_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80020ee:	f7ff fd25 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	4619      	mov	r1, r3
 80020fe:	480d      	ldr	r0, [pc, #52]	; (8002134 <MX_TIM5_Init+0x94>)
 8002100:	f005 fc2f 	bl	8007962 <HAL_TIM_ConfigClockSource>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800210a:	f7ff fd17 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <MX_TIM5_Init+0x94>)
 800211c:	f005 fe48 	bl	8007db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002126:	f7ff fd09 	bl	8001b3c <Error_Handler>
  }

}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000710 	.word	0x20000710
 8002138:	40000c00 	.word	0x40000c00

0800213c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002142:	463b      	mov	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <MX_TIM7_Init+0x64>)
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <MX_TIM7_Init+0x68>)
 800214e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_TIM7_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MX_TIM7_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <MX_TIM7_Init+0x64>)
 800215e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_TIM7_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <MX_TIM7_Init+0x64>)
 800216c:	f005 faa2 	bl	80076b4 <HAL_TIM_Base_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002176:	f7ff fce1 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002182:	463b      	mov	r3, r7
 8002184:	4619      	mov	r1, r3
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <MX_TIM7_Init+0x64>)
 8002188:	f005 fe12 	bl	8007db0 <HAL_TIMEx_MasterConfigSynchronization>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002192:	f7ff fcd3 	bl	8001b3c <Error_Handler>
  }

}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000790 	.word	0x20000790
 80021a4:	40001400 	.word	0x40001400

080021a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_TIM_Base_MspInit+0xa8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80021d6:	e036      	b.n	8002246 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_TIM_Base_MspInit+0xb0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d116      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2105      	movs	r1, #5
 8002202:	2032      	movs	r0, #50	; 0x32
 8002204:	f001 fb92 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002208:	2032      	movs	r0, #50	; 0x32
 800220a:	f001 fbab 	bl	8003964 <HAL_NVIC_EnableIRQ>
}
 800220e:	e01a      	b.n	8002246 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_TIM_Base_MspInit+0xb4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d115      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_Base_MspInit+0xac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2105      	movs	r1, #5
 800223a:	2037      	movs	r0, #55	; 0x37
 800223c:	f001 fb76 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002240:	2037      	movs	r0, #55	; 0x37
 8002242:	f001 fb8f 	bl	8003964 <HAL_NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40023800 	.word	0x40023800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40001400 	.word	0x40001400

08002260 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <MX_USART1_UART_Init+0x50>)
 8002268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 800226c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_USART1_UART_Init+0x4c>)
 8002298:	f005 fe1a 	bl	8007ed0 <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022a2:	f7ff fc4b 	bl	8001b3c <Error_Handler>
  }

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200006d0 	.word	0x200006d0
 80022b0:	40011000 	.word	0x40011000

080022b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_UART_MspInit+0x94>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d134      	bne.n	8002340 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_UART_MspInit+0x98>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_UART_MspInit+0x98>)
 80022e0:	f043 0310 	orr.w	r3, r3, #16
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_UART_MspInit+0x98>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_UART_MspInit+0x98>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_UART_MspInit+0x98>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_UART_MspInit+0x98>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800230e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002320:	2307      	movs	r3, #7
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4809      	ldr	r0, [pc, #36]	; (8002350 <HAL_UART_MspInit+0x9c>)
 800232c:	f002 f8a4 	bl	8004478 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2105      	movs	r1, #5
 8002334:	2025      	movs	r0, #37	; 0x25
 8002336:	f001 faf9 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800233a:	2025      	movs	r0, #37	; 0x25
 800233c:	f001 fb12 	bl	8003964 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40011000 	.word	0x40011000
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002358:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800235a:	e003      	b.n	8002364 <LoopCopyDataInit>

0800235c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800235e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002360:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002362:	3104      	adds	r1, #4

08002364 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002364:	480b      	ldr	r0, [pc, #44]	; (8002394 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002368:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800236a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800236c:	d3f6      	bcc.n	800235c <CopyDataInit>
  ldr  r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002370:	e002      	b.n	8002378 <LoopFillZerobss>

08002372 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002372:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002374:	f842 3b04 	str.w	r3, [r2], #4

08002378 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800237a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800237c:	d3f9      	bcc.n	8002372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237e:	f7ff fe29 	bl	8001fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f007 f8bd 	bl	8009500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7ff fa6d 	bl	8001864 <main>
  bx  lr    
 800238a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800238c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002390:	0800ee64 	.word	0x0800ee64
  ldr  r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002398:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 800239c:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 80023a0:	20000890 	.word	0x20000890

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>

080023a6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80023aa:	f000 fa5d 	bl	8002868 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80023ae:	20ca      	movs	r0, #202	; 0xca
 80023b0:	f000 f95d 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80023b4:	20c3      	movs	r0, #195	; 0xc3
 80023b6:	f000 f967 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80023ba:	2008      	movs	r0, #8
 80023bc:	f000 f964 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80023c0:	2050      	movs	r0, #80	; 0x50
 80023c2:	f000 f961 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80023c6:	20cf      	movs	r0, #207	; 0xcf
 80023c8:	f000 f951 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f000 f95b 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80023d2:	20c1      	movs	r0, #193	; 0xc1
 80023d4:	f000 f958 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80023d8:	2030      	movs	r0, #48	; 0x30
 80023da:	f000 f955 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80023de:	20ed      	movs	r0, #237	; 0xed
 80023e0:	f000 f945 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80023e4:	2064      	movs	r0, #100	; 0x64
 80023e6:	f000 f94f 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80023ea:	2003      	movs	r0, #3
 80023ec:	f000 f94c 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80023f0:	2012      	movs	r0, #18
 80023f2:	f000 f949 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80023f6:	2081      	movs	r0, #129	; 0x81
 80023f8:	f000 f946 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80023fc:	20e8      	movs	r0, #232	; 0xe8
 80023fe:	f000 f936 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002402:	2085      	movs	r0, #133	; 0x85
 8002404:	f000 f940 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f000 f93d 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800240e:	2078      	movs	r0, #120	; 0x78
 8002410:	f000 f93a 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002414:	20cb      	movs	r0, #203	; 0xcb
 8002416:	f000 f92a 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800241a:	2039      	movs	r0, #57	; 0x39
 800241c:	f000 f934 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002420:	202c      	movs	r0, #44	; 0x2c
 8002422:	f000 f931 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002426:	2000      	movs	r0, #0
 8002428:	f000 f92e 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800242c:	2034      	movs	r0, #52	; 0x34
 800242e:	f000 f92b 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002432:	2002      	movs	r0, #2
 8002434:	f000 f928 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002438:	20f7      	movs	r0, #247	; 0xf7
 800243a:	f000 f918 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800243e:	2020      	movs	r0, #32
 8002440:	f000 f922 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002444:	20ea      	movs	r0, #234	; 0xea
 8002446:	f000 f912 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f000 f91c 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f000 f919 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002456:	20b1      	movs	r0, #177	; 0xb1
 8002458:	f000 f909 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f000 f913 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002462:	201b      	movs	r0, #27
 8002464:	f000 f910 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002468:	20b6      	movs	r0, #182	; 0xb6
 800246a:	f000 f900 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800246e:	200a      	movs	r0, #10
 8002470:	f000 f90a 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002474:	20a2      	movs	r0, #162	; 0xa2
 8002476:	f000 f907 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800247a:	20c0      	movs	r0, #192	; 0xc0
 800247c:	f000 f8f7 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002480:	2010      	movs	r0, #16
 8002482:	f000 f901 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002486:	20c1      	movs	r0, #193	; 0xc1
 8002488:	f000 f8f1 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800248c:	2010      	movs	r0, #16
 800248e:	f000 f8fb 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002492:	20c5      	movs	r0, #197	; 0xc5
 8002494:	f000 f8eb 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002498:	2045      	movs	r0, #69	; 0x45
 800249a:	f000 f8f5 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800249e:	2015      	movs	r0, #21
 80024a0:	f000 f8f2 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80024a4:	20c7      	movs	r0, #199	; 0xc7
 80024a6:	f000 f8e2 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80024aa:	2090      	movs	r0, #144	; 0x90
 80024ac:	f000 f8ec 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80024b0:	2036      	movs	r0, #54	; 0x36
 80024b2:	f000 f8dc 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80024b6:	20c8      	movs	r0, #200	; 0xc8
 80024b8:	f000 f8e6 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80024bc:	20f2      	movs	r0, #242	; 0xf2
 80024be:	f000 f8d6 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f000 f8e0 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80024c8:	20b0      	movs	r0, #176	; 0xb0
 80024ca:	f000 f8d0 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80024ce:	20c2      	movs	r0, #194	; 0xc2
 80024d0:	f000 f8da 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80024d4:	20b6      	movs	r0, #182	; 0xb6
 80024d6:	f000 f8ca 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80024da:	200a      	movs	r0, #10
 80024dc:	f000 f8d4 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80024e0:	20a7      	movs	r0, #167	; 0xa7
 80024e2:	f000 f8d1 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80024e6:	2027      	movs	r0, #39	; 0x27
 80024e8:	f000 f8ce 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80024ec:	2004      	movs	r0, #4
 80024ee:	f000 f8cb 	bl	8002688 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80024f2:	202a      	movs	r0, #42	; 0x2a
 80024f4:	f000 f8bb 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f000 f8c5 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 f8c2 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002504:	2000      	movs	r0, #0
 8002506:	f000 f8bf 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800250a:	20ef      	movs	r0, #239	; 0xef
 800250c:	f000 f8bc 	bl	8002688 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002510:	202b      	movs	r0, #43	; 0x2b
 8002512:	f000 f8ac 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f8b6 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f8b3 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002522:	2001      	movs	r0, #1
 8002524:	f000 f8b0 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002528:	203f      	movs	r0, #63	; 0x3f
 800252a:	f000 f8ad 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800252e:	20f6      	movs	r0, #246	; 0xf6
 8002530:	f000 f89d 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002534:	2001      	movs	r0, #1
 8002536:	f000 f8a7 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f000 f8a4 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002540:	2006      	movs	r0, #6
 8002542:	f000 f8a1 	bl	8002688 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002546:	202c      	movs	r0, #44	; 0x2c
 8002548:	f000 f891 	bl	800266e <ili9341_WriteReg>
  LCD_Delay(200);
 800254c:	20c8      	movs	r0, #200	; 0xc8
 800254e:	f000 fa79 	bl	8002a44 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002552:	2026      	movs	r0, #38	; 0x26
 8002554:	f000 f88b 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002558:	2001      	movs	r0, #1
 800255a:	f000 f895 	bl	8002688 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800255e:	20e0      	movs	r0, #224	; 0xe0
 8002560:	f000 f885 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002564:	200f      	movs	r0, #15
 8002566:	f000 f88f 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800256a:	2029      	movs	r0, #41	; 0x29
 800256c:	f000 f88c 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002570:	2024      	movs	r0, #36	; 0x24
 8002572:	f000 f889 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002576:	200c      	movs	r0, #12
 8002578:	f000 f886 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800257c:	200e      	movs	r0, #14
 800257e:	f000 f883 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002582:	2009      	movs	r0, #9
 8002584:	f000 f880 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002588:	204e      	movs	r0, #78	; 0x4e
 800258a:	f000 f87d 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800258e:	2078      	movs	r0, #120	; 0x78
 8002590:	f000 f87a 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002594:	203c      	movs	r0, #60	; 0x3c
 8002596:	f000 f877 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800259a:	2009      	movs	r0, #9
 800259c:	f000 f874 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80025a0:	2013      	movs	r0, #19
 80025a2:	f000 f871 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80025a6:	2005      	movs	r0, #5
 80025a8:	f000 f86e 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80025ac:	2017      	movs	r0, #23
 80025ae:	f000 f86b 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80025b2:	2011      	movs	r0, #17
 80025b4:	f000 f868 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f000 f865 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80025be:	20e1      	movs	r0, #225	; 0xe1
 80025c0:	f000 f855 	bl	800266e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f000 f85f 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80025ca:	2016      	movs	r0, #22
 80025cc:	f000 f85c 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80025d0:	201b      	movs	r0, #27
 80025d2:	f000 f859 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80025d6:	2004      	movs	r0, #4
 80025d8:	f000 f856 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80025dc:	2011      	movs	r0, #17
 80025de:	f000 f853 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80025e2:	2007      	movs	r0, #7
 80025e4:	f000 f850 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80025e8:	2031      	movs	r0, #49	; 0x31
 80025ea:	f000 f84d 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80025ee:	2033      	movs	r0, #51	; 0x33
 80025f0:	f000 f84a 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80025f4:	2042      	movs	r0, #66	; 0x42
 80025f6:	f000 f847 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80025fa:	2005      	movs	r0, #5
 80025fc:	f000 f844 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002600:	200c      	movs	r0, #12
 8002602:	f000 f841 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002606:	200a      	movs	r0, #10
 8002608:	f000 f83e 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800260c:	2028      	movs	r0, #40	; 0x28
 800260e:	f000 f83b 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002612:	202f      	movs	r0, #47	; 0x2f
 8002614:	f000 f838 	bl	8002688 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002618:	200f      	movs	r0, #15
 800261a:	f000 f835 	bl	8002688 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800261e:	2011      	movs	r0, #17
 8002620:	f000 f825 	bl	800266e <ili9341_WriteReg>
  LCD_Delay(200);
 8002624:	20c8      	movs	r0, #200	; 0xc8
 8002626:	f000 fa0d 	bl	8002a44 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800262a:	2029      	movs	r0, #41	; 0x29
 800262c:	f000 f81f 	bl	800266e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002630:	202c      	movs	r0, #44	; 0x2c
 8002632:	f000 f81c 	bl	800266e <ili9341_WriteReg>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}

0800263a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800263e:	f000 f913 	bl	8002868 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002642:	2103      	movs	r1, #3
 8002644:	20d3      	movs	r0, #211	; 0xd3
 8002646:	f000 f82c 	bl	80026a2 <ili9341_ReadData>
 800264a:	4603      	mov	r3, r0
 800264c:	b29b      	uxth	r3, r3
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}

08002652 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002656:	2029      	movs	r0, #41	; 0x29
 8002658:	f000 f809 	bl	800266e <ili9341_WriteReg>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002664:	2028      	movs	r0, #40	; 0x28
 8002666:	f000 f802 	bl	800266e <ili9341_WriteReg>
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}

0800266e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f98e 	bl	800299c <LCD_IO_WriteReg>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f95f 	bl	8002958 <LCD_IO_WriteData>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	460a      	mov	r2, r1
 80026ac:	80fb      	strh	r3, [r7, #6]
 80026ae:	4613      	mov	r3, r2
 80026b0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80026b2:	797a      	ldrb	r2, [r7, #5]
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f991 	bl	80029e0 <LCD_IO_ReadData>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80026cc:	23f0      	movs	r3, #240	; 0xf0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80026dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80026f0:	4819      	ldr	r0, [pc, #100]	; (8002758 <SPIx_Init+0x6c>)
 80026f2:	f004 febf 	bl	8007474 <HAL_SPI_GetState>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d12b      	bne.n	8002754 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <SPIx_Init+0x6c>)
 80026fe:	4a17      	ldr	r2, [pc, #92]	; (800275c <SPIx_Init+0x70>)
 8002700:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <SPIx_Init+0x6c>)
 8002704:	2218      	movs	r2, #24
 8002706:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <SPIx_Init+0x6c>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <SPIx_Init+0x6c>)
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <SPIx_Init+0x6c>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <SPIx_Init+0x6c>)
 800271c:	2200      	movs	r2, #0
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <SPIx_Init+0x6c>)
 8002722:	2207      	movs	r2, #7
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <SPIx_Init+0x6c>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <SPIx_Init+0x6c>)
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <SPIx_Init+0x6c>)
 8002734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002738:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <SPIx_Init+0x6c>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SPIx_Init+0x6c>)
 8002742:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002746:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <SPIx_Init+0x6c>)
 800274a:	f000 f853 	bl	80027f4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800274e:	4802      	ldr	r0, [pc, #8]	; (8002758 <SPIx_Init+0x6c>)
 8002750:	f004 fa25 	bl	8006b9e <HAL_SPI_Init>
  } 
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000258 	.word	0x20000258
 800275c:	40015000 	.word	0x40015000

08002760 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <SPIx_Read+0x38>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f107 0108 	add.w	r1, r7, #8
 800277a:	4808      	ldr	r0, [pc, #32]	; (800279c <SPIx_Read+0x3c>)
 800277c:	f004 fbcf 	bl	8006f1e <HAL_SPI_Receive>
 8002780:	4603      	mov	r3, r0
 8002782:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800278a:	f000 f827 	bl	80027dc <SPIx_Error>
  }
  
  return readvalue;
 800278e:	68bb      	ldr	r3, [r7, #8]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000003c 	.word	0x2000003c
 800279c:	20000258 	.word	0x20000258

080027a0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <SPIx_Write+0x34>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1db9      	adds	r1, r7, #6
 80027b4:	2201      	movs	r2, #1
 80027b6:	4808      	ldr	r0, [pc, #32]	; (80027d8 <SPIx_Write+0x38>)
 80027b8:	f004 fa7d 	bl	8006cb6 <HAL_SPI_Transmit>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027c6:	f000 f809 	bl	80027dc <SPIx_Error>
  }
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000003c 	.word	0x2000003c
 80027d8:	20000258 	.word	0x20000258

080027dc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <SPIx_Error+0x14>)
 80027e2:	f004 fa40 	bl	8006c66 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80027e6:	f7ff ff81 	bl	80026ec <SPIx_Init>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000258 	.word	0x20000258

080027f4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <SPIx_MspInit+0x6c>)
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	4a16      	ldr	r2, [pc, #88]	; (8002860 <SPIx_MspInit+0x6c>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	6453      	str	r3, [r2, #68]	; 0x44
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <SPIx_MspInit+0x6c>)
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <SPIx_MspInit+0x6c>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <SPIx_MspInit+0x6c>)
 8002822:	f043 0320 	orr.w	r3, r3, #32
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <SPIx_MspInit+0x6c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002834:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002838:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800283e:	2302      	movs	r3, #2
 8002840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002842:	2301      	movs	r3, #1
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002846:	2305      	movs	r3, #5
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <SPIx_MspInit+0x70>)
 8002852:	f001 fe11 	bl	8004478 <HAL_GPIO_Init>
}
 8002856:	bf00      	nop
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40021400 	.word	0x40021400

08002868 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <LCD_IO_Init+0xe0>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d164      	bne.n	8002940 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <LCD_IO_Init+0xe0>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <LCD_IO_Init+0xe4>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a31      	ldr	r2, [pc, #196]	; (800294c <LCD_IO_Init+0xe4>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <LCD_IO_Init+0xe4>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800289e:	2301      	movs	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	4619      	mov	r1, r3
 80028b0:	4827      	ldr	r0, [pc, #156]	; (8002950 <LCD_IO_Init+0xe8>)
 80028b2:	f001 fde1 	bl	8004478 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <LCD_IO_Init+0xe4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a23      	ldr	r2, [pc, #140]	; (800294c <LCD_IO_Init+0xe4>)
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <LCD_IO_Init+0xe4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80028d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	4619      	mov	r1, r3
 80028ea:	4819      	ldr	r0, [pc, #100]	; (8002950 <LCD_IO_Init+0xe8>)
 80028ec:	f001 fdc4 	bl	8004478 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <LCD_IO_Init+0xe4>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <LCD_IO_Init+0xe4>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <LCD_IO_Init+0xe4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800290c:	2304      	movs	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002918:	2302      	movs	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4619      	mov	r1, r3
 8002922:	480c      	ldr	r0, [pc, #48]	; (8002954 <LCD_IO_Init+0xec>)
 8002924:	f001 fda8 	bl	8004478 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002928:	2200      	movs	r2, #0
 800292a:	2104      	movs	r1, #4
 800292c:	4809      	ldr	r0, [pc, #36]	; (8002954 <LCD_IO_Init+0xec>)
 800292e:	f002 f85b 	bl	80049e8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002932:	2201      	movs	r2, #1
 8002934:	2104      	movs	r1, #4
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <LCD_IO_Init+0xec>)
 8002938:	f002 f856 	bl	80049e8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800293c:	f7ff fed6 	bl	80026ec <SPIx_Init>
  }
}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200002b0 	.word	0x200002b0
 800294c:	40023800 	.word	0x40023800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40020800 	.word	0x40020800

08002958 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002962:	2201      	movs	r2, #1
 8002964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002968:	480a      	ldr	r0, [pc, #40]	; (8002994 <LCD_IO_WriteData+0x3c>)
 800296a:	f002 f83d 	bl	80049e8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800296e:	2200      	movs	r2, #0
 8002970:	2104      	movs	r1, #4
 8002972:	4809      	ldr	r0, [pc, #36]	; (8002998 <LCD_IO_WriteData+0x40>)
 8002974:	f002 f838 	bl	80049e8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff10 	bl	80027a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002980:	2201      	movs	r2, #1
 8002982:	2104      	movs	r1, #4
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <LCD_IO_WriteData+0x40>)
 8002986:	f002 f82f 	bl	80049e8 <HAL_GPIO_WritePin>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40020800 	.word	0x40020800

0800299c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029a6:	2200      	movs	r2, #0
 80029a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ac:	480a      	ldr	r0, [pc, #40]	; (80029d8 <LCD_IO_WriteReg+0x3c>)
 80029ae:	f002 f81b 	bl	80049e8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80029b2:	2200      	movs	r2, #0
 80029b4:	2104      	movs	r1, #4
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <LCD_IO_WriteReg+0x40>)
 80029b8:	f002 f816 	bl	80049e8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff feed 	bl	80027a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029c6:	2201      	movs	r2, #1
 80029c8:	2104      	movs	r1, #4
 80029ca:	4804      	ldr	r0, [pc, #16]	; (80029dc <LCD_IO_WriteReg+0x40>)
 80029cc:	f002 f80c 	bl	80049e8 <HAL_GPIO_WritePin>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40020c00 	.word	0x40020c00
 80029dc:	40020800 	.word	0x40020800

080029e0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	460a      	mov	r2, r1
 80029ea:	80fb      	strh	r3, [r7, #6]
 80029ec:	4613      	mov	r3, r2
 80029ee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80029f4:	2200      	movs	r2, #0
 80029f6:	2104      	movs	r1, #4
 80029f8:	4810      	ldr	r0, [pc, #64]	; (8002a3c <LCD_IO_ReadData+0x5c>)
 80029fa:	f001 fff5 	bl	80049e8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029fe:	2200      	movs	r2, #0
 8002a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a04:	480e      	ldr	r0, [pc, #56]	; (8002a40 <LCD_IO_ReadData+0x60>)
 8002a06:	f001 ffef 	bl	80049e8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fec7 	bl	80027a0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002a12:	797b      	ldrb	r3, [r7, #5]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fea3 	bl	8002760 <SPIx_Read>
 8002a1a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a22:	4807      	ldr	r0, [pc, #28]	; (8002a40 <LCD_IO_ReadData+0x60>)
 8002a24:	f001 ffe0 	bl	80049e8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <LCD_IO_ReadData+0x5c>)
 8002a2e:	f001 ffdb 	bl	80049e8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00

08002a44 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fe91 	bl	8003774 <HAL_Delay>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002a60:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a62:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <BSP_LCD_Init+0xc0>)
 8002a64:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a66:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a68:	2209      	movs	r2, #9
 8002a6a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a74:	221d      	movs	r2, #29
 8002a76:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a80:	f240 120d 	movw	r2, #269	; 0x10d
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a88:	f240 1243 	movw	r2, #323	; 0x143
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a90:	f240 1217 	movw	r2, #279	; 0x117
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002a98:	f240 1247 	movw	r2, #327	; 0x147
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <BSP_LCD_Init+0xc4>)
 8002ab8:	2208      	movs	r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <BSP_LCD_Init+0xc4>)
 8002abe:	22c0      	movs	r2, #192	; 0xc0
 8002ac0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <BSP_LCD_Init+0xc4>)
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <BSP_LCD_Init+0xc4>)
 8002aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <BSP_LCD_Init+0xc4>)
 8002ad2:	f003 fe27 	bl	8006724 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002aee:	f000 fa47 	bl	8002f80 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002af2:	4809      	ldr	r0, [pc, #36]	; (8002b18 <BSP_LCD_Init+0xbc>)
 8002af4:	f002 fd96 	bl	8005624 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <BSP_LCD_Init+0xc8>)
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <BSP_LCD_Init+0xcc>)
 8002afc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <BSP_LCD_Init+0xc8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002b06:	f000 fc29 	bl	800335c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b0a:	4808      	ldr	r0, [pc, #32]	; (8002b2c <BSP_LCD_Init+0xd0>)
 8002b0c:	f000 f8ce 	bl	8002cac <BSP_LCD_SetFont>

  return LCD_OK;
 8002b10:	2300      	movs	r3, #0
}  
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200007d0 	.word	0x200007d0
 8002b1c:	40016800 	.word	0x40016800
 8002b20:	200002f4 	.word	0x200002f4
 8002b24:	20000878 	.word	0x20000878
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	20000040 	.word	0x20000040

08002b30 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <BSP_LCD_GetXSize+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	4798      	blx	r3
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000878 	.word	0x20000878

08002b48 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <BSP_LCD_GetYSize+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	4798      	blx	r3
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000878 	.word	0x20000878

08002b60 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	; 0x40
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b70:	f7ff ffde 	bl	8002b30 <BSP_LCD_GetXSize>
 8002b74:	4603      	mov	r3, r0
 8002b76:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b7c:	f7ff ffe4 	bl	8002b48 <BSP_LCD_GetYSize>
 8002b80:	4603      	mov	r3, r0
 8002b82:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002b8c:	23ff      	movs	r3, #255	; 0xff
 8002b8e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ba6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002bac:	2307      	movs	r3, #7
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002bb0:	f7ff ffbe 	bl	8002b30 <BSP_LCD_GetXSize>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002bb8:	f7ff ffc6 	bl	8002b48 <BSP_LCD_GetYSize>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4814      	ldr	r0, [pc, #80]	; (8002c1c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bca:	f002 febd 	bl	8005948 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	4913      	ldr	r1, [pc, #76]	; (8002c20 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3304      	adds	r3, #4
 8002bde:	f04f 32ff 	mov.w	r2, #4294967295
 8002be2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	490e      	ldr	r1, [pc, #56]	; (8002c20 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002bf6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002bf8:	88fa      	ldrh	r2, [r7, #6]
 8002bfa:	4909      	ldr	r1, [pc, #36]	; (8002c20 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002c0c:	4803      	ldr	r0, [pc, #12]	; (8002c1c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c0e:	f002 fed9 	bl	80059c4 <HAL_LTDC_EnableDither>
}
 8002c12:	bf00      	nop
 8002c14:	3740      	adds	r7, #64	; 0x40
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200007d0 	.word	0x200007d0
 8002c20:	20000328 	.word	0x20000328
 8002c24:	20000040 	.word	0x20000040

08002c28 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <BSP_LCD_SelectLayer+0x1c>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000324 	.word	0x20000324

08002c48 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <BSP_LCD_SetTextColor+0x28>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4907      	ldr	r1, [pc, #28]	; (8002c74 <BSP_LCD_SetTextColor+0x2c>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	601a      	str	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	20000324 	.word	0x20000324
 8002c74:	20000328 	.word	0x20000328

08002c78 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <BSP_LCD_SetBackColor+0x2c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <BSP_LCD_SetBackColor+0x30>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3304      	adds	r3, #4
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000324 	.word	0x20000324
 8002ca8:	20000328 	.word	0x20000328

08002cac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <BSP_LCD_SetFont+0x2c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4908      	ldr	r1, [pc, #32]	; (8002cdc <BSP_LCD_SetFont+0x30>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000324 	.word	0x20000324
 8002cdc:	20000328 	.word	0x20000328

08002ce0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <BSP_LCD_GetFont+0x24>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <BSP_LCD_GetFont+0x28>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000324 	.word	0x20000324
 8002d08:	20000328 	.word	0x20000328

08002d0c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <BSP_LCD_Clear+0x48>)
 8002d16:	681c      	ldr	r4, [r3, #0]
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <BSP_LCD_Clear+0x48>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <BSP_LCD_Clear+0x4c>)
 8002d1e:	2134      	movs	r1, #52	; 0x34
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	335c      	adds	r3, #92	; 0x5c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461e      	mov	r6, r3
 8002d2c:	f7ff ff00 	bl	8002b30 <BSP_LCD_GetXSize>
 8002d30:	4605      	mov	r5, r0
 8002d32:	f7ff ff09 	bl	8002b48 <BSP_LCD_GetYSize>
 8002d36:	4602      	mov	r2, r0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	462a      	mov	r2, r5
 8002d44:	4631      	mov	r1, r6
 8002d46:	4620      	mov	r0, r4
 8002d48:	f000 fad0 	bl	80032ec <FillBuffer>
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d54:	20000324 	.word	0x20000324
 8002d58:	200007d0 	.word	0x200007d0

08002d5c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
 8002d66:	460b      	mov	r3, r1
 8002d68:	80bb      	strh	r3, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <BSP_LCD_DisplayChar+0x80>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	491b      	ldr	r1, [pc, #108]	; (8002de0 <BSP_LCD_DisplayChar+0x84>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3308      	adds	r3, #8
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <BSP_LCD_DisplayChar+0x80>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4c14      	ldr	r4, [pc, #80]	; (8002de0 <BSP_LCD_DisplayChar+0x84>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4423      	add	r3, r4
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002da0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <BSP_LCD_DisplayChar+0x80>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4c0d      	ldr	r4, [pc, #52]	; (8002de0 <BSP_LCD_DisplayChar+0x84>)
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4423      	add	r3, r4
 8002db4:	3308      	adds	r3, #8
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	889b      	ldrh	r3, [r3, #4]
 8002dba:	3307      	adds	r3, #7
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da00      	bge.n	8002dc2 <BSP_LCD_DisplayChar+0x66>
 8002dc0:	3307      	adds	r3, #7
 8002dc2:	10db      	asrs	r3, r3, #3
 8002dc4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dc8:	18ca      	adds	r2, r1, r3
 8002dca:	88b9      	ldrh	r1, [r7, #4]
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f9d2 	bl	8003178 <DrawChar>
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}
 8002ddc:	20000324 	.word	0x20000324
 8002de0:	20000328 	.word	0x20000328

08002de4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60ba      	str	r2, [r7, #8]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	81fb      	strh	r3, [r7, #14]
 8002df2:	460b      	mov	r3, r1
 8002df4:	81bb      	strh	r3, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	83fb      	strh	r3, [r7, #30]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e0e:	e002      	b.n	8002e16 <BSP_LCD_DisplayStringAt+0x32>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	3301      	adds	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	617a      	str	r2, [r7, #20]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f6      	bne.n	8002e10 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002e22:	f7ff fe85 	bl	8002b30 <BSP_LCD_GetXSize>
 8002e26:	4601      	mov	r1, r0
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <BSP_LCD_DisplayStringAt+0x174>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	484b      	ldr	r0, [pc, #300]	; (8002f5c <BSP_LCD_DisplayStringAt+0x178>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4403      	add	r3, r0
 8002e38:	3308      	adds	r3, #8
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	889b      	ldrh	r3, [r3, #4]
 8002e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e42:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d01c      	beq.n	8002e84 <BSP_LCD_DisplayStringAt+0xa0>
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	dc33      	bgt.n	8002eb6 <BSP_LCD_DisplayStringAt+0xd2>
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d002      	beq.n	8002e58 <BSP_LCD_DisplayStringAt+0x74>
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d019      	beq.n	8002e8a <BSP_LCD_DisplayStringAt+0xa6>
 8002e56:	e02e      	b.n	8002eb6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad1      	subs	r1, r2, r3
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <BSP_LCD_DisplayStringAt+0x174>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	483e      	ldr	r0, [pc, #248]	; (8002f5c <BSP_LCD_DisplayStringAt+0x178>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4403      	add	r3, r0
 8002e6e:	3308      	adds	r3, #8
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	889b      	ldrh	r3, [r3, #4]
 8002e74:	fb03 f301 	mul.w	r3, r3, r1
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	4413      	add	r3, r2
 8002e80:	83fb      	strh	r3, [r7, #30]
      break;
 8002e82:	e01b      	b.n	8002ebc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002e84:	89fb      	ldrh	r3, [r7, #14]
 8002e86:	83fb      	strh	r3, [r7, #30]
      break;
 8002e88:	e018      	b.n	8002ebc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b299      	uxth	r1, r3
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <BSP_LCD_DisplayStringAt+0x174>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4831      	ldr	r0, [pc, #196]	; (8002f5c <BSP_LCD_DisplayStringAt+0x178>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4403      	add	r3, r0
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	889b      	ldrh	r3, [r3, #4]
 8002ea8:	fb11 f303 	smulbb	r3, r1, r3
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	83fb      	strh	r3, [r7, #30]
      break;
 8002eb4:	e002      	b.n	8002ebc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	83fb      	strh	r3, [r7, #30]
      break;
 8002eba:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ebc:	e01a      	b.n	8002ef4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	89b9      	ldrh	r1, [r7, #12]
 8002ec4:	8bfb      	ldrh	r3, [r7, #30]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff48 	bl	8002d5c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <BSP_LCD_DisplayStringAt+0x174>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4922      	ldr	r1, [pc, #136]	; (8002f5c <BSP_LCD_DisplayStringAt+0x178>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3308      	adds	r3, #8
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	889a      	ldrh	r2, [r3, #4]
 8002ee2:	8bfb      	ldrh	r3, [r7, #30]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3301      	adds	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    i++;
 8002eee:	8bbb      	ldrh	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2dc      	uxtb	r4, r3
 8002f02:	f7ff fe15 	bl	8002b30 <BSP_LCD_GetXSize>
 8002f06:	8bb9      	ldrh	r1, [r7, #28]
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <BSP_LCD_DisplayStringAt+0x174>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4d13      	ldr	r5, [pc, #76]	; (8002f5c <BSP_LCD_DisplayStringAt+0x178>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	442b      	add	r3, r5
 8002f18:	3308      	adds	r3, #8
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	889b      	ldrh	r3, [r3, #4]
 8002f1e:	fb03 f301 	mul.w	r3, r3, r1
 8002f22:	1ac3      	subs	r3, r0, r3
 8002f24:	b299      	uxth	r1, r3
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <BSP_LCD_DisplayStringAt+0x174>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	480c      	ldr	r0, [pc, #48]	; (8002f5c <BSP_LCD_DisplayStringAt+0x178>)
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4403      	add	r3, r0
 8002f36:	3308      	adds	r3, #8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	889b      	ldrh	r3, [r3, #4]
 8002f3c:	4299      	cmp	r1, r3
 8002f3e:	bf2c      	ite	cs
 8002f40:	2301      	movcs	r3, #1
 8002f42:	2300      	movcc	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4023      	ands	r3, r4
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1b7      	bne.n	8002ebe <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}
 8002f58:	20000324 	.word	0x20000324
 8002f5c:	20000328 	.word	0x20000328

08002f60 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <BSP_LCD_DisplayOn+0x1c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002f6e:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <BSP_LCD_DisplayOn+0x1c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4798      	blx	r3
  }
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000878 	.word	0x20000878

08002f80 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
 8002f8a:	4b61      	ldr	r3, [pc, #388]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a60      	ldr	r2, [pc, #384]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	4b5a      	ldr	r3, [pc, #360]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a59      	ldr	r2, [pc, #356]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b57      	ldr	r3, [pc, #348]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	4b53      	ldr	r3, [pc, #332]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b50      	ldr	r3, [pc, #320]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a4b      	ldr	r2, [pc, #300]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	4b45      	ldr	r3, [pc, #276]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a44      	ldr	r2, [pc, #272]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b42      	ldr	r3, [pc, #264]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <BSP_LCD_MspInit+0x190>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a36      	ldr	r2, [pc, #216]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003038:	f043 0320 	orr.w	r3, r3, #32
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <BSP_LCD_MspInit+0x190>)
 8003054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <BSP_LCD_MspInit+0x190>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003066:	f641 0358 	movw	r3, #6232	; 0x1858
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003074:	2302      	movs	r3, #2
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003078:	230e      	movs	r3, #14
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4619      	mov	r1, r3
 8003082:	4824      	ldr	r0, [pc, #144]	; (8003114 <BSP_LCD_MspInit+0x194>)
 8003084:	f001 f9f8 	bl	8004478 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003088:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	4619      	mov	r1, r3
 8003094:	4820      	ldr	r0, [pc, #128]	; (8003118 <BSP_LCD_MspInit+0x198>)
 8003096:	f001 f9ef 	bl	8004478 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800309a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80030a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a4:	4619      	mov	r1, r3
 80030a6:	481d      	ldr	r0, [pc, #116]	; (800311c <BSP_LCD_MspInit+0x19c>)
 80030a8:	f001 f9e6 	bl	8004478 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80030ac:	2348      	movs	r3, #72	; 0x48
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	4619      	mov	r1, r3
 80030b6:	481a      	ldr	r0, [pc, #104]	; (8003120 <BSP_LCD_MspInit+0x1a0>)
 80030b8:	f001 f9de 	bl	8004478 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80030bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80030c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c6:	4619      	mov	r1, r3
 80030c8:	4816      	ldr	r0, [pc, #88]	; (8003124 <BSP_LCD_MspInit+0x1a4>)
 80030ca:	f001 f9d5 	bl	8004478 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80030ce:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80030d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d8:	4619      	mov	r1, r3
 80030da:	4813      	ldr	r0, [pc, #76]	; (8003128 <BSP_LCD_MspInit+0x1a8>)
 80030dc:	f001 f9cc 	bl	8004478 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80030e0:	2303      	movs	r3, #3
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80030e4:	2309      	movs	r3, #9
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ec:	4619      	mov	r1, r3
 80030ee:	480a      	ldr	r0, [pc, #40]	; (8003118 <BSP_LCD_MspInit+0x198>)
 80030f0:	f001 f9c2 	bl	8004478 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80030f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80030fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fe:	4619      	mov	r1, r3
 8003100:	4809      	ldr	r0, [pc, #36]	; (8003128 <BSP_LCD_MspInit+0x1a8>)
 8003102:	f001 f9b9 	bl	8004478 <HAL_GPIO_Init>
}
 8003106:	bf00      	nop
 8003108:	3738      	adds	r7, #56	; 0x38
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	40020000 	.word	0x40020000
 8003118:	40020400 	.word	0x40020400
 800311c:	40020800 	.word	0x40020800
 8003120:	40020c00 	.word	0x40020c00
 8003124:	40021400 	.word	0x40021400
 8003128:	40021800 	.word	0x40021800

0800312c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800312c:	b5b0      	push	{r4, r5, r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	603a      	str	r2, [r7, #0]
 8003136:	80fb      	strh	r3, [r7, #6]
 8003138:	460b      	mov	r3, r1
 800313a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <BSP_LCD_DrawPixel+0x44>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <BSP_LCD_DrawPixel+0x48>)
 8003142:	2134      	movs	r1, #52	; 0x34
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	681c      	ldr	r4, [r3, #0]
 800314e:	88bd      	ldrh	r5, [r7, #4]
 8003150:	f7ff fcee 	bl	8002b30 <BSP_LCD_GetXSize>
 8003154:	4603      	mov	r3, r0
 8003156:	fb03 f205 	mul.w	r2, r3, r5
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4423      	add	r3, r4
 8003162:	461a      	mov	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bdb0      	pop	{r4, r5, r7, pc}
 8003170:	20000324 	.word	0x20000324
 8003174:	200007d0 	.word	0x200007d0

08003178 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	603a      	str	r2, [r7, #0]
 8003182:	80fb      	strh	r3, [r7, #6]
 8003184:	460b      	mov	r3, r1
 8003186:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <DrawChar+0x16c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4953      	ldr	r1, [pc, #332]	; (80032e8 <DrawChar+0x170>)
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3308      	adds	r3, #8
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	88db      	ldrh	r3, [r3, #6]
 80031aa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80031ac:	4b4d      	ldr	r3, [pc, #308]	; (80032e4 <DrawChar+0x16c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <DrawChar+0x170>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3308      	adds	r3, #8
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	889b      	ldrh	r3, [r3, #4]
 80031c2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80031c4:	8a3b      	ldrh	r3, [r7, #16]
 80031c6:	3307      	adds	r3, #7
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <DrawChar+0x56>
 80031cc:	3307      	adds	r3, #7
 80031ce:	10db      	asrs	r3, r3, #3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8a3b      	ldrh	r3, [r7, #16]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e076      	b.n	80032d2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80031e4:	8a3b      	ldrh	r3, [r7, #16]
 80031e6:	3307      	adds	r3, #7
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da00      	bge.n	80031ee <DrawChar+0x76>
 80031ec:	3307      	adds	r3, #7
 80031ee:	10db      	asrs	r3, r3, #3
 80031f0:	461a      	mov	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fb03 f302 	mul.w	r3, r3, r2
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80031fe:	8a3b      	ldrh	r3, [r7, #16]
 8003200:	3307      	adds	r3, #7
 8003202:	2b00      	cmp	r3, #0
 8003204:	da00      	bge.n	8003208 <DrawChar+0x90>
 8003206:	3307      	adds	r3, #7
 8003208:	10db      	asrs	r3, r3, #3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d002      	beq.n	8003214 <DrawChar+0x9c>
 800320e:	2b02      	cmp	r3, #2
 8003210:	d004      	beq.n	800321c <DrawChar+0xa4>
 8003212:	e00c      	b.n	800322e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	617b      	str	r3, [r7, #20]
      break;
 800321a:	e016      	b.n	800324a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	3201      	adds	r2, #1
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
      break;
 800322c:	e00d      	b.n	800324a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	041a      	lsls	r2, r3, #16
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4313      	orrs	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	3202      	adds	r2, #2
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
      break;
 8003248:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e036      	b.n	80032be <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003250:	8a3a      	ldrh	r2, [r7, #16]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	4413      	add	r3, r2
 800325a:	3b01      	subs	r3, #1
 800325c:	2201      	movs	r2, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	461a      	mov	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	b29a      	uxth	r2, r3
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	4413      	add	r3, r2
 8003274:	b298      	uxth	r0, r3
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <DrawChar+0x16c>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	491b      	ldr	r1, [pc, #108]	; (80032e8 <DrawChar+0x170>)
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	88bb      	ldrh	r3, [r7, #4]
 800328a:	4619      	mov	r1, r3
 800328c:	f7ff ff4e 	bl	800312c <BSP_LCD_DrawPixel>
 8003290:	e012      	b.n	80032b8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	b29a      	uxth	r2, r3
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	4413      	add	r3, r2
 800329a:	b298      	uxth	r0, r3
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <DrawChar+0x16c>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4911      	ldr	r1, [pc, #68]	; (80032e8 <DrawChar+0x170>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3304      	adds	r3, #4
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	88bb      	ldrh	r3, [r7, #4]
 80032b2:	4619      	mov	r1, r3
 80032b4:	f7ff ff3a 	bl	800312c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	8a3b      	ldrh	r3, [r7, #16]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3c4      	bcc.n	8003250 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80032c6:	88bb      	ldrh	r3, [r7, #4]
 80032c8:	3301      	adds	r3, #1
 80032ca:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	3301      	adds	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	8a7b      	ldrh	r3, [r7, #18]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d384      	bcc.n	80031e4 <DrawChar+0x6c>
  }
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000324 	.word	0x20000324
 80032e8:	20000328 	.word	0x20000328

080032ec <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <FillBuffer+0x68>)
 80032fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003300:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <FillBuffer+0x68>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <FillBuffer+0x68>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <FillBuffer+0x68>)
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <FillBuffer+0x6c>)
 8003312:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003314:	480f      	ldr	r0, [pc, #60]	; (8003354 <FillBuffer+0x68>)
 8003316:	f000 fd13 	bl	8003d40 <HAL_DMA2D_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d115      	bne.n	800334c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	480c      	ldr	r0, [pc, #48]	; (8003354 <FillBuffer+0x68>)
 8003324:	f000 ff7a 	bl	800421c <HAL_DMA2D_ConfigLayer>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69f9      	ldr	r1, [r7, #28]
 8003338:	4806      	ldr	r0, [pc, #24]	; (8003354 <FillBuffer+0x68>)
 800333a:	f000 fd4a 	bl	8003dd2 <HAL_DMA2D_Start>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003344:	210a      	movs	r1, #10
 8003346:	4803      	ldr	r0, [pc, #12]	; (8003354 <FillBuffer+0x68>)
 8003348:	f000 fd6e 	bl	8003e28 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200002b4 	.word	0x200002b4
 8003358:	4002b000 	.word	0x4002b000

0800335c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <BSP_SDRAM_Init+0xac>)
 8003362:	4a2a      	ldr	r2, [pc, #168]	; (800340c <BSP_SDRAM_Init+0xb0>)
 8003364:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003366:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 8003368:	2202      	movs	r2, #2
 800336a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 800336e:	2207      	movs	r2, #7
 8003370:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 8003374:	2204      	movs	r2, #4
 8003376:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 800337a:	2207      	movs	r2, #7
 800337c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 8003380:	2202      	movs	r2, #2
 8003382:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003384:	4b22      	ldr	r3, [pc, #136]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 8003386:	2202      	movs	r2, #2
 8003388:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 800338c:	2202      	movs	r2, #2
 800338e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <BSP_SDRAM_Init+0xac>)
 8003392:	2201      	movs	r2, #1
 8003394:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <BSP_SDRAM_Init+0xac>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <BSP_SDRAM_Init+0xac>)
 800339e:	2204      	movs	r2, #4
 80033a0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033a4:	2210      	movs	r2, #16
 80033a6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033a8:	4b17      	ldr	r3, [pc, #92]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80033b4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80033d2:	2100      	movs	r1, #0
 80033d4:	480c      	ldr	r0, [pc, #48]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033d6:	f000 f87f 	bl	80034d8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80033da:	490d      	ldr	r1, [pc, #52]	; (8003410 <BSP_SDRAM_Init+0xb4>)
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <BSP_SDRAM_Init+0xac>)
 80033de:	f003 fb5f 	bl	8006aa0 <HAL_SDRAM_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <BSP_SDRAM_Init+0xb8>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e002      	b.n	80033f6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <BSP_SDRAM_Init+0xb8>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80033f6:	f240 506a 	movw	r0, #1386	; 0x56a
 80033fa:	f000 f80d 	bl	8003418 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <BSP_SDRAM_Init+0xb8>)
 8003400:	781b      	ldrb	r3, [r3, #0]
}
 8003402:	4618      	mov	r0, r3
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000340 	.word	0x20000340
 800340c:	a0000140 	.word	0xa0000140
 8003410:	20000374 	.word	0x20000374
 8003414:	20000058 	.word	0x20000058

08003418 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800342c:	2208      	movs	r2, #8
 800342e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003432:	2201      	movs	r2, #1
 8003434:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800343c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003440:	4923      	ldr	r1, [pc, #140]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003442:	4824      	ldr	r0, [pc, #144]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003444:	f003 fb60 	bl	8006b08 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003448:	2001      	movs	r0, #1
 800344a:	f000 f993 	bl	8003774 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003450:	2202      	movs	r2, #2
 8003452:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003456:	2208      	movs	r2, #8
 8003458:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800345c:	2201      	movs	r2, #1
 800345e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800346a:	4919      	ldr	r1, [pc, #100]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800346c:	4819      	ldr	r0, [pc, #100]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800346e:	f003 fb4b 	bl	8006b08 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003474:	2203      	movs	r2, #3
 8003476:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800347a:	2208      	movs	r2, #8
 800347c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003480:	2204      	movs	r2, #4
 8003482:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800348a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800348e:	4910      	ldr	r1, [pc, #64]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003490:	4810      	ldr	r0, [pc, #64]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003492:	f003 fb39 	bl	8006b08 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003496:	f44f 730c 	mov.w	r3, #560	; 0x230
 800349a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800349e:	2204      	movs	r2, #4
 80034a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a4:	2208      	movs	r2, #8
 80034a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80034b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b8:	4905      	ldr	r1, [pc, #20]	; (80034d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ba:	4806      	ldr	r0, [pc, #24]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034bc:	f003 fb24 	bl	8006b08 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4804      	ldr	r0, [pc, #16]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034c4:	f003 fb4b 	bl	8006b5e <HAL_SDRAM_ProgramRefreshRate>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000390 	.word	0x20000390
 80034d4:	20000340 	.word	0x20000340

080034d8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b090      	sub	sp, #64	; 0x40
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80ec 	beq.w	80036c2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4a76      	ldr	r2, [pc, #472]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6393      	str	r3, [r2, #56]	; 0x38
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	4b70      	ldr	r3, [pc, #448]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	4b69      	ldr	r3, [pc, #420]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a68      	ldr	r2, [pc, #416]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b66      	ldr	r3, [pc, #408]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	4b62      	ldr	r3, [pc, #392]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a61      	ldr	r2, [pc, #388]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a5a      	ldr	r2, [pc, #360]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b58      	ldr	r3, [pc, #352]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a53      	ldr	r2, [pc, #332]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003580:	f043 0310 	orr.w	r3, r3, #16
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b51      	ldr	r3, [pc, #324]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 800359c:	f043 0320 	orr.w	r3, r3, #32
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b4a      	ldr	r3, [pc, #296]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b46      	ldr	r3, [pc, #280]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a45      	ldr	r2, [pc, #276]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80035b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b43      	ldr	r3, [pc, #268]	; (80036cc <BSP_SDRAM_MspInit+0x1f4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80035ce:	2302      	movs	r3, #2
 80035d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80035d6:	230c      	movs	r3, #12
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80035da:	2360      	movs	r3, #96	; 0x60
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80035de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e2:	4619      	mov	r1, r3
 80035e4:	483a      	ldr	r0, [pc, #232]	; (80036d0 <BSP_SDRAM_MspInit+0x1f8>)
 80035e6:	f000 ff47 	bl	8004478 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80035ea:	2301      	movs	r3, #1
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80035ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f2:	4619      	mov	r1, r3
 80035f4:	4837      	ldr	r0, [pc, #220]	; (80036d4 <BSP_SDRAM_MspInit+0x1fc>)
 80035f6:	f000 ff3f 	bl	8004478 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80035fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	4619      	mov	r1, r3
 8003606:	4834      	ldr	r0, [pc, #208]	; (80036d8 <BSP_SDRAM_MspInit+0x200>)
 8003608:	f000 ff36 	bl	8004478 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800360c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003616:	4619      	mov	r1, r3
 8003618:	4830      	ldr	r0, [pc, #192]	; (80036dc <BSP_SDRAM_MspInit+0x204>)
 800361a:	f000 ff2d 	bl	8004478 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800361e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003628:	4619      	mov	r1, r3
 800362a:	482d      	ldr	r0, [pc, #180]	; (80036e0 <BSP_SDRAM_MspInit+0x208>)
 800362c:	f000 ff24 	bl	8004478 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003630:	f248 1333 	movw	r3, #33075	; 0x8133
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363a:	4619      	mov	r1, r3
 800363c:	4829      	ldr	r0, [pc, #164]	; (80036e4 <BSP_SDRAM_MspInit+0x20c>)
 800363e:	f000 ff1b 	bl	8004478 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003644:	2200      	movs	r2, #0
 8003646:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800364e:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003664:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800366c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003670:	2200      	movs	r2, #0
 8003672:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003674:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800367a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 800367e:	2200      	movs	r2, #0
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003684:	2203      	movs	r2, #3
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 800368a:	2200      	movs	r2, #0
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <BSP_SDRAM_MspInit+0x214>)
 8003698:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
 80036a0:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80036a6:	4810      	ldr	r0, [pc, #64]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 80036a8:	f000 fa18 	bl	8003adc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80036ac:	480e      	ldr	r0, [pc, #56]	; (80036e8 <BSP_SDRAM_MspInit+0x210>)
 80036ae:	f000 f967 	bl	8003980 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	210f      	movs	r1, #15
 80036b6:	2038      	movs	r0, #56	; 0x38
 80036b8:	f000 f938 	bl	800392c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80036bc:	2038      	movs	r0, #56	; 0x38
 80036be:	f000 f951 	bl	8003964 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80036c2:	bf00      	nop
 80036c4:	3740      	adds	r7, #64	; 0x40
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020400 	.word	0x40020400
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020c00 	.word	0x40020c00
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40021400 	.word	0x40021400
 80036e4:	40021800 	.word	0x40021800
 80036e8:	200003a0 	.word	0x200003a0
 80036ec:	40026410 	.word	0x40026410

080036f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_Init+0x40>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_Init+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <HAL_Init+0x40>)
 8003706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_Init+0x40>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_Init+0x40>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f8fc 	bl	8003916 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371e:	2000      	movs	r0, #0
 8003720:	f7fe fadc 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003724:	f7fe faae 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00

08003734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_IncTick+0x20>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x24>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4413      	add	r3, r2
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_IncTick+0x24>)
 8003746:	6013      	str	r3, [r2, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000060 	.word	0x20000060
 8003758:	2000087c 	.word	0x2000087c

0800375c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return uwTick;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_GetTick+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000087c 	.word	0x2000087c

08003774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800377c:	f7ff ffee 	bl	800375c <HAL_GetTick>
 8003780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d005      	beq.n	800379a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_Delay+0x44>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800379a:	bf00      	nop
 800379c:	f7ff ffde 	bl	800375c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d8f7      	bhi.n	800379c <HAL_Delay+0x28>
  {
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000060 	.word	0x20000060

080037bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60d3      	str	r3, [r2, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db0b      	blt.n	800384a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <__NVIC_EnableIRQ+0x38>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2001      	movs	r0, #1
 8003842:	fa00 f202 	lsl.w	r2, r0, r2
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000e100 	.word	0xe000e100

0800385c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	2b00      	cmp	r3, #0
 800386e:	db0a      	blt.n	8003886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	490c      	ldr	r1, [pc, #48]	; (80038a8 <__NVIC_SetPriority+0x4c>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	0112      	lsls	r2, r2, #4
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	440b      	add	r3, r1
 8003880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003884:	e00a      	b.n	800389c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4908      	ldr	r1, [pc, #32]	; (80038ac <__NVIC_SetPriority+0x50>)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	3b04      	subs	r3, #4
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	440b      	add	r3, r1
 800389a:	761a      	strb	r2, [r3, #24]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000e100 	.word	0xe000e100
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f1c3 0307 	rsb	r3, r3, #7
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	bf28      	it	cs
 80038ce:	2304      	movcs	r3, #4
 80038d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d902      	bls.n	80038e0 <NVIC_EncodePriority+0x30>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3b03      	subs	r3, #3
 80038de:	e000      	b.n	80038e2 <NVIC_EncodePriority+0x32>
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	401a      	ands	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f8:	f04f 31ff 	mov.w	r1, #4294967295
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43d9      	mvns	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	4313      	orrs	r3, r2
         );
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	; 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff4c 	bl	80037bc <__NVIC_SetPriorityGrouping>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800393e:	f7ff ff61 	bl	8003804 <__NVIC_GetPriorityGrouping>
 8003942:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f7ff ffb1 	bl	80038b0 <NVIC_EncodePriority>
 800394e:	4602      	mov	r2, r0
 8003950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ff80 	bl	800385c <__NVIC_SetPriority>
}
 800395c:	bf00      	nop
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff54 	bl	8003820 <__NVIC_EnableIRQ>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff fee6 	bl	800375c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e099      	b.n	8003ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039bc:	e00f      	b.n	80039de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039be:	f7ff fecd 	bl	800375c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d908      	bls.n	80039de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e078      	b.n	8003ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e8      	bne.n	80039be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4b38      	ldr	r3, [pc, #224]	; (8003ad8 <HAL_DMA_Init+0x158>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d107      	bne.n	8003a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	4313      	orrs	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d117      	bne.n	8003aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8df 	bl	8003c48 <DMA_CheckFifoParam>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e016      	b.n	8003ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f896 	bl	8003bdc <DMA_CalcBaseAndBitshift>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	223f      	movs	r2, #63	; 0x3f
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	f010803f 	.word	0xf010803f

08003adc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e050      	b.n	8003b90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	e048      	b.n	8003b90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f84c 	bl	8003bdc <DMA_CalcBaseAndBitshift>
 8003b44:	4603      	mov	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	223f      	movs	r2, #63	; 0x3f
 8003b72:	409a      	lsls	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d004      	beq.n	8003bb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00c      	b.n	8003bd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2205      	movs	r2, #5
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3b10      	subs	r3, #16
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <DMA_CalcBaseAndBitshift+0x64>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d909      	bls.n	8003c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c1c:	e007      	b.n	8003c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	0800ea6c 	.word	0x0800ea6c

08003c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11f      	bne.n	8003ca2 <DMA_CheckFifoParam+0x5a>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d856      	bhi.n	8003d16 <DMA_CheckFifoParam+0xce>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <DMA_CheckFifoParam+0x28>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c93 	.word	0x08003c93
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	08003d17 	.word	0x08003d17
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d046      	beq.n	8003d1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e043      	b.n	8003d1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9a:	d140      	bne.n	8003d1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e03d      	b.n	8003d1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d121      	bne.n	8003cf0 <DMA_CheckFifoParam+0xa8>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d837      	bhi.n	8003d22 <DMA_CheckFifoParam+0xda>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <DMA_CheckFifoParam+0x70>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003ccf 	.word	0x08003ccf
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003ce1 	.word	0x08003ce1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e030      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d025      	beq.n	8003d26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e022      	b.n	8003d26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce8:	d11f      	bne.n	8003d2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cee:	e01c      	b.n	8003d2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d903      	bls.n	8003cfe <DMA_CheckFifoParam+0xb6>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d003      	beq.n	8003d04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cfc:	e018      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
      break;
 8003d02:	e015      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e00b      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d16:	bf00      	nop
 8003d18:	e00a      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e008      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e006      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d22:	bf00      	nop
 8003d24:	e004      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e03b      	b.n	8003dca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd f8dc 	bl	8000f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	f023 0107 	bic.w	r1, r3, #7
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003daa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d1      	ldr	r1, [r2, #12]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	430b      	orrs	r3, r1
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af02      	add	r7, sp, #8
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_DMA2D_Start+0x1c>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e018      	b.n	8003e20 <HAL_DMA2D_Start+0x4e>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fa99 	bl	8004340 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d056      	beq.n	8003ef2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003e44:	f7ff fc8a 	bl	800375c <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e4a:	e04b      	b.n	8003ee4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d023      	beq.n	8003ea6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	f043 0202 	orr.w	r2, r3, #2
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2221      	movs	r2, #33	; 0x21
 8003e90:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2204      	movs	r2, #4
 8003e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0a5      	b.n	8003ff2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d01a      	beq.n	8003ee4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003eae:	f7ff fc55 	bl	800375c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <HAL_DMA2D_PollForTransfer+0x9c>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10f      	bne.n	8003ee4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e086      	b.n	8003ff2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ac      	beq.n	8003e4c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d061      	beq.n	8003fd8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f14:	f7ff fc22 	bl	800375c <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f1a:	e056      	b.n	8003fca <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02e      	beq.n	8003f8c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2229      	movs	r2, #41	; 0x29
 8003f76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d01a      	beq.n	8003fca <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003f94:	f7ff fbe2 	bl	800375c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <HAL_DMA2D_PollForTransfer+0x182>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e013      	b.n	8003ff2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0a1      	beq.n	8003f1c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2212      	movs	r2, #18
 8003fde:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d026      	beq.n	800406a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d021      	beq.n	800406a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d026      	beq.n	80040c2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d021      	beq.n	80040c2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2220      	movs	r2, #32
 8004094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	f043 0202 	orr.w	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d026      	beq.n	800411a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d021      	beq.n	800411a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2208      	movs	r2, #8
 80040ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2204      	movs	r2, #4
 8004144:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f853 	bl	80041f2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d024      	beq.n	80041a0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01f      	beq.n	80041a0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2202      	movs	r2, #2
 8004176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01f      	beq.n	80041ea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01a      	beq.n	80041ea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2210      	movs	r2, #16
 80041ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f80e 	bl	8004206 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_DMA2D_ConfigLayer+0x20>
 8004238:	2302      	movs	r3, #2
 800423a:	e079      	b.n	8004330 <HAL_DMA2D_ConfigLayer+0x114>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	3318      	adds	r3, #24
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004266:	4b35      	ldr	r3, [pc, #212]	; (800433c <HAL_DMA2D_ConfigLayer+0x120>)
 8004268:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b0a      	cmp	r3, #10
 8004270:	d003      	beq.n	800427a <HAL_DMA2D_ConfigLayer+0x5e>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b09      	cmp	r3, #9
 8004278:	d107      	bne.n	800428a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e005      	b.n	8004296 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	061b      	lsls	r3, r3, #24
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d120      	bne.n	80042de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	ea02 0103 	and.w	r1, r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b0a      	cmp	r3, #10
 80042c4:	d003      	beq.n	80042ce <HAL_DMA2D_ConfigLayer+0xb2>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b09      	cmp	r3, #9
 80042cc:	d127      	bne.n	800431e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
 80042dc:	e01f      	b.n	800431e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	ea02 0103 	and.w	r1, r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b0a      	cmp	r3, #10
 8004306:	d003      	beq.n	8004310 <HAL_DMA2D_ConfigLayer+0xf4>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b09      	cmp	r3, #9
 800430e:	d106      	bne.n	800431e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800431c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	ff03000f 	.word	0xff03000f

08004340 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004340:	b480      	push	{r7}
 8004342:	b08b      	sub	sp, #44	; 0x2c
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	041a      	lsls	r2, r3, #16
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004378:	d174      	bne.n	8004464 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004380:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004388:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004390:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	e053      	b.n	800445a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d106      	bne.n	80043c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e048      	b.n	800445a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d111      	bne.n	80043f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	0cdb      	lsrs	r3, r3, #19
 80043d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	0a9b      	lsrs	r3, r3, #10
 80043da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	08db      	lsrs	r3, r3, #3
 80043e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	02db      	lsls	r3, r3, #11
 80043ea:	4313      	orrs	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	e032      	b.n	800445a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d117      	bne.n	800442c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	0fdb      	lsrs	r3, r3, #31
 8004400:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	0cdb      	lsrs	r3, r3, #19
 8004406:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	0adb      	lsrs	r3, r3, #11
 800440c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	431a      	orrs	r2, r3
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	03db      	lsls	r3, r3, #15
 8004422:	4313      	orrs	r3, r2
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	e016      	b.n	800445a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	0f1b      	lsrs	r3, r3, #28
 8004430:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	0d1b      	lsrs	r3, r3, #20
 8004436:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	0b1b      	lsrs	r3, r3, #12
 800443c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	011a      	lsls	r2, r3, #4
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	431a      	orrs	r2, r3
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	4313      	orrs	r3, r2
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004462:	e003      	b.n	800446c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	60da      	str	r2, [r3, #12]
}
 800446c:	bf00      	nop
 800446e:	372c      	adds	r7, #44	; 0x2c
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e177      	b.n	8004784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004494:	2201      	movs	r2, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	f040 8166 	bne.w	800477e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d00b      	beq.n	80044d2 <HAL_GPIO_Init+0x5a>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d007      	beq.n	80044d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c6:	2b11      	cmp	r3, #17
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b12      	cmp	r3, #18
 80044d0:	d130      	bne.n	8004534 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	2203      	movs	r2, #3
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 0201 	and.w	r2, r3, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0xfc>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b12      	cmp	r3, #18
 8004572:	d123      	bne.n	80045bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	08da      	lsrs	r2, r3, #3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3208      	adds	r2, #8
 800457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	220f      	movs	r2, #15
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	08da      	lsrs	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3208      	adds	r2, #8
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0203 	and.w	r2, r3, #3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80c0 	beq.w	800477e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b66      	ldr	r3, [pc, #408]	; (800479c <HAL_GPIO_Init+0x324>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4a65      	ldr	r2, [pc, #404]	; (800479c <HAL_GPIO_Init+0x324>)
 8004608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800460c:	6453      	str	r3, [r2, #68]	; 0x44
 800460e:	4b63      	ldr	r3, [pc, #396]	; (800479c <HAL_GPIO_Init+0x324>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800461a:	4a61      	ldr	r2, [pc, #388]	; (80047a0 <HAL_GPIO_Init+0x328>)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	220f      	movs	r2, #15
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a58      	ldr	r2, [pc, #352]	; (80047a4 <HAL_GPIO_Init+0x32c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d037      	beq.n	80046b6 <HAL_GPIO_Init+0x23e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a57      	ldr	r2, [pc, #348]	; (80047a8 <HAL_GPIO_Init+0x330>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_GPIO_Init+0x23a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a56      	ldr	r2, [pc, #344]	; (80047ac <HAL_GPIO_Init+0x334>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02b      	beq.n	80046ae <HAL_GPIO_Init+0x236>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a55      	ldr	r2, [pc, #340]	; (80047b0 <HAL_GPIO_Init+0x338>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d025      	beq.n	80046aa <HAL_GPIO_Init+0x232>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a54      	ldr	r2, [pc, #336]	; (80047b4 <HAL_GPIO_Init+0x33c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <HAL_GPIO_Init+0x22e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <HAL_GPIO_Init+0x340>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d019      	beq.n	80046a2 <HAL_GPIO_Init+0x22a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a52      	ldr	r2, [pc, #328]	; (80047bc <HAL_GPIO_Init+0x344>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_GPIO_Init+0x226>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a51      	ldr	r2, [pc, #324]	; (80047c0 <HAL_GPIO_Init+0x348>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00d      	beq.n	800469a <HAL_GPIO_Init+0x222>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a50      	ldr	r2, [pc, #320]	; (80047c4 <HAL_GPIO_Init+0x34c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d007      	beq.n	8004696 <HAL_GPIO_Init+0x21e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4f      	ldr	r2, [pc, #316]	; (80047c8 <HAL_GPIO_Init+0x350>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_GPIO_Init+0x21a>
 800468e:	2309      	movs	r3, #9
 8004690:	e012      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 8004692:	230a      	movs	r3, #10
 8004694:	e010      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 8004696:	2308      	movs	r3, #8
 8004698:	e00e      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 800469a:	2307      	movs	r3, #7
 800469c:	e00c      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 800469e:	2306      	movs	r3, #6
 80046a0:	e00a      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 80046a2:	2305      	movs	r3, #5
 80046a4:	e008      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 80046a6:	2304      	movs	r3, #4
 80046a8:	e006      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 80046aa:	2303      	movs	r3, #3
 80046ac:	e004      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e002      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_GPIO_Init+0x240>
 80046b6:	2300      	movs	r3, #0
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	f002 0203 	and.w	r2, r2, #3
 80046be:	0092      	lsls	r2, r2, #2
 80046c0:	4093      	lsls	r3, r2
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c8:	4935      	ldr	r1, [pc, #212]	; (80047a0 <HAL_GPIO_Init+0x328>)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	3302      	adds	r3, #2
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_GPIO_Init+0x354>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046fa:	4a34      	ldr	r2, [pc, #208]	; (80047cc <HAL_GPIO_Init+0x354>)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004700:	4b32      	ldr	r3, [pc, #200]	; (80047cc <HAL_GPIO_Init+0x354>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004724:	4a29      	ldr	r2, [pc, #164]	; (80047cc <HAL_GPIO_Init+0x354>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800472a:	4b28      	ldr	r3, [pc, #160]	; (80047cc <HAL_GPIO_Init+0x354>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_GPIO_Init+0x354>)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_GPIO_Init+0x354>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_GPIO_Init+0x354>)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	f67f ae84 	bls.w	8004494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	3724      	adds	r7, #36	; 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	40013800 	.word	0x40013800
 80047a4:	40020000 	.word	0x40020000
 80047a8:	40020400 	.word	0x40020400
 80047ac:	40020800 	.word	0x40020800
 80047b0:	40020c00 	.word	0x40020c00
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40021400 	.word	0x40021400
 80047bc:	40021800 	.word	0x40021800
 80047c0:	40021c00 	.word	0x40021c00
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40022400 	.word	0x40022400
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e0d9      	b.n	80049a0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047ec:	2201      	movs	r2, #1
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	f040 80c9 	bne.w	800499a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004808:	4a6b      	ldr	r2, [pc, #428]	; (80049b8 <HAL_GPIO_DeInit+0x1e8>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a63      	ldr	r2, [pc, #396]	; (80049bc <HAL_GPIO_DeInit+0x1ec>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d037      	beq.n	80048a2 <HAL_GPIO_DeInit+0xd2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a62      	ldr	r2, [pc, #392]	; (80049c0 <HAL_GPIO_DeInit+0x1f0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d031      	beq.n	800489e <HAL_GPIO_DeInit+0xce>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <HAL_GPIO_DeInit+0xca>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a60      	ldr	r2, [pc, #384]	; (80049c8 <HAL_GPIO_DeInit+0x1f8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d025      	beq.n	8004896 <HAL_GPIO_DeInit+0xc6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <HAL_GPIO_DeInit+0x1fc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01f      	beq.n	8004892 <HAL_GPIO_DeInit+0xc2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_GPIO_DeInit+0x200>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d019      	beq.n	800488e <HAL_GPIO_DeInit+0xbe>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <HAL_GPIO_DeInit+0x204>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_GPIO_DeInit+0xba>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a5c      	ldr	r2, [pc, #368]	; (80049d8 <HAL_GPIO_DeInit+0x208>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00d      	beq.n	8004886 <HAL_GPIO_DeInit+0xb6>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <HAL_GPIO_DeInit+0x20c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <HAL_GPIO_DeInit+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a5a      	ldr	r2, [pc, #360]	; (80049e0 <HAL_GPIO_DeInit+0x210>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_GPIO_DeInit+0xae>
 800487a:	2309      	movs	r3, #9
 800487c:	e012      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 800487e:	230a      	movs	r3, #10
 8004880:	e010      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 8004882:	2308      	movs	r3, #8
 8004884:	e00e      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 8004886:	2307      	movs	r3, #7
 8004888:	e00c      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 800488a:	2306      	movs	r3, #6
 800488c:	e00a      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 800488e:	2305      	movs	r3, #5
 8004890:	e008      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 8004892:	2304      	movs	r3, #4
 8004894:	e006      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 8004896:	2303      	movs	r3, #3
 8004898:	e004      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 800489a:	2302      	movs	r3, #2
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_GPIO_DeInit+0xd4>
 80048a2:	2300      	movs	r3, #0
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	f002 0203 	and.w	r2, r2, #3
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	4093      	lsls	r3, r2
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d132      	bne.n	800491a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80048b4:	4b4b      	ldr	r3, [pc, #300]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	4949      	ldr	r1, [pc, #292]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048be:	4013      	ands	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048c2:	4b48      	ldr	r3, [pc, #288]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	4946      	ldr	r1, [pc, #280]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80048d0:	4b44      	ldr	r3, [pc, #272]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	4942      	ldr	r1, [pc, #264]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048da:	4013      	ands	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048de:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	493f      	ldr	r1, [pc, #252]	; (80049e4 <HAL_GPIO_DeInit+0x214>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	220f      	movs	r2, #15
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80048fc:	4a2e      	ldr	r2, [pc, #184]	; (80049b8 <HAL_GPIO_DeInit+0x1e8>)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	43da      	mvns	r2, r3
 800490c:	482a      	ldr	r0, [pc, #168]	; (80049b8 <HAL_GPIO_DeInit+0x1e8>)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	400a      	ands	r2, r1
 8004914:	3302      	adds	r3, #2
 8004916:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	2103      	movs	r1, #3
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	401a      	ands	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3208      	adds	r2, #8
 8004938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	08d2      	lsrs	r2, r2, #3
 8004950:	4019      	ands	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3208      	adds	r2, #8
 8004956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2103      	movs	r1, #3
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	401a      	ands	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	2101      	movs	r1, #1
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2103      	movs	r1, #3
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	401a      	ands	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	f67f af22 	bls.w	80047ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40013800 	.word	0x40013800
 80049bc:	40020000 	.word	0x40020000
 80049c0:	40020400 	.word	0x40020400
 80049c4:	40020800 	.word	0x40020800
 80049c8:	40020c00 	.word	0x40020c00
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40021400 	.word	0x40021400
 80049d4:	40021800 	.word	0x40021800
 80049d8:	40021c00 	.word	0x40021c00
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022400 	.word	0x40022400
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
 80049f4:	4613      	mov	r3, r2
 80049f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f8:	787b      	ldrb	r3, [r7, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a04:	e003      	b.n	8004a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	041a      	lsls	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	619a      	str	r2, [r3, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e12b      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc fcf0 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a80:	f001 fdf6 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a81      	ldr	r2, [pc, #516]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d807      	bhi.n	8004aa0 <HAL_I2C_Init+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_I2C_Init+0x278>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e006      	b.n	8004aae <HAL_I2C_Init+0x92>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a7d      	ldr	r2, [pc, #500]	; (8004c98 <HAL_I2C_Init+0x27c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf94      	ite	ls
 8004aa8:	2301      	movls	r3, #1
 8004aaa:	2300      	movhi	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0e7      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a78      	ldr	r2, [pc, #480]	; (8004c9c <HAL_I2C_Init+0x280>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9b      	lsrs	r3, r3, #18
 8004ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <HAL_I2C_Init+0xd4>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	e009      	b.n	8004b04 <HAL_I2C_Init+0xe8>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	4a69      	ldr	r2, [pc, #420]	; (8004ca0 <HAL_I2C_Init+0x284>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	3301      	adds	r3, #1
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	495c      	ldr	r1, [pc, #368]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d819      	bhi.n	8004b58 <HAL_I2C_Init+0x13c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1e59      	subs	r1, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b38:	400b      	ands	r3, r1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_I2C_Init+0x138>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e59      	subs	r1, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	e051      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e04f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_I2C_Init+0x168>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e012      	b.n	8004baa <HAL_I2C_Init+0x18e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	0099      	lsls	r1, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Init+0x196>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_I2C_Init+0x1bc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1e58      	subs	r0, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	440b      	add	r3, r1
 8004bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e58      	subs	r0, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	0099      	lsls	r1, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6911      	ldr	r1, [r2, #16]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68d2      	ldr	r2, [r2, #12]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	000186a0 	.word	0x000186a0
 8004c94:	001e847f 	.word	0x001e847f
 8004c98:	003d08ff 	.word	0x003d08ff
 8004c9c:	431bde83 	.word	0x431bde83
 8004ca0:	10624dd3 	.word	0x10624dd3

08004ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	813b      	strh	r3, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cbe:	f7fe fd4d 	bl	800375c <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 80d9 	bne.w	8004e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2319      	movs	r3, #25
 8004cd8:	2201      	movs	r2, #1
 8004cda:	496d      	ldr	r1, [pc, #436]	; (8004e90 <HAL_I2C_Mem_Write+0x1ec>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fa9f 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0cc      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2C_Mem_Write+0x56>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e0c5      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d007      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2221      	movs	r2, #33	; 0x21
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a4d      	ldr	r2, [pc, #308]	; (8004e94 <HAL_I2C_Mem_Write+0x1f0>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d62:	88f8      	ldrh	r0, [r7, #6]
 8004d64:	893a      	ldrh	r2, [r7, #8]
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4603      	mov	r3, r0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f9be 	bl	80050f4 <I2C_RequestMemoryWrite>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d052      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e081      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fb20 	bl	80053cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e06b      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d11b      	bne.n	8004e24 <HAL_I2C_Mem_Write+0x180>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d017      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1aa      	bne.n	8004d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fb0c 	bl	800544e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d107      	bne.n	8004e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e016      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	00100002 	.word	0x00100002
 8004e94:	ffff0000 	.word	0xffff0000

08004e98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ea8:	f7fe fc58 	bl	800375c <HAL_GetTick>
 8004eac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	f040 8111 	bne.w	80050e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2319      	movs	r3, #25
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4988      	ldr	r1, [pc, #544]	; (80050ec <HAL_I2C_IsDeviceReady+0x254>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f9a8 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e104      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2C_IsDeviceReady+0x50>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0fd      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d007      	beq.n	8004f0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2224      	movs	r2, #36	; 0x24
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a70      	ldr	r2, [pc, #448]	; (80050f0 <HAL_I2C_IsDeviceReady+0x258>)
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f966 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f68:	d103      	bne.n	8004f72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0b6      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f76:	897b      	ldrh	r3, [r7, #10]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fe fbe9 	bl	800375c <HAL_GetTick>
 8004f8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fba:	e025      	b.n	8005008 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fe fbce 	bl	800375c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <HAL_I2C_IsDeviceReady+0x13a>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	22a0      	movs	r2, #160	; 0xa0
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2ba0      	cmp	r3, #160	; 0xa0
 8005012:	d005      	beq.n	8005020 <HAL_I2C_IsDeviceReady+0x188>
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <HAL_I2C_IsDeviceReady+0x188>
 800501a:	7dbb      	ldrb	r3, [r7, #22]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0cd      	beq.n	8004fbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d129      	bne.n	800508a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005044:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2319      	movs	r3, #25
 8005062:	2201      	movs	r2, #1
 8005064:	4921      	ldr	r1, [pc, #132]	; (80050ec <HAL_I2C_IsDeviceReady+0x254>)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f8da 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e036      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e02c      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005098:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2319      	movs	r3, #25
 80050aa:	2201      	movs	r2, #1
 80050ac:	490f      	ldr	r1, [pc, #60]	; (80050ec <HAL_I2C_IsDeviceReady+0x254>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f8b6 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e012      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f4ff af32 	bcc.w	8004f32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	00100002 	.word	0x00100002
 80050f0:	ffff0000 	.word	0xffff0000

080050f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	461a      	mov	r2, r3
 8005102:	4603      	mov	r3, r0
 8005104:	817b      	strh	r3, [r7, #10]
 8005106:	460b      	mov	r3, r1
 8005108:	813b      	strh	r3, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	2200      	movs	r2, #0
 8005126:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f878 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005144:	d103      	bne.n	800514e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e05f      	b.n	8005212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	492d      	ldr	r1, [pc, #180]	; (800521c <I2C_RequestMemoryWrite+0x128>)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f8b0 	bl	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e04c      	b.n	8005212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	6a39      	ldr	r1, [r7, #32]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f91a 	bl	80053cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00d      	beq.n	80051ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d107      	bne.n	80051b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e02b      	b.n	8005212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c0:	893b      	ldrh	r3, [r7, #8]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
 80051ca:	e021      	b.n	8005210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051cc:	893b      	ldrh	r3, [r7, #8]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f8f4 	bl	80053cc <I2C_WaitOnTXEFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d107      	bne.n	8005202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e005      	b.n	8005212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005206:	893b      	ldrh	r3, [r7, #8]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	00010002 	.word	0x00010002

08005220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005230:	e025      	b.n	800527e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d021      	beq.n	800527e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fe fa8f 	bl	800375c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d116      	bne.n	800527e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e023      	b.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10d      	bne.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	e00c      	b.n	80052be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0b6      	beq.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052dc:	e051      	b.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ec:	d123      	bne.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005306:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e046      	b.n	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d021      	beq.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fe fa0d 	bl	800375c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d116      	bne.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e020      	b.n	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10c      	bne.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	43da      	mvns	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	e00b      	b.n	80053be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d18d      	bne.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d8:	e02d      	b.n	8005436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f878 	bl	80054d0 <I2C_IsAcknowledgeFailed>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e02d      	b.n	8005446 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d021      	beq.n	8005436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fe f9b3 	bl	800375c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d116      	bne.n	8005436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e007      	b.n	8005446 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d1ca      	bne.n	80053da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800545a:	e02d      	b.n	80054b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f837 	bl	80054d0 <I2C_IsAcknowledgeFailed>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e02d      	b.n	80054c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d021      	beq.n	80054b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fe f972 	bl	800375c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f043 0220 	orr.w	r2, r3, #32
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e007      	b.n	80054c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d1ca      	bne.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d11b      	bne.n	8005520 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f043 0204 	orr.w	r2, r3, #4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	d129      	bne.n	8005598 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0210 	bic.w	r2, r2, #16
 800556a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d12a      	bne.n	8005616 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	f023 030f 	bic.w	r3, r3, #15
 80055e6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	89fa      	ldrh	r2, [r7, #14]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0bf      	b.n	80057b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fb ffd6 	bl	80015fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005666:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800567c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b4a      	ldr	r3, [pc, #296]	; (80057c0 <HAL_LTDC_Init+0x19c>)
 8005698:	400b      	ands	r3, r1
 800569a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6899      	ldr	r1, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68d9      	ldr	r1, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <HAL_LTDC_Init+0x19c>)
 80056c6:	400b      	ands	r3, r1
 80056c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68d9      	ldr	r1, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6919      	ldr	r1, [r3, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b33      	ldr	r3, [pc, #204]	; (80057c0 <HAL_LTDC_Init+0x19c>)
 80056f4:	400b      	ands	r3, r1
 80056f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6919      	ldr	r1, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6959      	ldr	r1, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_LTDC_Init+0x19c>)
 8005722:	400b      	ands	r3, r1
 8005724:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6959      	ldr	r1, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0206 	orr.w	r2, r2, #6
 8005792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	f000f800 	.word	0xf000f800

080057c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d023      	beq.n	800582e <HAL_LTDC_IRQHandler+0x6a>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01e      	beq.n	800582e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2204      	movs	r2, #4
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2204      	movs	r2, #4
 800581c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f86f 	bl	800590c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d023      	beq.n	8005880 <HAL_LTDC_IRQHandler+0xbc>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01e      	beq.n	8005880 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0202 	bic.w	r2, r2, #2
 8005850:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2202      	movs	r2, #2
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005860:	f043 0202 	orr.w	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f846 	bl	800590c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01b      	beq.n	80058c2 <HAL_LTDC_IRQHandler+0xfe>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d016      	beq.n	80058c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f82f 	bl	8005920 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01b      	beq.n	8005904 <HAL_LTDC_IRQHandler+0x140>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0208 	bic.w	r2, r2, #8
 80058e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2208      	movs	r2, #8
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f818 	bl	8005934 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_LTDC_ConfigLayer+0x1a>
 800595e:	2302      	movs	r3, #2
 8005960:	e02c      	b.n	80059bc <HAL_LTDC_ConfigLayer+0x74>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2134      	movs	r1, #52	; 0x34
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4614      	mov	r4, r2
 8005986:	461d      	mov	r5, r3
 8005988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800598c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f83b 	bl	8005a18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bdb0      	pop	{r4, r5, r7, pc}

080059c4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_LTDC_EnableDither+0x16>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e016      	b.n	8005a08 <HAL_LTDC_EnableDither+0x44>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <HAL_LTDC_EnableDither+0x50>)
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <HAL_LTDC_EnableDither+0x50>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40016800 	.word	0x40016800

08005a18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	; 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	4413      	add	r3, r2
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	01db      	lsls	r3, r3, #7
 8005a44:	4413      	add	r3, r2
 8005a46:	3384      	adds	r3, #132	; 0x84
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	4611      	mov	r1, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	01d2      	lsls	r2, r2, #7
 8005a54:	440a      	add	r2, r1
 8005a56:	3284      	adds	r2, #132	; 0x84
 8005a58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6e:	4413      	add	r3, r2
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3384      	adds	r3, #132	; 0x84
 8005a80:	4619      	mov	r1, r3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a96:	4413      	add	r3, r2
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3384      	adds	r3, #132	; 0x84
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	01d2      	lsls	r2, r2, #7
 8005ab6:	440a      	add	r2, r1
 8005ab8:	3284      	adds	r2, #132	; 0x84
 8005aba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005abe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ace:	4413      	add	r3, r2
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	01db      	lsls	r3, r3, #7
 8005adc:	440b      	add	r3, r1
 8005ade:	3384      	adds	r3, #132	; 0x84
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	4413      	add	r3, r2
 8005af4:	3384      	adds	r3, #132	; 0x84
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	4611      	mov	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	01d2      	lsls	r2, r2, #7
 8005b02:	440a      	add	r2, r1
 8005b04:	3284      	adds	r2, #132	; 0x84
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	01db      	lsls	r3, r3, #7
 8005b16:	4413      	add	r3, r2
 8005b18:	3384      	adds	r3, #132	; 0x84
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	01db      	lsls	r3, r3, #7
 8005b48:	4413      	add	r3, r2
 8005b4a:	3384      	adds	r3, #132	; 0x84
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	01db      	lsls	r3, r3, #7
 8005b58:	4413      	add	r3, r2
 8005b5a:	3384      	adds	r3, #132	; 0x84
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b68:	461a      	mov	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4619      	mov	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	01db      	lsls	r3, r3, #7
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3384      	adds	r3, #132	; 0x84
 8005b80:	4619      	mov	r1, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	4413      	add	r3, r2
 8005b94:	3384      	adds	r3, #132	; 0x84
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	01d2      	lsls	r2, r2, #7
 8005ba2:	440a      	add	r2, r1
 8005ba4:	3284      	adds	r2, #132	; 0x84
 8005ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005baa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	01db      	lsls	r3, r3, #7
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3384      	adds	r3, #132	; 0x84
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	01db      	lsls	r3, r3, #7
 8005bcc:	4413      	add	r3, r2
 8005bce:	3384      	adds	r3, #132	; 0x84
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	01d2      	lsls	r2, r2, #7
 8005bdc:	440a      	add	r2, r1
 8005bde:	3284      	adds	r2, #132	; 0x84
 8005be0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005be4:	f023 0307 	bic.w	r3, r3, #7
 8005be8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	68f9      	ldr	r1, [r7, #12]
 8005bf4:	6809      	ldr	r1, [r1, #0]
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	01c9      	lsls	r1, r1, #7
 8005bfc:	4401      	add	r1, r0
 8005bfe:	3184      	adds	r1, #132	; 0x84
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4413      	add	r3, r2
 8005c10:	3384      	adds	r3, #132	; 0x84
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	01db      	lsls	r3, r3, #7
 8005c1e:	4413      	add	r3, r2
 8005c20:	3384      	adds	r3, #132	; 0x84
 8005c22:	461a      	mov	r2, r3
 8005c24:	2300      	movs	r3, #0
 8005c26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	01db      	lsls	r3, r3, #7
 8005c32:	4413      	add	r3, r2
 8005c34:	3384      	adds	r3, #132	; 0x84
 8005c36:	461a      	mov	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c46:	2304      	movs	r3, #4
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	e01b      	b.n	8005c84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d102      	bne.n	8005c5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c54:	2303      	movs	r3, #3
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e014      	b.n	8005c84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d00b      	beq.n	8005c7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d007      	beq.n	8005c7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d003      	beq.n	8005c7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	d102      	bne.n	8005c80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	e001      	b.n	8005c84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c80:	2301      	movs	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	4413      	add	r3, r2
 8005c90:	3384      	adds	r3, #132	; 0x84
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	01d2      	lsls	r2, r2, #7
 8005c9e:	440a      	add	r2, r1
 8005ca0:	3284      	adds	r2, #132	; 0x84
 8005ca2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	041a      	lsls	r2, r3, #16
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	1acb      	subs	r3, r1, r3
 8005cbe:	69f9      	ldr	r1, [r7, #28]
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	6809      	ldr	r1, [r1, #0]
 8005cca:	4608      	mov	r0, r1
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	01c9      	lsls	r1, r1, #7
 8005cd0:	4401      	add	r1, r0
 8005cd2:	3184      	adds	r1, #132	; 0x84
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	01db      	lsls	r3, r3, #7
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3384      	adds	r3, #132	; 0x84
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	4611      	mov	r1, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	01d2      	lsls	r2, r2, #7
 8005cf2:	440a      	add	r2, r1
 8005cf4:	3284      	adds	r2, #132	; 0x84
 8005cf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cfa:	f023 0307 	bic.w	r3, r3, #7
 8005cfe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	01db      	lsls	r3, r3, #7
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3384      	adds	r3, #132	; 0x84
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	01db      	lsls	r3, r3, #7
 8005d20:	4413      	add	r3, r2
 8005d22:	3384      	adds	r3, #132	; 0x84
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	01d2      	lsls	r2, r2, #7
 8005d30:	440a      	add	r2, r1
 8005d32:	3284      	adds	r2, #132	; 0x84
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	6013      	str	r3, [r2, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3724      	adds	r7, #36	; 0x24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d60:	6413      	str	r3, [r2, #64]	; 0x40
 8005d62:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d6e:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <HAL_PWREx_EnableOverDrive+0x94>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d74:	f7fd fcf2 	bl	800375c <HAL_GetTick>
 8005d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d7a:	e009      	b.n	8005d90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d7c:	f7fd fcee 	bl	800375c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d8a:	d901      	bls.n	8005d90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e01f      	b.n	8005dd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d1ee      	bne.n	8005d7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005da4:	f7fd fcda 	bl	800375c <HAL_GetTick>
 8005da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005daa:	e009      	b.n	8005dc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005dac:	f7fd fcd6 	bl	800375c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dba:	d901      	bls.n	8005dc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e007      	b.n	8005dd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dcc:	d1ee      	bne.n	8005dac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	420e0040 	.word	0x420e0040
 8005de0:	40007000 	.word	0x40007000
 8005de4:	420e0044 	.word	0x420e0044

08005de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e25b      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d075      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e06:	4ba3      	ldr	r3, [pc, #652]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4ba0      	ldr	r3, [pc, #640]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d112      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b9d      	ldr	r3, [pc, #628]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	4b99      	ldr	r3, [pc, #612]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x108>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d157      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e236      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCC_OscConfig+0x74>
 8005e4e:	4b91      	ldr	r3, [pc, #580]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a90      	ldr	r2, [pc, #576]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x98>
 8005e66:	4b8b      	ldr	r3, [pc, #556]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a8a      	ldr	r2, [pc, #552]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b88      	ldr	r3, [pc, #544]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a87      	ldr	r2, [pc, #540]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e80:	4b84      	ldr	r3, [pc, #528]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a83      	ldr	r2, [pc, #524]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b81      	ldr	r3, [pc, #516]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a80      	ldr	r2, [pc, #512]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fd fc5c 	bl	800375c <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fd fc58 	bl	800375c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e1fb      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b76      	ldr	r3, [pc, #472]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xc0>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fc48 	bl	800375c <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd fc44 	bl	800375c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1e7      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b6c      	ldr	r3, [pc, #432]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0xe8>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005efe:	4b65      	ldr	r3, [pc, #404]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0a:	4b62      	ldr	r3, [pc, #392]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f16:	4b5f      	ldr	r3, [pc, #380]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	4b5c      	ldr	r3, [pc, #368]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1bb      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3a:	4b56      	ldr	r3, [pc, #344]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4952      	ldr	r1, [pc, #328]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	4b4f      	ldr	r3, [pc, #316]	; (8006098 <HAL_RCC_OscConfig+0x2b0>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fd fbfd 	bl	800375c <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f66:	f7fd fbf9 	bl	800375c <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e19c      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f78:	4b46      	ldr	r3, [pc, #280]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f84:	4b43      	ldr	r3, [pc, #268]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4940      	ldr	r1, [pc, #256]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <HAL_RCC_OscConfig+0x2b0>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fd fbdc 	bl	800375c <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fd fbd8 	bl	800375c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e17b      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fba:	4b36      	ldr	r3, [pc, #216]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d030      	beq.n	8006034 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	4b30      	ldr	r3, [pc, #192]	; (800609c <HAL_RCC_OscConfig+0x2b4>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fd fbbc 	bl	800375c <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fd fbb8 	bl	800375c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e15b      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	4b26      	ldr	r3, [pc, #152]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x200>
 8006006:	e015      	b.n	8006034 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006008:	4b24      	ldr	r3, [pc, #144]	; (800609c <HAL_RCC_OscConfig+0x2b4>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600e:	f7fd fba5 	bl	800375c <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006016:	f7fd fba1 	bl	800375c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e144      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 800602a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80a0 	beq.w	8006182 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10f      	bne.n	8006072 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_OscConfig+0x2b8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d121      	bne.n	80060c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <HAL_RCC_OscConfig+0x2b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <HAL_RCC_OscConfig+0x2b8>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608a:	f7fd fb67 	bl	800375c <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	e011      	b.n	80060b6 <HAL_RCC_OscConfig+0x2ce>
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800
 8006098:	42470000 	.word	0x42470000
 800609c:	42470e80 	.word	0x42470e80
 80060a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a4:	f7fd fb5a 	bl	800375c <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0fd      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b6:	4b81      	ldr	r3, [pc, #516]	; (80062bc <HAL_RCC_OscConfig+0x4d4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d106      	bne.n	80060d8 <HAL_RCC_OscConfig+0x2f0>
 80060ca:	4b7d      	ldr	r3, [pc, #500]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	4a7c      	ldr	r2, [pc, #496]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	6713      	str	r3, [r2, #112]	; 0x70
 80060d6:	e01c      	b.n	8006112 <HAL_RCC_OscConfig+0x32a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b05      	cmp	r3, #5
 80060de:	d10c      	bne.n	80060fa <HAL_RCC_OscConfig+0x312>
 80060e0:	4b77      	ldr	r3, [pc, #476]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	4a76      	ldr	r2, [pc, #472]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060e6:	f043 0304 	orr.w	r3, r3, #4
 80060ea:	6713      	str	r3, [r2, #112]	; 0x70
 80060ec:	4b74      	ldr	r3, [pc, #464]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f0:	4a73      	ldr	r2, [pc, #460]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	6713      	str	r3, [r2, #112]	; 0x70
 80060f8:	e00b      	b.n	8006112 <HAL_RCC_OscConfig+0x32a>
 80060fa:	4b71      	ldr	r3, [pc, #452]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	4a70      	ldr	r2, [pc, #448]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6713      	str	r3, [r2, #112]	; 0x70
 8006106:	4b6e      	ldr	r3, [pc, #440]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	4a6d      	ldr	r2, [pc, #436]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d015      	beq.n	8006146 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611a:	f7fd fb1f 	bl	800375c <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006120:	e00a      	b.n	8006138 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006122:	f7fd fb1b 	bl	800375c <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006130:	4293      	cmp	r3, r2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e0bc      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006138:	4b61      	ldr	r3, [pc, #388]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ee      	beq.n	8006122 <HAL_RCC_OscConfig+0x33a>
 8006144:	e014      	b.n	8006170 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006146:	f7fd fb09 	bl	800375c <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800614c:	e00a      	b.n	8006164 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800614e:	f7fd fb05 	bl	800375c <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f241 3288 	movw	r2, #5000	; 0x1388
 800615c:	4293      	cmp	r3, r2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e0a6      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006164:	4b56      	ldr	r3, [pc, #344]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ee      	bne.n	800614e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006176:	4b52      	ldr	r3, [pc, #328]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	4a51      	ldr	r2, [pc, #324]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 800617c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006180:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8092 	beq.w	80062b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800618c:	4b4c      	ldr	r3, [pc, #304]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d05c      	beq.n	8006252 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d141      	bne.n	8006224 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b48      	ldr	r3, [pc, #288]	; (80062c4 <HAL_RCC_OscConfig+0x4dc>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a6:	f7fd fad9 	bl	800375c <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fd fad5 	bl	800375c <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e078      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c0:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f0      	bne.n	80061ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	019b      	lsls	r3, r3, #6
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	061b      	lsls	r3, r3, #24
 80061f0:	4933      	ldr	r1, [pc, #204]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f6:	4b33      	ldr	r3, [pc, #204]	; (80062c4 <HAL_RCC_OscConfig+0x4dc>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fc:	f7fd faae 	bl	800375c <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006204:	f7fd faaa 	bl	800375c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e04d      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006216:	4b2a      	ldr	r3, [pc, #168]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x41c>
 8006222:	e045      	b.n	80062b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <HAL_RCC_OscConfig+0x4dc>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622a:	f7fd fa97 	bl	800375c <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006232:	f7fd fa93 	bl	800375c <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e036      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006244:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCC_OscConfig+0x44a>
 8006250:	e02e      	b.n	80062b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e029      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800625e:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <HAL_RCC_OscConfig+0x4d8>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	429a      	cmp	r2, r3
 8006270:	d11c      	bne.n	80062ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d115      	bne.n	80062ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006286:	4013      	ands	r3, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800628c:	4293      	cmp	r3, r2
 800628e:	d10d      	bne.n	80062ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d106      	bne.n	80062ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40007000 	.word	0x40007000
 80062c0:	40023800 	.word	0x40023800
 80062c4:	42470060 	.word	0x42470060

080062c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0cc      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062dc:	4b68      	ldr	r3, [pc, #416]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d90c      	bls.n	8006304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ea:	4b65      	ldr	r3, [pc, #404]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	4b63      	ldr	r3, [pc, #396]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0b8      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800631c:	4b59      	ldr	r3, [pc, #356]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4a58      	ldr	r2, [pc, #352]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006334:	4b53      	ldr	r3, [pc, #332]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800633e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006340:	4b50      	ldr	r3, [pc, #320]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	494d      	ldr	r1, [pc, #308]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d044      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d107      	bne.n	8006376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	4b47      	ldr	r3, [pc, #284]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d119      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e07f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d003      	beq.n	8006386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006382:	2b03      	cmp	r3, #3
 8006384:	d107      	bne.n	8006396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006386:	4b3f      	ldr	r3, [pc, #252]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006396:	4b3b      	ldr	r3, [pc, #236]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e067      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063a6:	4b37      	ldr	r3, [pc, #220]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 0203 	bic.w	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4934      	ldr	r1, [pc, #208]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b8:	f7fd f9d0 	bl	800375c <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063be:	e00a      	b.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c0:	f7fd f9cc 	bl	800375c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e04f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d6:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 020c 	and.w	r2, r3, #12
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d1eb      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d20c      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f6:	4b22      	ldr	r3, [pc, #136]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b20      	ldr	r3, [pc, #128]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e032      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4916      	ldr	r1, [pc, #88]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	490e      	ldr	r1, [pc, #56]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800644e:	f000 f821 	bl	8006494 <HAL_RCC_GetSysClockFreq>
 8006452:	4602      	mov	r2, r0
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	490a      	ldr	r1, [pc, #40]	; (8006488 <HAL_RCC_ClockConfig+0x1c0>)
 8006460:	5ccb      	ldrb	r3, [r1, r3]
 8006462:	fa22 f303 	lsr.w	r3, r2, r3
 8006466:	4a09      	ldr	r2, [pc, #36]	; (800648c <HAL_RCC_ClockConfig+0x1c4>)
 8006468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCC_ClockConfig+0x1c8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fb fc34 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40023c00 	.word	0x40023c00
 8006484:	40023800 	.word	0x40023800
 8006488:	0800bf48 	.word	0x0800bf48
 800648c:	20000000 	.word	0x20000000
 8006490:	2000005c 	.word	0x2000005c

08006494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006494:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ac:	4b67      	ldr	r3, [pc, #412]	; (800664c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d00d      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0x40>
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	f200 80bd 	bhi.w	8006638 <HAL_RCC_GetSysClockFreq+0x1a4>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x34>
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d003      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0x3a>
 80064c6:	e0b7      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c8:	4b61      	ldr	r3, [pc, #388]	; (8006650 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064ca:	60bb      	str	r3, [r7, #8]
       break;
 80064cc:	e0b7      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ce:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80064d0:	60bb      	str	r3, [r7, #8]
      break;
 80064d2:	e0b4      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d4:	4b5d      	ldr	r3, [pc, #372]	; (800664c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064de:	4b5b      	ldr	r3, [pc, #364]	; (800664c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d04d      	beq.n	8006586 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ea:	4b58      	ldr	r3, [pc, #352]	; (800664c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064fa:	f04f 0100 	mov.w	r1, #0
 80064fe:	ea02 0800 	and.w	r8, r2, r0
 8006502:	ea03 0901 	and.w	r9, r3, r1
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	014b      	lsls	r3, r1, #5
 8006514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006518:	0142      	lsls	r2, r0, #5
 800651a:	4610      	mov	r0, r2
 800651c:	4619      	mov	r1, r3
 800651e:	ebb0 0008 	subs.w	r0, r0, r8
 8006522:	eb61 0109 	sbc.w	r1, r1, r9
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	018b      	lsls	r3, r1, #6
 8006530:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006534:	0182      	lsls	r2, r0, #6
 8006536:	1a12      	subs	r2, r2, r0
 8006538:	eb63 0301 	sbc.w	r3, r3, r1
 800653c:	f04f 0000 	mov.w	r0, #0
 8006540:	f04f 0100 	mov.w	r1, #0
 8006544:	00d9      	lsls	r1, r3, #3
 8006546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800654a:	00d0      	lsls	r0, r2, #3
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	eb12 0208 	adds.w	r2, r2, r8
 8006554:	eb43 0309 	adc.w	r3, r3, r9
 8006558:	f04f 0000 	mov.w	r0, #0
 800655c:	f04f 0100 	mov.w	r1, #0
 8006560:	0259      	lsls	r1, r3, #9
 8006562:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006566:	0250      	lsls	r0, r2, #9
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	461a      	mov	r2, r3
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	f7fa fb26 	bl	8000bc8 <__aeabi_uldivmod>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4613      	mov	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e04a      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	099b      	lsrs	r3, r3, #6
 800658c:	461a      	mov	r2, r3
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	ea02 0400 	and.w	r4, r2, r0
 800659e:	ea03 0501 	and.w	r5, r3, r1
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	014b      	lsls	r3, r1, #5
 80065b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065b4:	0142      	lsls	r2, r0, #5
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	1b00      	subs	r0, r0, r4
 80065bc:	eb61 0105 	sbc.w	r1, r1, r5
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	018b      	lsls	r3, r1, #6
 80065ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065ce:	0182      	lsls	r2, r0, #6
 80065d0:	1a12      	subs	r2, r2, r0
 80065d2:	eb63 0301 	sbc.w	r3, r3, r1
 80065d6:	f04f 0000 	mov.w	r0, #0
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	00d9      	lsls	r1, r3, #3
 80065e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065e4:	00d0      	lsls	r0, r2, #3
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	1912      	adds	r2, r2, r4
 80065ec:	eb45 0303 	adc.w	r3, r5, r3
 80065f0:	f04f 0000 	mov.w	r0, #0
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	0299      	lsls	r1, r3, #10
 80065fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065fe:	0290      	lsls	r0, r2, #10
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	461a      	mov	r2, r3
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	f7fa fada 	bl	8000bc8 <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4613      	mov	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800661c:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	0c1b      	lsrs	r3, r3, #16
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	3301      	adds	r3, #1
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	60bb      	str	r3, [r7, #8]
      break;
 8006636:	e002      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800663a:	60bb      	str	r3, [r7, #8]
      break;
 800663c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800663e:	68bb      	ldr	r3, [r7, #8]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800664a:	bf00      	nop
 800664c:	40023800 	.word	0x40023800
 8006650:	00f42400 	.word	0x00f42400
 8006654:	007a1200 	.word	0x007a1200

08006658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <HAL_RCC_GetHCLKFreq+0x14>)
 800665e:	681b      	ldr	r3, [r3, #0]
}
 8006660:	4618      	mov	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000000 	.word	0x20000000

08006670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006674:	f7ff fff0 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0a9b      	lsrs	r3, r3, #10
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	; (8006694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800bf58 	.word	0x0800bf58

08006698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800669c:	f7ff ffdc 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0b5b      	lsrs	r3, r3, #13
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4903      	ldr	r1, [pc, #12]	; (80066bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	0800bf58 	.word	0x0800bf58

080066c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	220f      	movs	r2, #15
 80066ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066d0:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0203 	and.w	r2, r3, #3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCC_GetClockConfig+0x5c>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006702:	4b07      	ldr	r3, [pc, #28]	; (8006720 <HAL_RCC_GetClockConfig+0x60>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 020f 	and.w	r2, r3, #15
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800
 8006720:	40023c00 	.word	0x40023c00

08006724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006754:	2b00      	cmp	r3, #0
 8006756:	d075      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006758:	4bad      	ldr	r3, [pc, #692]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800675e:	f7fc fffd 	bl	800375c <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006764:	e008      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006766:	f7fc fff9 	bl	800375c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e18b      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006778:	4ba6      	ldr	r3, [pc, #664]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f0      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	019a      	lsls	r2, r3, #6
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	071b      	lsls	r3, r3, #28
 800679c:	499d      	ldr	r1, [pc, #628]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01f      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067b0:	4b98      	ldr	r3, [pc, #608]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b6:	0f1b      	lsrs	r3, r3, #28
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	019a      	lsls	r2, r3, #6
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	431a      	orrs	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	071b      	lsls	r3, r3, #28
 80067d0:	4990      	ldr	r1, [pc, #576]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067d8:	4b8e      	ldr	r3, [pc, #568]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067de:	f023 021f 	bic.w	r2, r3, #31
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	498a      	ldr	r1, [pc, #552]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00d      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	019a      	lsls	r2, r3, #6
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	061b      	lsls	r3, r3, #24
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	071b      	lsls	r3, r3, #28
 8006810:	4980      	ldr	r1, [pc, #512]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006818:	4b7d      	ldr	r3, [pc, #500]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800681e:	f7fc ff9d 	bl	800375c <HAL_GetTick>
 8006822:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006824:	e008      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006826:	f7fc ff99 	bl	800375c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d901      	bls.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e12b      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006838:	4b76      	ldr	r3, [pc, #472]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f0      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006858:	2b00      	cmp	r3, #0
 800685a:	d079      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800685c:	4b6e      	ldr	r3, [pc, #440]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006862:	f7fc ff7b 	bl	800375c <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006868:	e008      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800686a:	f7fc ff77 	bl	800375c <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e109      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800687c:	4b65      	ldr	r3, [pc, #404]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006888:	d0ef      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d020      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006896:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689c:	0f1b      	lsrs	r3, r3, #28
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	019a      	lsls	r2, r3, #6
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	431a      	orrs	r2, r3
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	071b      	lsls	r3, r3, #28
 80068b6:	4957      	ldr	r1, [pc, #348]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068be:	4b55      	ldr	r3, [pc, #340]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	4950      	ldr	r1, [pc, #320]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01e      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068e4:	4b4b      	ldr	r3, [pc, #300]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	0e1b      	lsrs	r3, r3, #24
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	019a      	lsls	r2, r3, #6
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	061b      	lsls	r3, r3, #24
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	071b      	lsls	r3, r3, #28
 8006904:	4943      	ldr	r1, [pc, #268]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800690c:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800690e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	493e      	ldr	r1, [pc, #248]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006922:	4b3d      	ldr	r3, [pc, #244]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006928:	f7fc ff18 	bl	800375c <HAL_GetTick>
 800692c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006930:	f7fc ff14 	bl	800375c <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e0a6      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006942:	4b34      	ldr	r3, [pc, #208]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694e:	d1ef      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 808d 	beq.w	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	4b2c      	ldr	r3, [pc, #176]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	4a2b      	ldr	r2, [pc, #172]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6413      	str	r3, [r2, #64]	; 0x40
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800697a:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006984:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006986:	f7fc fee9 	bl	800375c <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800698c:	e008      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800698e:	f7fc fee5 	bl	800375c <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e077      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069a0:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d039      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d032      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069e0:	4a0c      	ldr	r2, [pc, #48]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11e      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069f2:	f7fc feb3 	bl	800375c <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f8:	e014      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fc feaf 	bl	800375c <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d90b      	bls.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e03f      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006a10:	42470068 	.word	0x42470068
 8006a14:	40023800 	.word	0x40023800
 8006a18:	42470070 	.word	0x42470070
 8006a1c:	40007000 	.word	0x40007000
 8006a20:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a24:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0e4      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3c:	d10d      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006a3e:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a52:	4911      	ldr	r1, [pc, #68]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	608b      	str	r3, [r1, #8]
 8006a58:	e005      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a64:	6093      	str	r3, [r2, #8]
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a72:	4909      	ldr	r1, [pc, #36]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006a8a:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a8c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	424711e0 	.word	0x424711e0

08006aa0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e025      	b.n	8006b00 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fa fb35 	bl	8001138 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3304      	adds	r3, #4
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	f002 f901 	bl	8008ce8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	f002 f96c 	bl	8008dce <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d101      	bne.n	8006b24 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e018      	b.n	8006b56 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 f9c9 	bl	8008ecc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d104      	bne.n	8006b4c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2205      	movs	r2, #5
 8006b46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006b4a:	e003      	b.n	8006b54 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d101      	bne.n	8006b78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
 8006b76:	e00e      	b.n	8006b96 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 f9dc 	bl	8008f44 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e056      	b.n	8006c5e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fa fff4 	bl	8001bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	ea42 0103 	orr.w	r1, r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	f003 0104 	and.w	r1, r3, #4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e01a      	b.n	8006cae <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fa ffd9 	bl	8001c48 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b088      	sub	sp, #32
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	603b      	str	r3, [r7, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_SPI_Transmit+0x22>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e11e      	b.n	8006f16 <HAL_SPI_Transmit+0x260>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce0:	f7fc fd3c 	bl	800375c <HAL_GetTick>
 8006ce4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d002      	beq.n	8006cfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cfa:	e103      	b.n	8006f04 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Transmit+0x52>
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d0c:	e0fa      	b.n	8006f04 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2203      	movs	r2, #3
 8006d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	88fa      	ldrh	r2, [r7, #6]
 8006d26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	88fa      	ldrh	r2, [r7, #6]
 8006d2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	d107      	bne.n	8006d66 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d007      	beq.n	8006d84 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d14b      	bne.n	8006e26 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_SPI_Transmit+0xe6>
 8006d96:	8afb      	ldrh	r3, [r7, #22]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d13e      	bne.n	8006e1a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	881a      	ldrh	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	1c9a      	adds	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dc0:	e02b      	b.n	8006e1a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d112      	bne.n	8006df6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006df4:	e011      	b.n	8006e1a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df6:	f7fc fcb1 	bl	800375c <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d803      	bhi.n	8006e0e <HAL_SPI_Transmit+0x158>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d102      	bne.n	8006e14 <HAL_SPI_Transmit+0x15e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e18:	e074      	b.n	8006f04 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ce      	bne.n	8006dc2 <HAL_SPI_Transmit+0x10c>
 8006e24:	e04c      	b.n	8006ec0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <HAL_SPI_Transmit+0x17e>
 8006e2e:	8afb      	ldrh	r3, [r7, #22]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d140      	bne.n	8006eb6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	7812      	ldrb	r2, [r2, #0]
 8006e40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e5a:	e02c      	b.n	8006eb6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d113      	bne.n	8006e92 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e90:	e011      	b.n	8006eb6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e92:	f7fc fc63 	bl	800375c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d803      	bhi.n	8006eaa <HAL_SPI_Transmit+0x1f4>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d102      	bne.n	8006eb0 <HAL_SPI_Transmit+0x1fa>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eb4:	e026      	b.n	8006f04 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1cd      	bne.n	8006e5c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fbb3 	bl	8007630 <SPI_EndRxTxTransaction>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e000      	b.n	8006f04 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b088      	sub	sp, #32
 8006f22:	af02      	add	r7, sp, #8
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f3a:	d112      	bne.n	8006f62 <HAL_SPI_Receive+0x44>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10e      	bne.n	8006f62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2204      	movs	r2, #4
 8006f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f8e9 	bl	8007130 <HAL_SPI_TransmitReceive>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	e0e2      	b.n	8007128 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_SPI_Receive+0x52>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e0db      	b.n	8007128 <HAL_SPI_Receive+0x20a>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f78:	f7fc fbf0 	bl	800375c <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d002      	beq.n	8006f90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f8e:	e0c2      	b.n	8007116 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_SPI_Receive+0x7e>
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fa0:	e0b9      	b.n	8007116 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe8:	d107      	bne.n	8006ffa <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ff8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d007      	beq.n	8007018 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007016:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d162      	bne.n	80070e6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007020:	e02e      	b.n	8007080 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d115      	bne.n	800705c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f103 020c 	add.w	r2, r3, #12
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	87da      	strh	r2, [r3, #62]	; 0x3e
 800705a:	e011      	b.n	8007080 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800705c:	f7fc fb7e 	bl	800375c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d803      	bhi.n	8007074 <HAL_SPI_Receive+0x156>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d102      	bne.n	800707a <HAL_SPI_Receive+0x15c>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800707e:	e04a      	b.n	8007116 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1cb      	bne.n	8007022 <HAL_SPI_Receive+0x104>
 800708a:	e031      	b.n	80070f0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d113      	bne.n	80070c2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	b292      	uxth	r2, r2
 80070a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070c0:	e011      	b.n	80070e6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c2:	f7fc fb4b 	bl	800375c <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d803      	bhi.n	80070da <HAL_SPI_Receive+0x1bc>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d102      	bne.n	80070e0 <HAL_SPI_Receive+0x1c2>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070e4:	e017      	b.n	8007116 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1cd      	bne.n	800708c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fa35 	bl	8007564 <SPI_EndRxTransaction>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2220      	movs	r2, #32
 8007104:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	75fb      	strb	r3, [r7, #23]
 8007112:	e000      	b.n	8007116 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800713e:	2301      	movs	r3, #1
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x26>
 8007152:	2302      	movs	r3, #2
 8007154:	e18a      	b.n	800746c <HAL_SPI_TransmitReceive+0x33c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800715e:	f7fc fafd 	bl	800375c <HAL_GetTick>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007174:	887b      	ldrh	r3, [r7, #2]
 8007176:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800717c:	2b01      	cmp	r3, #1
 800717e:	d00f      	beq.n	80071a0 <HAL_SPI_TransmitReceive+0x70>
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007186:	d107      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x68>
 8007190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007194:	2b04      	cmp	r3, #4
 8007196:	d003      	beq.n	80071a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800719e:	e15b      	b.n	8007458 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_SPI_TransmitReceive+0x82>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_TransmitReceive+0x82>
 80071ac:	887b      	ldrh	r3, [r7, #2]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071b8:	e14e      	b.n	8007458 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d003      	beq.n	80071ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2205      	movs	r2, #5
 80071ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	887a      	ldrh	r2, [r7, #2]
 80071de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	887a      	ldrh	r2, [r7, #2]
 80071f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	887a      	ldrh	r2, [r7, #2]
 80071f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d007      	beq.n	8007222 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800722a:	d178      	bne.n	800731e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_SPI_TransmitReceive+0x10a>
 8007234:	8b7b      	ldrh	r3, [r7, #26]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d166      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	881a      	ldrh	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	1c9a      	adds	r2, r3, #2
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800725e:	e053      	b.n	8007308 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	d11b      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x176>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d016      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0x176>
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d113      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d119      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x1b8>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	b292      	uxth	r2, r2
 80072ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	1c9a      	adds	r2, r3, #2
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072e4:	2301      	movs	r3, #1
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072e8:	f7fc fa38 	bl	800375c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d807      	bhi.n	8007308 <HAL_SPI_TransmitReceive+0x1d8>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d003      	beq.n	8007308 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007306:	e0a7      	b.n	8007458 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1a6      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x130>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1a1      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x130>
 800731c:	e07c      	b.n	8007418 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_SPI_TransmitReceive+0x1fc>
 8007326:	8b7b      	ldrh	r3, [r7, #26]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d16b      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007352:	e057      	b.n	8007404 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d11c      	bne.n	800739c <HAL_SPI_TransmitReceive+0x26c>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d017      	beq.n	800739c <HAL_SPI_TransmitReceive+0x26c>
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d114      	bne.n	800739c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	330c      	adds	r3, #12
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d119      	bne.n	80073de <HAL_SPI_TransmitReceive+0x2ae>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d014      	beq.n	80073de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073da:	2301      	movs	r3, #1
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073de:	f7fc f9bd 	bl	800375c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d803      	bhi.n	80073f6 <HAL_SPI_TransmitReceive+0x2c6>
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d102      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x2cc>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007402:	e029      	b.n	8007458 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1a2      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x224>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d19d      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f907 	bl	8007630 <SPI_EndRxTxTransaction>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007434:	e010      	b.n	8007458 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	e000      	b.n	8007458 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007468:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800746c:	4618      	mov	r0, r3
 800746e:	3730      	adds	r7, #48	; 0x30
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007482:	b2db      	uxtb	r3, r3
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074a0:	e04c      	b.n	800753c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d048      	beq.n	800753c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80074aa:	f7fc f957 	bl	800375c <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d902      	bls.n	80074c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13d      	bne.n	800753c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d8:	d111      	bne.n	80074fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e2:	d004      	beq.n	80074ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ec:	d107      	bne.n	80074fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007506:	d10f      	bne.n	8007528 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e00f      	b.n	800755c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4013      	ands	r3, r2
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	429a      	cmp	r2, r3
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	461a      	mov	r2, r3
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	429a      	cmp	r2, r3
 8007558:	d1a3      	bne.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af02      	add	r7, sp, #8
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007578:	d111      	bne.n	800759e <SPI_EndRxTransaction+0x3a>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007582:	d004      	beq.n	800758e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800758c:	d107      	bne.n	800759e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800759c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a6:	d12a      	bne.n	80075fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b0:	d012      	beq.n	80075d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	2180      	movs	r1, #128	; 0x80
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ff67 	bl	8007490 <SPI_WaitFlagStateUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d02d      	beq.n	8007624 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	f043 0220 	orr.w	r2, r3, #32
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e026      	b.n	8007626 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2200      	movs	r2, #0
 80075e0:	2101      	movs	r1, #1
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff ff54 	bl	8007490 <SPI_WaitFlagStateUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01a      	beq.n	8007624 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e013      	b.n	8007626 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2200      	movs	r2, #0
 8007606:	2101      	movs	r1, #1
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff ff41 	bl	8007490 <SPI_WaitFlagStateUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e000      	b.n	8007626 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800763c:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <SPI_EndRxTxTransaction+0x7c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <SPI_EndRxTxTransaction+0x80>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	0d5b      	lsrs	r3, r3, #21
 8007648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800764c:	fb02 f303 	mul.w	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765a:	d112      	bne.n	8007682 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	2180      	movs	r1, #128	; 0x80
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7ff ff12 	bl	8007490 <SPI_WaitFlagStateUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d016      	beq.n	80076a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e00f      	b.n	80076a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	3b01      	subs	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007698:	2b80      	cmp	r3, #128	; 0x80
 800769a:	d0f2      	beq.n	8007682 <SPI_EndRxTxTransaction+0x52>
 800769c:	e000      	b.n	80076a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800769e:	bf00      	nop
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000000 	.word	0x20000000
 80076b0:	165e9f81 	.word	0x165e9f81

080076b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e01d      	b.n	8007702 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fa fd64 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f000 fa22 	bl	8007b3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b06      	cmp	r3, #6
 8007732:	d007      	beq.n	8007744 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d122      	bne.n	80077ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d11b      	bne.n	80077ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f06f 0202 	mvn.w	r2, #2
 800777e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f9b2 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 800779a:	e005      	b.n	80077a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f9a4 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9b5 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d122      	bne.n	8007802 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d11b      	bne.n	8007802 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f06f 0204 	mvn.w	r2, #4
 80077d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f988 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 80077ee:	e005      	b.n	80077fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f97a 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f98b 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b08      	cmp	r3, #8
 800780e:	d122      	bne.n	8007856 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b08      	cmp	r3, #8
 800781c:	d11b      	bne.n	8007856 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f06f 0208 	mvn.w	r2, #8
 8007826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2204      	movs	r2, #4
 800782c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f95e 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 8007842:	e005      	b.n	8007850 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f950 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f961 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b10      	cmp	r3, #16
 8007862:	d122      	bne.n	80078aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d11b      	bne.n	80078aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f06f 0210 	mvn.w	r2, #16
 800787a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2208      	movs	r2, #8
 8007880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f934 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 8007896:	e005      	b.n	80078a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f926 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f937 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10e      	bne.n	80078d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d107      	bne.n	80078d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f06f 0201 	mvn.w	r2, #1
 80078ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fa f921 	bl	8001b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d10e      	bne.n	8007902 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	d107      	bne.n	8007902 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fadd 	bl	8007ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d10e      	bne.n	800792e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d107      	bne.n	800792e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8fc 	bl	8007b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b20      	cmp	r3, #32
 800793a:	d10e      	bne.n	800795a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b20      	cmp	r3, #32
 8007948:	d107      	bne.n	800795a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0220 	mvn.w	r2, #32
 8007952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 faa7 	bl	8007ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_TIM_ConfigClockSource+0x18>
 8007976:	2302      	movs	r3, #2
 8007978:	e0b3      	b.n	8007ae2 <HAL_TIM_ConfigClockSource+0x180>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007998:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079a0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b2:	d03e      	beq.n	8007a32 <HAL_TIM_ConfigClockSource+0xd0>
 80079b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b8:	f200 8087 	bhi.w	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	f000 8085 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x16c>
 80079c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c8:	d87f      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079ca:	2b70      	cmp	r3, #112	; 0x70
 80079cc:	d01a      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0xa2>
 80079ce:	2b70      	cmp	r3, #112	; 0x70
 80079d0:	d87b      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079d2:	2b60      	cmp	r3, #96	; 0x60
 80079d4:	d050      	beq.n	8007a78 <HAL_TIM_ConfigClockSource+0x116>
 80079d6:	2b60      	cmp	r3, #96	; 0x60
 80079d8:	d877      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079da:	2b50      	cmp	r3, #80	; 0x50
 80079dc:	d03c      	beq.n	8007a58 <HAL_TIM_ConfigClockSource+0xf6>
 80079de:	2b50      	cmp	r3, #80	; 0x50
 80079e0:	d873      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d058      	beq.n	8007a98 <HAL_TIM_ConfigClockSource+0x136>
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d86f      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079ea:	2b30      	cmp	r3, #48	; 0x30
 80079ec:	d064      	beq.n	8007ab8 <HAL_TIM_ConfigClockSource+0x156>
 80079ee:	2b30      	cmp	r3, #48	; 0x30
 80079f0:	d86b      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	d060      	beq.n	8007ab8 <HAL_TIM_ConfigClockSource+0x156>
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d867      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d05c      	beq.n	8007ab8 <HAL_TIM_ConfigClockSource+0x156>
 80079fe:	2b10      	cmp	r3, #16
 8007a00:	d05a      	beq.n	8007ab8 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a02:	e062      	b.n	8007aca <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	6899      	ldr	r1, [r3, #8]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f000 f9ac 	bl	8007d70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	609a      	str	r2, [r3, #8]
      break;
 8007a30:	e04e      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6899      	ldr	r1, [r3, #8]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f000 f995 	bl	8007d70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a54:	609a      	str	r2, [r3, #8]
      break;
 8007a56:	e03b      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	6859      	ldr	r1, [r3, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	461a      	mov	r2, r3
 8007a66:	f000 f909 	bl	8007c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2150      	movs	r1, #80	; 0x50
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f962 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 8007a76:	e02b      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6859      	ldr	r1, [r3, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	461a      	mov	r2, r3
 8007a86:	f000 f928 	bl	8007cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2160      	movs	r1, #96	; 0x60
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f952 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 8007a96:	e01b      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	6859      	ldr	r1, [r3, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f000 f8e9 	bl	8007c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2140      	movs	r1, #64	; 0x40
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 f942 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 8007ab6:	e00b      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f000 f939 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e002      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a40      	ldr	r2, [pc, #256]	; (8007c50 <TIM_Base_SetConfig+0x114>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d013      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d00f      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a3d      	ldr	r2, [pc, #244]	; (8007c54 <TIM_Base_SetConfig+0x118>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a3c      	ldr	r2, [pc, #240]	; (8007c58 <TIM_Base_SetConfig+0x11c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d007      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a3b      	ldr	r2, [pc, #236]	; (8007c5c <TIM_Base_SetConfig+0x120>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_Base_SetConfig+0x40>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a3a      	ldr	r2, [pc, #232]	; (8007c60 <TIM_Base_SetConfig+0x124>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d108      	bne.n	8007b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a2f      	ldr	r2, [pc, #188]	; (8007c50 <TIM_Base_SetConfig+0x114>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d02b      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9c:	d027      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2c      	ldr	r2, [pc, #176]	; (8007c54 <TIM_Base_SetConfig+0x118>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d023      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a2b      	ldr	r2, [pc, #172]	; (8007c58 <TIM_Base_SetConfig+0x11c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d01f      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2a      	ldr	r2, [pc, #168]	; (8007c5c <TIM_Base_SetConfig+0x120>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d01b      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a29      	ldr	r2, [pc, #164]	; (8007c60 <TIM_Base_SetConfig+0x124>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d017      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <TIM_Base_SetConfig+0x128>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <TIM_Base_SetConfig+0x12c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00f      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <TIM_Base_SetConfig+0x130>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00b      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <TIM_Base_SetConfig+0x134>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <TIM_Base_SetConfig+0x138>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <TIM_Base_SetConfig+0x13c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d108      	bne.n	8007c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a0a      	ldr	r2, [pc, #40]	; (8007c50 <TIM_Base_SetConfig+0x114>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_Base_SetConfig+0xf8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a0c      	ldr	r2, [pc, #48]	; (8007c60 <TIM_Base_SetConfig+0x124>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d103      	bne.n	8007c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	615a      	str	r2, [r3, #20]
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40010400 	.word	0x40010400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40014400 	.word	0x40014400
 8007c6c:	40014800 	.word	0x40014800
 8007c70:	40001800 	.word	0x40001800
 8007c74:	40001c00 	.word	0x40001c00
 8007c78:	40002000 	.word	0x40002000

08007c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f023 0201 	bic.w	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f023 030a 	bic.w	r3, r3, #10
 8007cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b087      	sub	sp, #28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	f023 0210 	bic.w	r2, r3, #16
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	031b      	lsls	r3, r3, #12
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f043 0307 	orr.w	r3, r3, #7
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	609a      	str	r2, [r3, #8]
}
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	021a      	lsls	r2, r3, #8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	609a      	str	r2, [r3, #8]
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e05a      	b.n	8007e7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a21      	ldr	r2, [pc, #132]	; (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d022      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e14:	d01d      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1d      	ldr	r2, [pc, #116]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d018      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1b      	ldr	r2, [pc, #108]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00e      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a18      	ldr	r2, [pc, #96]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d009      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a17      	ldr	r2, [pc, #92]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d10c      	bne.n	8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40000400 	.word	0x40000400
 8007e94:	40000800 	.word	0x40000800
 8007e98:	40000c00 	.word	0x40000c00
 8007e9c:	40010400 	.word	0x40010400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40001800 	.word	0x40001800

08007ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e03f      	b.n	8007f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fa f9dc 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2224      	movs	r2, #36	; 0x24
 8007f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fb4b 	bl	80085b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b088      	sub	sp, #32
 8007f6e:	af02      	add	r7, sp, #8
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	f040 8083 	bne.w	8008092 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_UART_Transmit+0x2e>
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e07b      	b.n	8008094 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_UART_Transmit+0x40>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e074      	b.n	8008094 <HAL_UART_Transmit+0x12a>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2221      	movs	r2, #33	; 0x21
 8007fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007fc0:	f7fb fbcc 	bl	800375c <HAL_GetTick>
 8007fc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007fda:	e042      	b.n	8008062 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	d122      	bne.n	800803a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2180      	movs	r1, #128	; 0x80
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f96a 	bl	80082d8 <UART_WaitOnFlagUntilTimeout>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e042      	b.n	8008094 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008020:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	3302      	adds	r3, #2
 800802e:	60bb      	str	r3, [r7, #8]
 8008030:	e017      	b.n	8008062 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3301      	adds	r3, #1
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	e013      	b.n	8008062 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f947 	bl	80082d8 <UART_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e01f      	b.n	8008094 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	60ba      	str	r2, [r7, #8]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1b7      	bne.n	8007fdc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2200      	movs	r2, #0
 8008074:	2140      	movs	r1, #64	; 0x40
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f92e 	bl	80082d8 <UART_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e006      	b.n	8008094 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2220      	movs	r2, #32
 800808a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e000      	b.n	8008094 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <HAL_UART_IRQHandler+0x52>
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9e0 	bl	80084ac <UART_Receive_IT>
      return;
 80080ec:	e0d0      	b.n	8008290 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 80b0 	beq.w	8008256 <HAL_UART_IRQHandler+0x1ba>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <HAL_UART_IRQHandler+0x70>
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80a5 	beq.w	8008256 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <HAL_UART_IRQHandler+0x90>
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008124:	f043 0201 	orr.w	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <HAL_UART_IRQHandler+0xb0>
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	f043 0202 	orr.w	r2, r3, #2
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_UART_IRQHandler+0xd0>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008164:	f043 0204 	orr.w	r2, r3, #4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00f      	beq.n	8008196 <HAL_UART_IRQHandler+0xfa>
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d104      	bne.n	800818a <HAL_UART_IRQHandler+0xee>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818e:	f043 0208 	orr.w	r2, r3, #8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d077      	beq.n	800828e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <HAL_UART_IRQHandler+0x11c>
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f97a 	bl	80084ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <HAL_UART_IRQHandler+0x144>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d031      	beq.n	8008244 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f8c3 	bl	800836c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d123      	bne.n	800823c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695a      	ldr	r2, [r3, #20]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008202:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	4a21      	ldr	r2, [pc, #132]	; (8008298 <HAL_UART_IRQHandler+0x1fc>)
 8008212:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008218:	4618      	mov	r0, r3
 800821a:	f7fb fcbd 	bl	8003b98 <HAL_DMA_Abort_IT>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d016      	beq.n	8008252 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800822e:	4610      	mov	r0, r2
 8008230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008232:	e00e      	b.n	8008252 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f845 	bl	80082c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823a:	e00a      	b.n	8008252 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f841 	bl	80082c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008242:	e006      	b.n	8008252 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f83d 	bl	80082c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008250:	e01d      	b.n	800828e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008252:	bf00      	nop
    return;
 8008254:	e01b      	b.n	800828e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <HAL_UART_IRQHandler+0x1d6>
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f8b0 	bl	80083d0 <UART_Transmit_IT>
    return;
 8008270:	e00e      	b.n	8008290 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_UART_IRQHandler+0x1f4>
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f8f8 	bl	800847c <UART_EndTransmit_IT>
    return;
 800828c:	e000      	b.n	8008290 <HAL_UART_IRQHandler+0x1f4>
    return;
 800828e:	bf00      	nop
  }
}
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	080083a9 	.word	0x080083a9

0800829c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e8:	e02c      	b.n	8008344 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d028      	beq.n	8008344 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <UART_WaitOnFlagUntilTimeout+0x30>
 80082f8:	f7fb fa30 	bl	800375c <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	429a      	cmp	r2, r3
 8008306:	d21d      	bcs.n	8008344 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008316:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	695a      	ldr	r2, [r3, #20]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0201 	bic.w	r2, r2, #1
 8008326:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e00f      	b.n	8008364 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4013      	ands	r3, r2
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	429a      	cmp	r2, r3
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	461a      	mov	r2, r3
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	429a      	cmp	r2, r3
 8008360:	d0c3      	beq.n	80082ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008382:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695a      	ldr	r2, [r3, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0201 	bic.w	r2, r2, #1
 8008392:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff ff7e 	bl	80082c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b21      	cmp	r3, #33	; 0x21
 80083e2:	d144      	bne.n	800846e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ec:	d11a      	bne.n	8008424 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008402:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d105      	bne.n	8008418 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	1c9a      	adds	r2, r3, #2
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]
 8008416:	e00e      	b.n	8008436 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	621a      	str	r2, [r3, #32]
 8008422:	e008      	b.n	8008436 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	1c59      	adds	r1, r3, #1
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6211      	str	r1, [r2, #32]
 800842e:	781a      	ldrb	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800843a:	b29b      	uxth	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	b29b      	uxth	r3, r3
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4619      	mov	r1, r3
 8008444:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10f      	bne.n	800846a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008458:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008468:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e000      	b.n	8008470 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800846e:	2302      	movs	r3, #2
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008492:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fefd 	bl	800829c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b22      	cmp	r3, #34	; 0x22
 80084be:	d171      	bne.n	80085a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c8:	d123      	bne.n	8008512 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10e      	bne.n	80084f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	1c9a      	adds	r2, r3, #2
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	629a      	str	r2, [r3, #40]	; 0x28
 80084f4:	e029      	b.n	800854a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	629a      	str	r2, [r3, #40]	; 0x28
 8008510:	e01b      	b.n	800854a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6858      	ldr	r0, [r3, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	1c59      	adds	r1, r3, #1
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6291      	str	r1, [r2, #40]	; 0x28
 800852a:	b2c2      	uxtb	r2, r0
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e00c      	b.n	800854a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b2da      	uxtb	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	1c58      	adds	r0, r3, #1
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	6288      	str	r0, [r1, #40]	; 0x28
 8008542:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4619      	mov	r1, r3
 8008558:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800855a:	2b00      	cmp	r3, #0
 800855c:	d120      	bne.n	80085a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0220 	bic.w	r2, r2, #32
 800856c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800857c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	695a      	ldr	r2, [r3, #20]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0201 	bic.w	r2, r2, #1
 800858c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fe8a 	bl	80082b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	e002      	b.n	80085a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	e000      	b.n	80085a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	b0bd      	sub	sp, #244	; 0xf4
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085cc:	68d9      	ldr	r1, [r3, #12]
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	ea40 0301 	orr.w	r3, r0, r1
 80085d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80085fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008608:	f021 010c 	bic.w	r1, r1, #12
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008616:	430b      	orrs	r3, r1
 8008618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800861a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862a:	6999      	ldr	r1, [r3, #24]
 800862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	ea40 0301 	orr.w	r3, r0, r1
 8008636:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008642:	f040 81a5 	bne.w	8008990 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	4bcd      	ldr	r3, [pc, #820]	; (8008984 <UART_SetConfig+0x3d4>)
 800864e:	429a      	cmp	r2, r3
 8008650:	d006      	beq.n	8008660 <UART_SetConfig+0xb0>
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	4bcb      	ldr	r3, [pc, #812]	; (8008988 <UART_SetConfig+0x3d8>)
 800865a:	429a      	cmp	r2, r3
 800865c:	f040 80cb 	bne.w	80087f6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008660:	f7fe f81a 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 8008664:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800866c:	461c      	mov	r4, r3
 800866e:	f04f 0500 	mov.w	r5, #0
 8008672:	4622      	mov	r2, r4
 8008674:	462b      	mov	r3, r5
 8008676:	1891      	adds	r1, r2, r2
 8008678:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800867c:	415b      	adcs	r3, r3
 800867e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008682:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008686:	1912      	adds	r2, r2, r4
 8008688:	eb45 0303 	adc.w	r3, r5, r3
 800868c:	f04f 0000 	mov.w	r0, #0
 8008690:	f04f 0100 	mov.w	r1, #0
 8008694:	00d9      	lsls	r1, r3, #3
 8008696:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800869a:	00d0      	lsls	r0, r2, #3
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	1911      	adds	r1, r2, r4
 80086a2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80086a6:	416b      	adcs	r3, r5
 80086a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	461a      	mov	r2, r3
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	1891      	adds	r1, r2, r2
 80086ba:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80086be:	415b      	adcs	r3, r3
 80086c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80086c8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80086cc:	f7f8 fa7c 	bl	8000bc8 <__aeabi_uldivmod>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4bad      	ldr	r3, [pc, #692]	; (800898c <UART_SetConfig+0x3dc>)
 80086d6:	fba3 2302 	umull	r2, r3, r3, r2
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	011e      	lsls	r6, r3, #4
 80086de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086e2:	461c      	mov	r4, r3
 80086e4:	f04f 0500 	mov.w	r5, #0
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	1891      	adds	r1, r2, r2
 80086ee:	67b9      	str	r1, [r7, #120]	; 0x78
 80086f0:	415b      	adcs	r3, r3
 80086f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80086f8:	1912      	adds	r2, r2, r4
 80086fa:	eb45 0303 	adc.w	r3, r5, r3
 80086fe:	f04f 0000 	mov.w	r0, #0
 8008702:	f04f 0100 	mov.w	r1, #0
 8008706:	00d9      	lsls	r1, r3, #3
 8008708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800870c:	00d0      	lsls	r0, r2, #3
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	1911      	adds	r1, r2, r4
 8008714:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008718:	416b      	adcs	r3, r5
 800871a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800871e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	461a      	mov	r2, r3
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	1891      	adds	r1, r2, r2
 800872c:	6739      	str	r1, [r7, #112]	; 0x70
 800872e:	415b      	adcs	r3, r3
 8008730:	677b      	str	r3, [r7, #116]	; 0x74
 8008732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008736:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800873a:	f7f8 fa45 	bl	8000bc8 <__aeabi_uldivmod>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4b92      	ldr	r3, [pc, #584]	; (800898c <UART_SetConfig+0x3dc>)
 8008744:	fba3 1302 	umull	r1, r3, r3, r2
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	2164      	movs	r1, #100	; 0x64
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	3332      	adds	r3, #50	; 0x32
 8008756:	4a8d      	ldr	r2, [pc, #564]	; (800898c <UART_SetConfig+0x3dc>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	095b      	lsrs	r3, r3, #5
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008764:	441e      	add	r6, r3
 8008766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800876a:	4618      	mov	r0, r3
 800876c:	f04f 0100 	mov.w	r1, #0
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	1894      	adds	r4, r2, r2
 8008776:	66bc      	str	r4, [r7, #104]	; 0x68
 8008778:	415b      	adcs	r3, r3
 800877a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800877c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008780:	1812      	adds	r2, r2, r0
 8008782:	eb41 0303 	adc.w	r3, r1, r3
 8008786:	f04f 0400 	mov.w	r4, #0
 800878a:	f04f 0500 	mov.w	r5, #0
 800878e:	00dd      	lsls	r5, r3, #3
 8008790:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008794:	00d4      	lsls	r4, r2, #3
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	1814      	adds	r4, r2, r0
 800879c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80087a0:	414b      	adcs	r3, r1
 80087a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	461a      	mov	r2, r3
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	1891      	adds	r1, r2, r2
 80087b4:	6639      	str	r1, [r7, #96]	; 0x60
 80087b6:	415b      	adcs	r3, r3
 80087b8:	667b      	str	r3, [r7, #100]	; 0x64
 80087ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80087be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087c2:	f7f8 fa01 	bl	8000bc8 <__aeabi_uldivmod>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4b70      	ldr	r3, [pc, #448]	; (800898c <UART_SetConfig+0x3dc>)
 80087cc:	fba3 1302 	umull	r1, r3, r3, r2
 80087d0:	095b      	lsrs	r3, r3, #5
 80087d2:	2164      	movs	r1, #100	; 0x64
 80087d4:	fb01 f303 	mul.w	r3, r1, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	3332      	adds	r3, #50	; 0x32
 80087de:	4a6b      	ldr	r2, [pc, #428]	; (800898c <UART_SetConfig+0x3dc>)
 80087e0:	fba2 2303 	umull	r2, r3, r2, r3
 80087e4:	095b      	lsrs	r3, r3, #5
 80087e6:	f003 0207 	and.w	r2, r3, #7
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4432      	add	r2, r6
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	e26d      	b.n	8008cd2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087f6:	f7fd ff3b 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 80087fa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008802:	461c      	mov	r4, r3
 8008804:	f04f 0500 	mov.w	r5, #0
 8008808:	4622      	mov	r2, r4
 800880a:	462b      	mov	r3, r5
 800880c:	1891      	adds	r1, r2, r2
 800880e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008810:	415b      	adcs	r3, r3
 8008812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008814:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008818:	1912      	adds	r2, r2, r4
 800881a:	eb45 0303 	adc.w	r3, r5, r3
 800881e:	f04f 0000 	mov.w	r0, #0
 8008822:	f04f 0100 	mov.w	r1, #0
 8008826:	00d9      	lsls	r1, r3, #3
 8008828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800882c:	00d0      	lsls	r0, r2, #3
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	1911      	adds	r1, r2, r4
 8008834:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008838:	416b      	adcs	r3, r5
 800883a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	461a      	mov	r2, r3
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	1891      	adds	r1, r2, r2
 800884c:	6539      	str	r1, [r7, #80]	; 0x50
 800884e:	415b      	adcs	r3, r3
 8008850:	657b      	str	r3, [r7, #84]	; 0x54
 8008852:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008856:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800885a:	f7f8 f9b5 	bl	8000bc8 <__aeabi_uldivmod>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4b4a      	ldr	r3, [pc, #296]	; (800898c <UART_SetConfig+0x3dc>)
 8008864:	fba3 2302 	umull	r2, r3, r3, r2
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	011e      	lsls	r6, r3, #4
 800886c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008870:	461c      	mov	r4, r3
 8008872:	f04f 0500 	mov.w	r5, #0
 8008876:	4622      	mov	r2, r4
 8008878:	462b      	mov	r3, r5
 800887a:	1891      	adds	r1, r2, r2
 800887c:	64b9      	str	r1, [r7, #72]	; 0x48
 800887e:	415b      	adcs	r3, r3
 8008880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008882:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008886:	1912      	adds	r2, r2, r4
 8008888:	eb45 0303 	adc.w	r3, r5, r3
 800888c:	f04f 0000 	mov.w	r0, #0
 8008890:	f04f 0100 	mov.w	r1, #0
 8008894:	00d9      	lsls	r1, r3, #3
 8008896:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800889a:	00d0      	lsls	r0, r2, #3
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	1911      	adds	r1, r2, r4
 80088a2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80088a6:	416b      	adcs	r3, r5
 80088a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80088ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	1891      	adds	r1, r2, r2
 80088ba:	6439      	str	r1, [r7, #64]	; 0x40
 80088bc:	415b      	adcs	r3, r3
 80088be:	647b      	str	r3, [r7, #68]	; 0x44
 80088c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80088c8:	f7f8 f97e 	bl	8000bc8 <__aeabi_uldivmod>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4b2e      	ldr	r3, [pc, #184]	; (800898c <UART_SetConfig+0x3dc>)
 80088d2:	fba3 1302 	umull	r1, r3, r3, r2
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	2164      	movs	r1, #100	; 0x64
 80088da:	fb01 f303 	mul.w	r3, r1, r3
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	3332      	adds	r3, #50	; 0x32
 80088e4:	4a29      	ldr	r2, [pc, #164]	; (800898c <UART_SetConfig+0x3dc>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088f2:	441e      	add	r6, r3
 80088f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088f8:	4618      	mov	r0, r3
 80088fa:	f04f 0100 	mov.w	r1, #0
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	1894      	adds	r4, r2, r2
 8008904:	63bc      	str	r4, [r7, #56]	; 0x38
 8008906:	415b      	adcs	r3, r3
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800890a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800890e:	1812      	adds	r2, r2, r0
 8008910:	eb41 0303 	adc.w	r3, r1, r3
 8008914:	f04f 0400 	mov.w	r4, #0
 8008918:	f04f 0500 	mov.w	r5, #0
 800891c:	00dd      	lsls	r5, r3, #3
 800891e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008922:	00d4      	lsls	r4, r2, #3
 8008924:	4622      	mov	r2, r4
 8008926:	462b      	mov	r3, r5
 8008928:	1814      	adds	r4, r2, r0
 800892a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800892e:	414b      	adcs	r3, r1
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	461a      	mov	r2, r3
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	1891      	adds	r1, r2, r2
 8008942:	6339      	str	r1, [r7, #48]	; 0x30
 8008944:	415b      	adcs	r3, r3
 8008946:	637b      	str	r3, [r7, #52]	; 0x34
 8008948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800894c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008950:	f7f8 f93a 	bl	8000bc8 <__aeabi_uldivmod>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4b0c      	ldr	r3, [pc, #48]	; (800898c <UART_SetConfig+0x3dc>)
 800895a:	fba3 1302 	umull	r1, r3, r3, r2
 800895e:	095b      	lsrs	r3, r3, #5
 8008960:	2164      	movs	r1, #100	; 0x64
 8008962:	fb01 f303 	mul.w	r3, r1, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	3332      	adds	r3, #50	; 0x32
 800896c:	4a07      	ldr	r2, [pc, #28]	; (800898c <UART_SetConfig+0x3dc>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	f003 0207 	and.w	r2, r3, #7
 8008978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4432      	add	r2, r6
 8008980:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008982:	e1a6      	b.n	8008cd2 <UART_SetConfig+0x722>
 8008984:	40011000 	.word	0x40011000
 8008988:	40011400 	.word	0x40011400
 800898c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	4bd1      	ldr	r3, [pc, #836]	; (8008cdc <UART_SetConfig+0x72c>)
 8008998:	429a      	cmp	r2, r3
 800899a:	d006      	beq.n	80089aa <UART_SetConfig+0x3fa>
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4bcf      	ldr	r3, [pc, #828]	; (8008ce0 <UART_SetConfig+0x730>)
 80089a4:	429a      	cmp	r2, r3
 80089a6:	f040 80ca 	bne.w	8008b3e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80089aa:	f7fd fe75 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 80089ae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089b6:	461c      	mov	r4, r3
 80089b8:	f04f 0500 	mov.w	r5, #0
 80089bc:	4622      	mov	r2, r4
 80089be:	462b      	mov	r3, r5
 80089c0:	1891      	adds	r1, r2, r2
 80089c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80089c4:	415b      	adcs	r3, r3
 80089c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089cc:	1912      	adds	r2, r2, r4
 80089ce:	eb45 0303 	adc.w	r3, r5, r3
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f04f 0100 	mov.w	r1, #0
 80089da:	00d9      	lsls	r1, r3, #3
 80089dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089e0:	00d0      	lsls	r0, r2, #3
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	eb12 0a04 	adds.w	sl, r2, r4
 80089ea:	eb43 0b05 	adc.w	fp, r3, r5
 80089ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f04f 0100 	mov.w	r1, #0
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	f04f 0300 	mov.w	r3, #0
 8008a02:	008b      	lsls	r3, r1, #2
 8008a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a08:	0082      	lsls	r2, r0, #2
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	f7f8 f8db 	bl	8000bc8 <__aeabi_uldivmod>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4bb3      	ldr	r3, [pc, #716]	; (8008ce4 <UART_SetConfig+0x734>)
 8008a18:	fba3 2302 	umull	r2, r3, r3, r2
 8008a1c:	095b      	lsrs	r3, r3, #5
 8008a1e:	011e      	lsls	r6, r3, #4
 8008a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a24:	4618      	mov	r0, r3
 8008a26:	f04f 0100 	mov.w	r1, #0
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	1894      	adds	r4, r2, r2
 8008a30:	623c      	str	r4, [r7, #32]
 8008a32:	415b      	adcs	r3, r3
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
 8008a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a3a:	1812      	adds	r2, r2, r0
 8008a3c:	eb41 0303 	adc.w	r3, r1, r3
 8008a40:	f04f 0400 	mov.w	r4, #0
 8008a44:	f04f 0500 	mov.w	r5, #0
 8008a48:	00dd      	lsls	r5, r3, #3
 8008a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a4e:	00d4      	lsls	r4, r2, #3
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	1814      	adds	r4, r2, r0
 8008a56:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008a5a:	414b      	adcs	r3, r1
 8008a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f04f 0100 	mov.w	r1, #0
 8008a6c:	f04f 0200 	mov.w	r2, #0
 8008a70:	f04f 0300 	mov.w	r3, #0
 8008a74:	008b      	lsls	r3, r1, #2
 8008a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a7a:	0082      	lsls	r2, r0, #2
 8008a7c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008a80:	f7f8 f8a2 	bl	8000bc8 <__aeabi_uldivmod>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4b96      	ldr	r3, [pc, #600]	; (8008ce4 <UART_SetConfig+0x734>)
 8008a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	2164      	movs	r1, #100	; 0x64
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	3332      	adds	r3, #50	; 0x32
 8008a9c:	4a91      	ldr	r2, [pc, #580]	; (8008ce4 <UART_SetConfig+0x734>)
 8008a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa2:	095b      	lsrs	r3, r3, #5
 8008aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aa8:	441e      	add	r6, r3
 8008aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f04f 0100 	mov.w	r1, #0
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	1894      	adds	r4, r2, r2
 8008aba:	61bc      	str	r4, [r7, #24]
 8008abc:	415b      	adcs	r3, r3
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ac4:	1812      	adds	r2, r2, r0
 8008ac6:	eb41 0303 	adc.w	r3, r1, r3
 8008aca:	f04f 0400 	mov.w	r4, #0
 8008ace:	f04f 0500 	mov.w	r5, #0
 8008ad2:	00dd      	lsls	r5, r3, #3
 8008ad4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ad8:	00d4      	lsls	r4, r2, #3
 8008ada:	4622      	mov	r2, r4
 8008adc:	462b      	mov	r3, r5
 8008ade:	1814      	adds	r4, r2, r0
 8008ae0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008ae4:	414b      	adcs	r3, r1
 8008ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f04f 0100 	mov.w	r1, #0
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	008b      	lsls	r3, r1, #2
 8008b00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b04:	0082      	lsls	r2, r0, #2
 8008b06:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008b0a:	f7f8 f85d 	bl	8000bc8 <__aeabi_uldivmod>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4b74      	ldr	r3, [pc, #464]	; (8008ce4 <UART_SetConfig+0x734>)
 8008b14:	fba3 1302 	umull	r1, r3, r3, r2
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	2164      	movs	r1, #100	; 0x64
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	3332      	adds	r3, #50	; 0x32
 8008b26:	4a6f      	ldr	r2, [pc, #444]	; (8008ce4 <UART_SetConfig+0x734>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	f003 020f 	and.w	r2, r3, #15
 8008b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4432      	add	r2, r6
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	e0c9      	b.n	8008cd2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b3e:	f7fd fd97 	bl	8006670 <HAL_RCC_GetPCLK1Freq>
 8008b42:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b4a:	461c      	mov	r4, r3
 8008b4c:	f04f 0500 	mov.w	r5, #0
 8008b50:	4622      	mov	r2, r4
 8008b52:	462b      	mov	r3, r5
 8008b54:	1891      	adds	r1, r2, r2
 8008b56:	6139      	str	r1, [r7, #16]
 8008b58:	415b      	adcs	r3, r3
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b60:	1912      	adds	r2, r2, r4
 8008b62:	eb45 0303 	adc.w	r3, r5, r3
 8008b66:	f04f 0000 	mov.w	r0, #0
 8008b6a:	f04f 0100 	mov.w	r1, #0
 8008b6e:	00d9      	lsls	r1, r3, #3
 8008b70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b74:	00d0      	lsls	r0, r2, #3
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	eb12 0804 	adds.w	r8, r2, r4
 8008b7e:	eb43 0905 	adc.w	r9, r3, r5
 8008b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f04f 0100 	mov.w	r1, #0
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	008b      	lsls	r3, r1, #2
 8008b98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b9c:	0082      	lsls	r2, r0, #2
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	f7f8 f811 	bl	8000bc8 <__aeabi_uldivmod>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4b4e      	ldr	r3, [pc, #312]	; (8008ce4 <UART_SetConfig+0x734>)
 8008bac:	fba3 2302 	umull	r2, r3, r3, r2
 8008bb0:	095b      	lsrs	r3, r3, #5
 8008bb2:	011e      	lsls	r6, r3, #4
 8008bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f04f 0100 	mov.w	r1, #0
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	1894      	adds	r4, r2, r2
 8008bc4:	60bc      	str	r4, [r7, #8]
 8008bc6:	415b      	adcs	r3, r3
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bce:	1812      	adds	r2, r2, r0
 8008bd0:	eb41 0303 	adc.w	r3, r1, r3
 8008bd4:	f04f 0400 	mov.w	r4, #0
 8008bd8:	f04f 0500 	mov.w	r5, #0
 8008bdc:	00dd      	lsls	r5, r3, #3
 8008bde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008be2:	00d4      	lsls	r4, r2, #3
 8008be4:	4622      	mov	r2, r4
 8008be6:	462b      	mov	r3, r5
 8008be8:	1814      	adds	r4, r2, r0
 8008bea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008bee:	414b      	adcs	r3, r1
 8008bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f04f 0100 	mov.w	r1, #0
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	008b      	lsls	r3, r1, #2
 8008c0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c0e:	0082      	lsls	r2, r0, #2
 8008c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c14:	f7f7 ffd8 	bl	8000bc8 <__aeabi_uldivmod>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <UART_SetConfig+0x734>)
 8008c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	2164      	movs	r1, #100	; 0x64
 8008c26:	fb01 f303 	mul.w	r3, r1, r3
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	3332      	adds	r3, #50	; 0x32
 8008c30:	4a2c      	ldr	r2, [pc, #176]	; (8008ce4 <UART_SetConfig+0x734>)
 8008c32:	fba2 2303 	umull	r2, r3, r2, r3
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c3c:	441e      	add	r6, r3
 8008c3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f04f 0100 	mov.w	r1, #0
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	1894      	adds	r4, r2, r2
 8008c4e:	603c      	str	r4, [r7, #0]
 8008c50:	415b      	adcs	r3, r3
 8008c52:	607b      	str	r3, [r7, #4]
 8008c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c58:	1812      	adds	r2, r2, r0
 8008c5a:	eb41 0303 	adc.w	r3, r1, r3
 8008c5e:	f04f 0400 	mov.w	r4, #0
 8008c62:	f04f 0500 	mov.w	r5, #0
 8008c66:	00dd      	lsls	r5, r3, #3
 8008c68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c6c:	00d4      	lsls	r4, r2, #3
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	1814      	adds	r4, r2, r0
 8008c74:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008c78:	414b      	adcs	r3, r1
 8008c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f04f 0100 	mov.w	r1, #0
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	008b      	lsls	r3, r1, #2
 8008c94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c98:	0082      	lsls	r2, r0, #2
 8008c9a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c9e:	f7f7 ff93 	bl	8000bc8 <__aeabi_uldivmod>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <UART_SetConfig+0x734>)
 8008ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cac:	095b      	lsrs	r3, r3, #5
 8008cae:	2164      	movs	r1, #100	; 0x64
 8008cb0:	fb01 f303 	mul.w	r3, r1, r3
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	011b      	lsls	r3, r3, #4
 8008cb8:	3332      	adds	r3, #50	; 0x32
 8008cba:	4a0a      	ldr	r2, [pc, #40]	; (8008ce4 <UART_SetConfig+0x734>)
 8008cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	f003 020f 	and.w	r2, r3, #15
 8008cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4432      	add	r2, r6
 8008cce:	609a      	str	r2, [r3, #8]
}
 8008cd0:	e7ff      	b.n	8008cd2 <UART_SetConfig+0x722>
 8008cd2:	bf00      	nop
 8008cd4:	37f4      	adds	r7, #244	; 0xf4
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	40011000 	.word	0x40011000
 8008ce0:	40011400 	.word	0x40011400
 8008ce4:	51eb851f 	.word	0x51eb851f

08008ce8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d029      	beq.n	8008d56 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d12:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d1c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008d22:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008d28:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008d2e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008d34:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008d3a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008d40:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008d46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e034      	b.n	8008dc0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d62:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008d72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d8a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d94:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008d9a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008da0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008da6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008dac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b087      	sub	sp, #28
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d02e      	beq.n	8008e46 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008df4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008e04:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008e0e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008e18:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008e22:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008e2c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008e36:	4313      	orrs	r3, r2
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	609a      	str	r2, [r3, #8]
 8008e44:	e03b      	b.n	8008ebe <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e56:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e7c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008e8c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008e96:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008ea0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ee8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008ef2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008f04:	f7fa fc2a 	bl	800375c <HAL_GetTick>
 8008f08:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008f0a:	e010      	b.n	8008f2e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f12:	d00c      	beq.n	8008f2e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <FMC_SDRAM_SendCommand+0x5e>
 8008f1a:	f7fa fc1f 	bl	800375c <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d201      	bcs.n	8008f2e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e006      	b.n	8008f3c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d0e8      	beq.n	8008f0c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6892      	ldr	r2, [r2, #8]
 8008fc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6852      	ldr	r2, [r2, #4]
 8008fd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d103      	bne.n	8008fe6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	1e5a      	subs	r2, r3, #1
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009012:	4b4e      	ldr	r3, [pc, #312]	; (800914c <xTaskIncrementTick+0x144>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 8088 	bne.w	800912c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800901c:	4b4c      	ldr	r3, [pc, #304]	; (8009150 <xTaskIncrementTick+0x148>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009024:	4a4a      	ldr	r2, [pc, #296]	; (8009150 <xTaskIncrementTick+0x148>)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d120      	bne.n	8009072 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009030:	4b48      	ldr	r3, [pc, #288]	; (8009154 <xTaskIncrementTick+0x14c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xTaskIncrementTick+0x46>
 8009050:	4b40      	ldr	r3, [pc, #256]	; (8009154 <xTaskIncrementTick+0x14c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	4b40      	ldr	r3, [pc, #256]	; (8009158 <xTaskIncrementTick+0x150>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a3e      	ldr	r2, [pc, #248]	; (8009154 <xTaskIncrementTick+0x14c>)
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	4a3e      	ldr	r2, [pc, #248]	; (8009158 <xTaskIncrementTick+0x150>)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	4b3d      	ldr	r3, [pc, #244]	; (800915c <xTaskIncrementTick+0x154>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a3c      	ldr	r2, [pc, #240]	; (800915c <xTaskIncrementTick+0x154>)
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	f000 f8f9 	bl	8009264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009072:	4b3b      	ldr	r3, [pc, #236]	; (8009160 <xTaskIncrementTick+0x158>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	d348      	bcc.n	800910e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800907c:	4b35      	ldr	r3, [pc, #212]	; (8009154 <xTaskIncrementTick+0x14c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d104      	bne.n	8009090 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009086:	4b36      	ldr	r3, [pc, #216]	; (8009160 <xTaskIncrementTick+0x158>)
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	601a      	str	r2, [r3, #0]
					break;
 800908e:	e03e      	b.n	800910e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009090:	4b30      	ldr	r3, [pc, #192]	; (8009154 <xTaskIncrementTick+0x14c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d203      	bcs.n	80090b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090a8:	4a2d      	ldr	r2, [pc, #180]	; (8009160 <xTaskIncrementTick+0x158>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090ae:	e02e      	b.n	800910e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff ff7c 	bl	8008fb2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	3318      	adds	r3, #24
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff ff73 	bl	8008fb2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	2201      	movs	r2, #1
 80090d2:	409a      	lsls	r2, r3
 80090d4:	4b23      	ldr	r3, [pc, #140]	; (8009164 <xTaskIncrementTick+0x15c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4313      	orrs	r3, r2
 80090da:	4a22      	ldr	r2, [pc, #136]	; (8009164 <xTaskIncrementTick+0x15c>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4a1f      	ldr	r2, [pc, #124]	; (8009168 <xTaskIncrementTick+0x160>)
 80090ec:	441a      	add	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7ff ff38 	bl	8008f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fe:	4b1b      	ldr	r3, [pc, #108]	; (800916c <xTaskIncrementTick+0x164>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	429a      	cmp	r2, r3
 8009106:	d3b9      	bcc.n	800907c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800910c:	e7b6      	b.n	800907c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800910e:	4b17      	ldr	r3, [pc, #92]	; (800916c <xTaskIncrementTick+0x164>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	4914      	ldr	r1, [pc, #80]	; (8009168 <xTaskIncrementTick+0x160>)
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d907      	bls.n	8009136 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009126:	2301      	movs	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e004      	b.n	8009136 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800912c:	4b10      	ldr	r3, [pc, #64]	; (8009170 <xTaskIncrementTick+0x168>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3301      	adds	r3, #1
 8009132:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <xTaskIncrementTick+0x168>)
 8009134:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009136:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <xTaskIncrementTick+0x16c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800913e:	2301      	movs	r3, #1
 8009140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009142:	697b      	ldr	r3, [r7, #20]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200004b0 	.word	0x200004b0
 8009150:	20000498 	.word	0x20000498
 8009154:	20000490 	.word	0x20000490
 8009158:	20000494 	.word	0x20000494
 800915c:	200004a8 	.word	0x200004a8
 8009160:	200004ac 	.word	0x200004ac
 8009164:	2000049c 	.word	0x2000049c
 8009168:	20000404 	.word	0x20000404
 800916c:	20000400 	.word	0x20000400
 8009170:	200004a0 	.word	0x200004a0
 8009174:	200004a4 	.word	0x200004a4

08009178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800917e:	4b32      	ldr	r3, [pc, #200]	; (8009248 <vTaskSwitchContext+0xd0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009186:	4b31      	ldr	r3, [pc, #196]	; (800924c <vTaskSwitchContext+0xd4>)
 8009188:	2201      	movs	r2, #1
 800918a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800918c:	e058      	b.n	8009240 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800918e:	4b2f      	ldr	r3, [pc, #188]	; (800924c <vTaskSwitchContext+0xd4>)
 8009190:	2200      	movs	r2, #0
 8009192:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009194:	f7f8 fb48 	bl	8001828 <RTOS_AppGetRuntimeCounterValueFromISR>
 8009198:	4603      	mov	r3, r0
 800919a:	4a2d      	ldr	r2, [pc, #180]	; (8009250 <vTaskSwitchContext+0xd8>)
 800919c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800919e:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <vTaskSwitchContext+0xd8>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b2c      	ldr	r3, [pc, #176]	; (8009254 <vTaskSwitchContext+0xdc>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d909      	bls.n	80091be <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80091aa:	4b2b      	ldr	r3, [pc, #172]	; (8009258 <vTaskSwitchContext+0xe0>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80091b0:	4a27      	ldr	r2, [pc, #156]	; (8009250 <vTaskSwitchContext+0xd8>)
 80091b2:	6810      	ldr	r0, [r2, #0]
 80091b4:	4a27      	ldr	r2, [pc, #156]	; (8009254 <vTaskSwitchContext+0xdc>)
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	1a82      	subs	r2, r0, r2
 80091ba:	440a      	add	r2, r1
 80091bc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80091be:	4b24      	ldr	r3, [pc, #144]	; (8009250 <vTaskSwitchContext+0xd8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a24      	ldr	r2, [pc, #144]	; (8009254 <vTaskSwitchContext+0xdc>)
 80091c4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c6:	4b25      	ldr	r3, [pc, #148]	; (800925c <vTaskSwitchContext+0xe4>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	fab3 f383 	clz	r3, r3
 80091d2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80091d4:	7afb      	ldrb	r3, [r7, #11]
 80091d6:	f1c3 031f 	rsb	r3, r3, #31
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	4920      	ldr	r1, [pc, #128]	; (8009260 <vTaskSwitchContext+0xe8>)
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	440b      	add	r3, r1
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <vTaskSwitchContext+0x8e>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	607b      	str	r3, [r7, #4]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <vTaskSwitchContext+0x8c>
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a13      	ldr	r2, [pc, #76]	; (8009260 <vTaskSwitchContext+0xe8>)
 8009212:	4413      	add	r3, r2
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	605a      	str	r2, [r3, #4]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	3308      	adds	r3, #8
 8009228:	429a      	cmp	r2, r3
 800922a:	d104      	bne.n	8009236 <vTaskSwitchContext+0xbe>
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4a06      	ldr	r2, [pc, #24]	; (8009258 <vTaskSwitchContext+0xe0>)
 800923e:	6013      	str	r3, [r2, #0]
}
 8009240:	bf00      	nop
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200004b0 	.word	0x200004b0
 800924c:	200004a4 	.word	0x200004a4
 8009250:	200004b8 	.word	0x200004b8
 8009254:	200004b4 	.word	0x200004b4
 8009258:	20000400 	.word	0x20000400
 800925c:	2000049c 	.word	0x2000049c
 8009260:	20000404 	.word	0x20000404

08009264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <prvResetNextTaskUnblockTime+0x38>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009274:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <prvResetNextTaskUnblockTime+0x3c>)
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800927c:	e008      	b.n	8009290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <prvResetNextTaskUnblockTime+0x38>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <prvResetNextTaskUnblockTime+0x3c>)
 800928e:	6013      	str	r3, [r2, #0]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20000490 	.word	0x20000490
 80092a0:	200004ac 	.word	0x200004ac
	...

080092b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <pxCurrentTCBConst2>)
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ba:	f380 8809 	msr	PSP, r0
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8811 	msr	BASEPRI, r0
 80092ca:	4770      	bx	lr
 80092cc:	f3af 8000 	nop.w

080092d0 <pxCurrentTCBConst2>:
 80092d0:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
	...

080092e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092e0:	f3ef 8009 	mrs	r0, PSP
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	4b15      	ldr	r3, [pc, #84]	; (8009340 <pxCurrentTCBConst>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	f01e 0f10 	tst.w	lr, #16
 80092f0:	bf08      	it	eq
 80092f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fa:	6010      	str	r0, [r2, #0]
 80092fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009304:	f380 8811 	msr	BASEPRI, r0
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f7ff ff32 	bl	8009178 <vTaskSwitchContext>
 8009314:	f04f 0000 	mov.w	r0, #0
 8009318:	f380 8811 	msr	BASEPRI, r0
 800931c:	bc09      	pop	{r0, r3}
 800931e:	6819      	ldr	r1, [r3, #0]
 8009320:	6808      	ldr	r0, [r1, #0]
 8009322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009326:	f01e 0f10 	tst.w	lr, #16
 800932a:	bf08      	it	eq
 800932c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009330:	f380 8809 	msr	PSP, r0
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w

08009340 <pxCurrentTCBConst>:
 8009340:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop

08009348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	607b      	str	r3, [r7, #4]
}
 8009360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009362:	f7ff fe51 	bl	8009008 <xTaskIncrementTick>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <SysTick_Handler+0x40>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800937e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	e000ed04 	.word	0xe000ed04

0800938c <I2C_Scan>:
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	2300      	movs	r3, #0
 8009398:	81fb      	strh	r3, [r7, #14]
 800939a:	2300      	movs	r3, #0
 800939c:	737b      	strb	r3, [r7, #13]
 800939e:	2300      	movs	r3, #0
 80093a0:	81fb      	strh	r3, [r7, #14]
 80093a2:	e014      	b.n	80093ce <I2C_Scan+0x42>
 80093a4:	89f9      	ldrh	r1, [r7, #14]
 80093a6:	2314      	movs	r3, #20
 80093a8:	2201      	movs	r2, #1
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fb fd74 	bl	8004e98 <HAL_I2C_IsDeviceReady>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <I2C_Scan+0x3c>
 80093b6:	7b7b      	ldrb	r3, [r7, #13]
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	4413      	add	r3, r2
 80093bc:	89fa      	ldrh	r2, [r7, #14]
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	7b7b      	ldrb	r3, [r7, #13]
 80093c4:	3301      	adds	r3, #1
 80093c6:	737b      	strb	r3, [r7, #13]
 80093c8:	89fb      	ldrh	r3, [r7, #14]
 80093ca:	3301      	adds	r3, #1
 80093cc:	81fb      	strh	r3, [r7, #14]
 80093ce:	89fb      	ldrh	r3, [r7, #14]
 80093d0:	2bff      	cmp	r3, #255	; 0xff
 80093d2:	d9e7      	bls.n	80093a4 <I2C_Scan+0x18>
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <Init_BMP280>:
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af04      	add	r7, sp, #16
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	23b6      	movs	r3, #182	; 0xb6
 80093e6:	733b      	strb	r3, [r7, #12]
 80093e8:	2332      	movs	r3, #50	; 0x32
 80093ea:	9302      	str	r3, [sp, #8]
 80093ec:	2301      	movs	r3, #1
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	f107 030c 	add.w	r3, r7, #12
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	2301      	movs	r3, #1
 80093f8:	22e0      	movs	r2, #224	; 0xe0
 80093fa:	21ee      	movs	r1, #238	; 0xee
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fb fc51 	bl	8004ca4 <HAL_I2C_Mem_Write>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <Init_BMP280+0x30>
 8009408:	f7f8 fb98 	bl	8001b3c <Error_Handler>
 800940c:	232f      	movs	r3, #47	; 0x2f
 800940e:	733b      	strb	r3, [r7, #12]
 8009410:	2332      	movs	r3, #50	; 0x32
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	2301      	movs	r3, #1
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	f107 030c 	add.w	r3, r7, #12
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	2301      	movs	r3, #1
 8009420:	22f4      	movs	r2, #244	; 0xf4
 8009422:	21ee      	movs	r1, #238	; 0xee
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fb fc3d 	bl	8004ca4 <HAL_I2C_Mem_Write>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <Init_BMP280+0x58>
 8009430:	f7f8 fb84 	bl	8001b3c <Error_Handler>
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <Init_MPU9250>:
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af04      	add	r7, sp, #16
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	2380      	movs	r3, #128	; 0x80
 8009446:	733b      	strb	r3, [r7, #12]
 8009448:	2332      	movs	r3, #50	; 0x32
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	2301      	movs	r3, #1
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	f107 030c 	add.w	r3, r7, #12
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	2301      	movs	r3, #1
 8009458:	226b      	movs	r2, #107	; 0x6b
 800945a:	21d0      	movs	r1, #208	; 0xd0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7fb fc21 	bl	8004ca4 <HAL_I2C_Mem_Write>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <Init_MPU9250+0x30>
 8009468:	f7f8 fb68 	bl	8001b3c <Error_Handler>
 800946c:	2064      	movs	r0, #100	; 0x64
 800946e:	f7fa f981 	bl	8003774 <HAL_Delay>
 8009472:	2301      	movs	r3, #1
 8009474:	733b      	strb	r3, [r7, #12]
 8009476:	2332      	movs	r3, #50	; 0x32
 8009478:	9302      	str	r3, [sp, #8]
 800947a:	2301      	movs	r3, #1
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2301      	movs	r3, #1
 8009486:	226b      	movs	r2, #107	; 0x6b
 8009488:	21d0      	movs	r1, #208	; 0xd0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7fb fc0a 	bl	8004ca4 <HAL_I2C_Mem_Write>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <Init_MPU9250+0x5e>
 8009496:	f7f8 fb51 	bl	8001b3c <Error_Handler>
 800949a:	2302      	movs	r3, #2
 800949c:	733b      	strb	r3, [r7, #12]
 800949e:	2332      	movs	r3, #50	; 0x32
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	2301      	movs	r3, #1
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2301      	movs	r3, #1
 80094ae:	2237      	movs	r2, #55	; 0x37
 80094b0:	21d0      	movs	r1, #208	; 0xd0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fb fbf6 	bl	8004ca4 <HAL_I2C_Mem_Write>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <Init_MPU9250+0x86>
 80094be:	f7f8 fb3d 	bl	8001b3c <Error_Handler>
 80094c2:	2316      	movs	r3, #22
 80094c4:	733b      	strb	r3, [r7, #12]
 80094c6:	2332      	movs	r3, #50	; 0x32
 80094c8:	9302      	str	r3, [sp, #8]
 80094ca:	2301      	movs	r3, #1
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	f107 030c 	add.w	r3, r7, #12
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2301      	movs	r3, #1
 80094d6:	220a      	movs	r2, #10
 80094d8:	2118      	movs	r1, #24
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fb fbe2 	bl	8004ca4 <HAL_I2C_Mem_Write>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <Init_MPU9250+0xae>
 80094e6:	f7f8 fb29 	bl	8001b3c <Error_Handler>
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <__errno>:
 80094f4:	4b01      	ldr	r3, [pc, #4]	; (80094fc <__errno+0x8>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000064 	.word	0x20000064

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4d0d      	ldr	r5, [pc, #52]	; (8009538 <__libc_init_array+0x38>)
 8009504:	4c0d      	ldr	r4, [pc, #52]	; (800953c <__libc_init_array+0x3c>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	2600      	movs	r6, #0
 800950c:	42a6      	cmp	r6, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	4d0b      	ldr	r5, [pc, #44]	; (8009540 <__libc_init_array+0x40>)
 8009512:	4c0c      	ldr	r4, [pc, #48]	; (8009544 <__libc_init_array+0x44>)
 8009514:	f002 fcf0 	bl	800bef8 <_init>
 8009518:	1b64      	subs	r4, r4, r5
 800951a:	10a4      	asrs	r4, r4, #2
 800951c:	2600      	movs	r6, #0
 800951e:	42a6      	cmp	r6, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f855 3b04 	ldr.w	r3, [r5], #4
 8009528:	4798      	blx	r3
 800952a:	3601      	adds	r6, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009532:	4798      	blx	r3
 8009534:	3601      	adds	r6, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	0800ee5c 	.word	0x0800ee5c
 800953c:	0800ee5c 	.word	0x0800ee5c
 8009540:	0800ee5c 	.word	0x0800ee5c
 8009544:	0800ee60 	.word	0x0800ee60

08009548 <memcpy>:
 8009548:	440a      	add	r2, r1
 800954a:	4291      	cmp	r1, r2
 800954c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009550:	d100      	bne.n	8009554 <memcpy+0xc>
 8009552:	4770      	bx	lr
 8009554:	b510      	push	{r4, lr}
 8009556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800955e:	4291      	cmp	r1, r2
 8009560:	d1f9      	bne.n	8009556 <memcpy+0xe>
 8009562:	bd10      	pop	{r4, pc}

08009564 <memset>:
 8009564:	4402      	add	r2, r0
 8009566:	4603      	mov	r3, r0
 8009568:	4293      	cmp	r3, r2
 800956a:	d100      	bne.n	800956e <memset+0xa>
 800956c:	4770      	bx	lr
 800956e:	f803 1b01 	strb.w	r1, [r3], #1
 8009572:	e7f9      	b.n	8009568 <memset+0x4>

08009574 <__cvt>:
 8009574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009578:	ec55 4b10 	vmov	r4, r5, d0
 800957c:	2d00      	cmp	r5, #0
 800957e:	460e      	mov	r6, r1
 8009580:	4619      	mov	r1, r3
 8009582:	462b      	mov	r3, r5
 8009584:	bfbb      	ittet	lt
 8009586:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800958a:	461d      	movlt	r5, r3
 800958c:	2300      	movge	r3, #0
 800958e:	232d      	movlt	r3, #45	; 0x2d
 8009590:	700b      	strb	r3, [r1, #0]
 8009592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009598:	4691      	mov	r9, r2
 800959a:	f023 0820 	bic.w	r8, r3, #32
 800959e:	bfbc      	itt	lt
 80095a0:	4622      	movlt	r2, r4
 80095a2:	4614      	movlt	r4, r2
 80095a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095a8:	d005      	beq.n	80095b6 <__cvt+0x42>
 80095aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095ae:	d100      	bne.n	80095b2 <__cvt+0x3e>
 80095b0:	3601      	adds	r6, #1
 80095b2:	2102      	movs	r1, #2
 80095b4:	e000      	b.n	80095b8 <__cvt+0x44>
 80095b6:	2103      	movs	r1, #3
 80095b8:	ab03      	add	r3, sp, #12
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	ab02      	add	r3, sp, #8
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	ec45 4b10 	vmov	d0, r4, r5
 80095c4:	4653      	mov	r3, sl
 80095c6:	4632      	mov	r2, r6
 80095c8:	f000 fd8a 	bl	800a0e0 <_dtoa_r>
 80095cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095d0:	4607      	mov	r7, r0
 80095d2:	d102      	bne.n	80095da <__cvt+0x66>
 80095d4:	f019 0f01 	tst.w	r9, #1
 80095d8:	d022      	beq.n	8009620 <__cvt+0xac>
 80095da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095de:	eb07 0906 	add.w	r9, r7, r6
 80095e2:	d110      	bne.n	8009606 <__cvt+0x92>
 80095e4:	783b      	ldrb	r3, [r7, #0]
 80095e6:	2b30      	cmp	r3, #48	; 0x30
 80095e8:	d10a      	bne.n	8009600 <__cvt+0x8c>
 80095ea:	2200      	movs	r2, #0
 80095ec:	2300      	movs	r3, #0
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f7 fa79 	bl	8000ae8 <__aeabi_dcmpeq>
 80095f6:	b918      	cbnz	r0, 8009600 <__cvt+0x8c>
 80095f8:	f1c6 0601 	rsb	r6, r6, #1
 80095fc:	f8ca 6000 	str.w	r6, [sl]
 8009600:	f8da 3000 	ldr.w	r3, [sl]
 8009604:	4499      	add	r9, r3
 8009606:	2200      	movs	r2, #0
 8009608:	2300      	movs	r3, #0
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f7 fa6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009612:	b108      	cbz	r0, 8009618 <__cvt+0xa4>
 8009614:	f8cd 900c 	str.w	r9, [sp, #12]
 8009618:	2230      	movs	r2, #48	; 0x30
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	454b      	cmp	r3, r9
 800961e:	d307      	bcc.n	8009630 <__cvt+0xbc>
 8009620:	9b03      	ldr	r3, [sp, #12]
 8009622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009624:	1bdb      	subs	r3, r3, r7
 8009626:	4638      	mov	r0, r7
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	b004      	add	sp, #16
 800962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009630:	1c59      	adds	r1, r3, #1
 8009632:	9103      	str	r1, [sp, #12]
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	e7f0      	b.n	800961a <__cvt+0xa6>

08009638 <__exponent>:
 8009638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800963a:	4603      	mov	r3, r0
 800963c:	2900      	cmp	r1, #0
 800963e:	bfb8      	it	lt
 8009640:	4249      	neglt	r1, r1
 8009642:	f803 2b02 	strb.w	r2, [r3], #2
 8009646:	bfb4      	ite	lt
 8009648:	222d      	movlt	r2, #45	; 0x2d
 800964a:	222b      	movge	r2, #43	; 0x2b
 800964c:	2909      	cmp	r1, #9
 800964e:	7042      	strb	r2, [r0, #1]
 8009650:	dd2a      	ble.n	80096a8 <__exponent+0x70>
 8009652:	f10d 0407 	add.w	r4, sp, #7
 8009656:	46a4      	mov	ip, r4
 8009658:	270a      	movs	r7, #10
 800965a:	46a6      	mov	lr, r4
 800965c:	460a      	mov	r2, r1
 800965e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009662:	fb07 1516 	mls	r5, r7, r6, r1
 8009666:	3530      	adds	r5, #48	; 0x30
 8009668:	2a63      	cmp	r2, #99	; 0x63
 800966a:	f104 34ff 	add.w	r4, r4, #4294967295
 800966e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009672:	4631      	mov	r1, r6
 8009674:	dcf1      	bgt.n	800965a <__exponent+0x22>
 8009676:	3130      	adds	r1, #48	; 0x30
 8009678:	f1ae 0502 	sub.w	r5, lr, #2
 800967c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009680:	1c44      	adds	r4, r0, #1
 8009682:	4629      	mov	r1, r5
 8009684:	4561      	cmp	r1, ip
 8009686:	d30a      	bcc.n	800969e <__exponent+0x66>
 8009688:	f10d 0209 	add.w	r2, sp, #9
 800968c:	eba2 020e 	sub.w	r2, r2, lr
 8009690:	4565      	cmp	r5, ip
 8009692:	bf88      	it	hi
 8009694:	2200      	movhi	r2, #0
 8009696:	4413      	add	r3, r2
 8009698:	1a18      	subs	r0, r3, r0
 800969a:	b003      	add	sp, #12
 800969c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096a6:	e7ed      	b.n	8009684 <__exponent+0x4c>
 80096a8:	2330      	movs	r3, #48	; 0x30
 80096aa:	3130      	adds	r1, #48	; 0x30
 80096ac:	7083      	strb	r3, [r0, #2]
 80096ae:	70c1      	strb	r1, [r0, #3]
 80096b0:	1d03      	adds	r3, r0, #4
 80096b2:	e7f1      	b.n	8009698 <__exponent+0x60>

080096b4 <_printf_float>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	ed2d 8b02 	vpush	{d8}
 80096bc:	b08d      	sub	sp, #52	; 0x34
 80096be:	460c      	mov	r4, r1
 80096c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096c4:	4616      	mov	r6, r2
 80096c6:	461f      	mov	r7, r3
 80096c8:	4605      	mov	r5, r0
 80096ca:	f001 fcad 	bl	800b028 <_localeconv_r>
 80096ce:	f8d0 a000 	ldr.w	sl, [r0]
 80096d2:	4650      	mov	r0, sl
 80096d4:	f7f6 fd8c 	bl	80001f0 <strlen>
 80096d8:	2300      	movs	r3, #0
 80096da:	930a      	str	r3, [sp, #40]	; 0x28
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	9305      	str	r3, [sp, #20]
 80096e0:	f8d8 3000 	ldr.w	r3, [r8]
 80096e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096e8:	3307      	adds	r3, #7
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	f103 0208 	add.w	r2, r3, #8
 80096f2:	f8c8 2000 	str.w	r2, [r8]
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009706:	9307      	str	r3, [sp, #28]
 8009708:	f8cd 8018 	str.w	r8, [sp, #24]
 800970c:	ee08 0a10 	vmov	s16, r0
 8009710:	4b9f      	ldr	r3, [pc, #636]	; (8009990 <_printf_float+0x2dc>)
 8009712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	f7f7 fa17 	bl	8000b4c <__aeabi_dcmpun>
 800971e:	bb88      	cbnz	r0, 8009784 <_printf_float+0xd0>
 8009720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009724:	4b9a      	ldr	r3, [pc, #616]	; (8009990 <_printf_float+0x2dc>)
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	f7f7 f9f1 	bl	8000b10 <__aeabi_dcmple>
 800972e:	bb48      	cbnz	r0, 8009784 <_printf_float+0xd0>
 8009730:	2200      	movs	r2, #0
 8009732:	2300      	movs	r3, #0
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f7 f9e0 	bl	8000afc <__aeabi_dcmplt>
 800973c:	b110      	cbz	r0, 8009744 <_printf_float+0x90>
 800973e:	232d      	movs	r3, #45	; 0x2d
 8009740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009744:	4b93      	ldr	r3, [pc, #588]	; (8009994 <_printf_float+0x2e0>)
 8009746:	4894      	ldr	r0, [pc, #592]	; (8009998 <_printf_float+0x2e4>)
 8009748:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800974c:	bf94      	ite	ls
 800974e:	4698      	movls	r8, r3
 8009750:	4680      	movhi	r8, r0
 8009752:	2303      	movs	r3, #3
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	9b05      	ldr	r3, [sp, #20]
 8009758:	f023 0204 	bic.w	r2, r3, #4
 800975c:	6022      	str	r2, [r4, #0]
 800975e:	f04f 0900 	mov.w	r9, #0
 8009762:	9700      	str	r7, [sp, #0]
 8009764:	4633      	mov	r3, r6
 8009766:	aa0b      	add	r2, sp, #44	; 0x2c
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f9d8 	bl	8009b20 <_printf_common>
 8009770:	3001      	adds	r0, #1
 8009772:	f040 8090 	bne.w	8009896 <_printf_float+0x1e2>
 8009776:	f04f 30ff 	mov.w	r0, #4294967295
 800977a:	b00d      	add	sp, #52	; 0x34
 800977c:	ecbd 8b02 	vpop	{d8}
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	4642      	mov	r2, r8
 8009786:	464b      	mov	r3, r9
 8009788:	4640      	mov	r0, r8
 800978a:	4649      	mov	r1, r9
 800978c:	f7f7 f9de 	bl	8000b4c <__aeabi_dcmpun>
 8009790:	b140      	cbz	r0, 80097a4 <_printf_float+0xf0>
 8009792:	464b      	mov	r3, r9
 8009794:	2b00      	cmp	r3, #0
 8009796:	bfbc      	itt	lt
 8009798:	232d      	movlt	r3, #45	; 0x2d
 800979a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800979e:	487f      	ldr	r0, [pc, #508]	; (800999c <_printf_float+0x2e8>)
 80097a0:	4b7f      	ldr	r3, [pc, #508]	; (80099a0 <_printf_float+0x2ec>)
 80097a2:	e7d1      	b.n	8009748 <_printf_float+0x94>
 80097a4:	6863      	ldr	r3, [r4, #4]
 80097a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097aa:	9206      	str	r2, [sp, #24]
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	d13f      	bne.n	8009830 <_printf_float+0x17c>
 80097b0:	2306      	movs	r3, #6
 80097b2:	6063      	str	r3, [r4, #4]
 80097b4:	9b05      	ldr	r3, [sp, #20]
 80097b6:	6861      	ldr	r1, [r4, #4]
 80097b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097bc:	2300      	movs	r3, #0
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	ab0a      	add	r3, sp, #40	; 0x28
 80097c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097c6:	ab09      	add	r3, sp, #36	; 0x24
 80097c8:	ec49 8b10 	vmov	d0, r8, r9
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	6022      	str	r2, [r4, #0]
 80097d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097d4:	4628      	mov	r0, r5
 80097d6:	f7ff fecd 	bl	8009574 <__cvt>
 80097da:	9b06      	ldr	r3, [sp, #24]
 80097dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097de:	2b47      	cmp	r3, #71	; 0x47
 80097e0:	4680      	mov	r8, r0
 80097e2:	d108      	bne.n	80097f6 <_printf_float+0x142>
 80097e4:	1cc8      	adds	r0, r1, #3
 80097e6:	db02      	blt.n	80097ee <_printf_float+0x13a>
 80097e8:	6863      	ldr	r3, [r4, #4]
 80097ea:	4299      	cmp	r1, r3
 80097ec:	dd41      	ble.n	8009872 <_printf_float+0x1be>
 80097ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80097f2:	fa5f fb8b 	uxtb.w	fp, fp
 80097f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097fa:	d820      	bhi.n	800983e <_printf_float+0x18a>
 80097fc:	3901      	subs	r1, #1
 80097fe:	465a      	mov	r2, fp
 8009800:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009804:	9109      	str	r1, [sp, #36]	; 0x24
 8009806:	f7ff ff17 	bl	8009638 <__exponent>
 800980a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800980c:	1813      	adds	r3, r2, r0
 800980e:	2a01      	cmp	r2, #1
 8009810:	4681      	mov	r9, r0
 8009812:	6123      	str	r3, [r4, #16]
 8009814:	dc02      	bgt.n	800981c <_printf_float+0x168>
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	07d2      	lsls	r2, r2, #31
 800981a:	d501      	bpl.n	8009820 <_printf_float+0x16c>
 800981c:	3301      	adds	r3, #1
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009824:	2b00      	cmp	r3, #0
 8009826:	d09c      	beq.n	8009762 <_printf_float+0xae>
 8009828:	232d      	movs	r3, #45	; 0x2d
 800982a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982e:	e798      	b.n	8009762 <_printf_float+0xae>
 8009830:	9a06      	ldr	r2, [sp, #24]
 8009832:	2a47      	cmp	r2, #71	; 0x47
 8009834:	d1be      	bne.n	80097b4 <_printf_float+0x100>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1bc      	bne.n	80097b4 <_printf_float+0x100>
 800983a:	2301      	movs	r3, #1
 800983c:	e7b9      	b.n	80097b2 <_printf_float+0xfe>
 800983e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009842:	d118      	bne.n	8009876 <_printf_float+0x1c2>
 8009844:	2900      	cmp	r1, #0
 8009846:	6863      	ldr	r3, [r4, #4]
 8009848:	dd0b      	ble.n	8009862 <_printf_float+0x1ae>
 800984a:	6121      	str	r1, [r4, #16]
 800984c:	b913      	cbnz	r3, 8009854 <_printf_float+0x1a0>
 800984e:	6822      	ldr	r2, [r4, #0]
 8009850:	07d0      	lsls	r0, r2, #31
 8009852:	d502      	bpl.n	800985a <_printf_float+0x1a6>
 8009854:	3301      	adds	r3, #1
 8009856:	440b      	add	r3, r1
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	65a1      	str	r1, [r4, #88]	; 0x58
 800985c:	f04f 0900 	mov.w	r9, #0
 8009860:	e7de      	b.n	8009820 <_printf_float+0x16c>
 8009862:	b913      	cbnz	r3, 800986a <_printf_float+0x1b6>
 8009864:	6822      	ldr	r2, [r4, #0]
 8009866:	07d2      	lsls	r2, r2, #31
 8009868:	d501      	bpl.n	800986e <_printf_float+0x1ba>
 800986a:	3302      	adds	r3, #2
 800986c:	e7f4      	b.n	8009858 <_printf_float+0x1a4>
 800986e:	2301      	movs	r3, #1
 8009870:	e7f2      	b.n	8009858 <_printf_float+0x1a4>
 8009872:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009878:	4299      	cmp	r1, r3
 800987a:	db05      	blt.n	8009888 <_printf_float+0x1d4>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	6121      	str	r1, [r4, #16]
 8009880:	07d8      	lsls	r0, r3, #31
 8009882:	d5ea      	bpl.n	800985a <_printf_float+0x1a6>
 8009884:	1c4b      	adds	r3, r1, #1
 8009886:	e7e7      	b.n	8009858 <_printf_float+0x1a4>
 8009888:	2900      	cmp	r1, #0
 800988a:	bfd4      	ite	le
 800988c:	f1c1 0202 	rsble	r2, r1, #2
 8009890:	2201      	movgt	r2, #1
 8009892:	4413      	add	r3, r2
 8009894:	e7e0      	b.n	8009858 <_printf_float+0x1a4>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	055a      	lsls	r2, r3, #21
 800989a:	d407      	bmi.n	80098ac <_printf_float+0x1f8>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	4642      	mov	r2, r8
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	d12c      	bne.n	8009904 <_printf_float+0x250>
 80098aa:	e764      	b.n	8009776 <_printf_float+0xc2>
 80098ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098b0:	f240 80e0 	bls.w	8009a74 <_printf_float+0x3c0>
 80098b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098b8:	2200      	movs	r2, #0
 80098ba:	2300      	movs	r3, #0
 80098bc:	f7f7 f914 	bl	8000ae8 <__aeabi_dcmpeq>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d034      	beq.n	800992e <_printf_float+0x27a>
 80098c4:	4a37      	ldr	r2, [pc, #220]	; (80099a4 <_printf_float+0x2f0>)
 80098c6:	2301      	movs	r3, #1
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	f43f af51 	beq.w	8009776 <_printf_float+0xc2>
 80098d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d8:	429a      	cmp	r2, r3
 80098da:	db02      	blt.n	80098e2 <_printf_float+0x22e>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	07d8      	lsls	r0, r3, #31
 80098e0:	d510      	bpl.n	8009904 <_printf_float+0x250>
 80098e2:	ee18 3a10 	vmov	r3, s16
 80098e6:	4652      	mov	r2, sl
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f43f af41 	beq.w	8009776 <_printf_float+0xc2>
 80098f4:	f04f 0800 	mov.w	r8, #0
 80098f8:	f104 091a 	add.w	r9, r4, #26
 80098fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fe:	3b01      	subs	r3, #1
 8009900:	4543      	cmp	r3, r8
 8009902:	dc09      	bgt.n	8009918 <_printf_float+0x264>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	079b      	lsls	r3, r3, #30
 8009908:	f100 8105 	bmi.w	8009b16 <_printf_float+0x462>
 800990c:	68e0      	ldr	r0, [r4, #12]
 800990e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009910:	4298      	cmp	r0, r3
 8009912:	bfb8      	it	lt
 8009914:	4618      	movlt	r0, r3
 8009916:	e730      	b.n	800977a <_printf_float+0xc6>
 8009918:	2301      	movs	r3, #1
 800991a:	464a      	mov	r2, r9
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f af27 	beq.w	8009776 <_printf_float+0xc2>
 8009928:	f108 0801 	add.w	r8, r8, #1
 800992c:	e7e6      	b.n	80098fc <_printf_float+0x248>
 800992e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	dc39      	bgt.n	80099a8 <_printf_float+0x2f4>
 8009934:	4a1b      	ldr	r2, [pc, #108]	; (80099a4 <_printf_float+0x2f0>)
 8009936:	2301      	movs	r3, #1
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	f43f af19 	beq.w	8009776 <_printf_float+0xc2>
 8009944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009948:	4313      	orrs	r3, r2
 800994a:	d102      	bne.n	8009952 <_printf_float+0x29e>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	07d9      	lsls	r1, r3, #31
 8009950:	d5d8      	bpl.n	8009904 <_printf_float+0x250>
 8009952:	ee18 3a10 	vmov	r3, s16
 8009956:	4652      	mov	r2, sl
 8009958:	4631      	mov	r1, r6
 800995a:	4628      	mov	r0, r5
 800995c:	47b8      	blx	r7
 800995e:	3001      	adds	r0, #1
 8009960:	f43f af09 	beq.w	8009776 <_printf_float+0xc2>
 8009964:	f04f 0900 	mov.w	r9, #0
 8009968:	f104 0a1a 	add.w	sl, r4, #26
 800996c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996e:	425b      	negs	r3, r3
 8009970:	454b      	cmp	r3, r9
 8009972:	dc01      	bgt.n	8009978 <_printf_float+0x2c4>
 8009974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009976:	e792      	b.n	800989e <_printf_float+0x1ea>
 8009978:	2301      	movs	r3, #1
 800997a:	4652      	mov	r2, sl
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	f43f aef7 	beq.w	8009776 <_printf_float+0xc2>
 8009988:	f109 0901 	add.w	r9, r9, #1
 800998c:	e7ee      	b.n	800996c <_printf_float+0x2b8>
 800998e:	bf00      	nop
 8009990:	7fefffff 	.word	0x7fefffff
 8009994:	0800ea78 	.word	0x0800ea78
 8009998:	0800ea7c 	.word	0x0800ea7c
 800999c:	0800ea84 	.word	0x0800ea84
 80099a0:	0800ea80 	.word	0x0800ea80
 80099a4:	0800ea88 	.word	0x0800ea88
 80099a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099ac:	429a      	cmp	r2, r3
 80099ae:	bfa8      	it	ge
 80099b0:	461a      	movge	r2, r3
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	4691      	mov	r9, r2
 80099b6:	dc37      	bgt.n	8009a28 <_printf_float+0x374>
 80099b8:	f04f 0b00 	mov.w	fp, #0
 80099bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099c0:	f104 021a 	add.w	r2, r4, #26
 80099c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	eba3 0309 	sub.w	r3, r3, r9
 80099cc:	455b      	cmp	r3, fp
 80099ce:	dc33      	bgt.n	8009a38 <_printf_float+0x384>
 80099d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d4:	429a      	cmp	r2, r3
 80099d6:	db3b      	blt.n	8009a50 <_printf_float+0x39c>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	07da      	lsls	r2, r3, #31
 80099dc:	d438      	bmi.n	8009a50 <_printf_float+0x39c>
 80099de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e0:	9b05      	ldr	r3, [sp, #20]
 80099e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	eba2 0901 	sub.w	r9, r2, r1
 80099ea:	4599      	cmp	r9, r3
 80099ec:	bfa8      	it	ge
 80099ee:	4699      	movge	r9, r3
 80099f0:	f1b9 0f00 	cmp.w	r9, #0
 80099f4:	dc35      	bgt.n	8009a62 <_printf_float+0x3ae>
 80099f6:	f04f 0800 	mov.w	r8, #0
 80099fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099fe:	f104 0a1a 	add.w	sl, r4, #26
 8009a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	eba3 0309 	sub.w	r3, r3, r9
 8009a0c:	4543      	cmp	r3, r8
 8009a0e:	f77f af79 	ble.w	8009904 <_printf_float+0x250>
 8009a12:	2301      	movs	r3, #1
 8009a14:	4652      	mov	r2, sl
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f aeaa 	beq.w	8009776 <_printf_float+0xc2>
 8009a22:	f108 0801 	add.w	r8, r8, #1
 8009a26:	e7ec      	b.n	8009a02 <_printf_float+0x34e>
 8009a28:	4613      	mov	r3, r2
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	4628      	mov	r0, r5
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	d1c0      	bne.n	80099b8 <_printf_float+0x304>
 8009a36:	e69e      	b.n	8009776 <_printf_float+0xc2>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	9205      	str	r2, [sp, #20]
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f ae97 	beq.w	8009776 <_printf_float+0xc2>
 8009a48:	9a05      	ldr	r2, [sp, #20]
 8009a4a:	f10b 0b01 	add.w	fp, fp, #1
 8009a4e:	e7b9      	b.n	80099c4 <_printf_float+0x310>
 8009a50:	ee18 3a10 	vmov	r3, s16
 8009a54:	4652      	mov	r2, sl
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b8      	blx	r7
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d1be      	bne.n	80099de <_printf_float+0x32a>
 8009a60:	e689      	b.n	8009776 <_printf_float+0xc2>
 8009a62:	9a05      	ldr	r2, [sp, #20]
 8009a64:	464b      	mov	r3, r9
 8009a66:	4442      	add	r2, r8
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b8      	blx	r7
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d1c1      	bne.n	80099f6 <_printf_float+0x342>
 8009a72:	e680      	b.n	8009776 <_printf_float+0xc2>
 8009a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a76:	2a01      	cmp	r2, #1
 8009a78:	dc01      	bgt.n	8009a7e <_printf_float+0x3ca>
 8009a7a:	07db      	lsls	r3, r3, #31
 8009a7c:	d538      	bpl.n	8009af0 <_printf_float+0x43c>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4642      	mov	r2, r8
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	f43f ae74 	beq.w	8009776 <_printf_float+0xc2>
 8009a8e:	ee18 3a10 	vmov	r3, s16
 8009a92:	4652      	mov	r2, sl
 8009a94:	4631      	mov	r1, r6
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b8      	blx	r7
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	f43f ae6b 	beq.w	8009776 <_printf_float+0xc2>
 8009aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f7f7 f81e 	bl	8000ae8 <__aeabi_dcmpeq>
 8009aac:	b9d8      	cbnz	r0, 8009ae6 <_printf_float+0x432>
 8009aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab0:	f108 0201 	add.w	r2, r8, #1
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	d10e      	bne.n	8009ade <_printf_float+0x42a>
 8009ac0:	e659      	b.n	8009776 <_printf_float+0xc2>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4652      	mov	r2, sl
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	f43f ae52 	beq.w	8009776 <_printf_float+0xc2>
 8009ad2:	f108 0801 	add.w	r8, r8, #1
 8009ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	4543      	cmp	r3, r8
 8009adc:	dcf1      	bgt.n	8009ac2 <_printf_float+0x40e>
 8009ade:	464b      	mov	r3, r9
 8009ae0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ae4:	e6dc      	b.n	80098a0 <_printf_float+0x1ec>
 8009ae6:	f04f 0800 	mov.w	r8, #0
 8009aea:	f104 0a1a 	add.w	sl, r4, #26
 8009aee:	e7f2      	b.n	8009ad6 <_printf_float+0x422>
 8009af0:	2301      	movs	r3, #1
 8009af2:	4642      	mov	r2, r8
 8009af4:	e7df      	b.n	8009ab6 <_printf_float+0x402>
 8009af6:	2301      	movs	r3, #1
 8009af8:	464a      	mov	r2, r9
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	f43f ae38 	beq.w	8009776 <_printf_float+0xc2>
 8009b06:	f108 0801 	add.w	r8, r8, #1
 8009b0a:	68e3      	ldr	r3, [r4, #12]
 8009b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b0e:	1a5b      	subs	r3, r3, r1
 8009b10:	4543      	cmp	r3, r8
 8009b12:	dcf0      	bgt.n	8009af6 <_printf_float+0x442>
 8009b14:	e6fa      	b.n	800990c <_printf_float+0x258>
 8009b16:	f04f 0800 	mov.w	r8, #0
 8009b1a:	f104 0919 	add.w	r9, r4, #25
 8009b1e:	e7f4      	b.n	8009b0a <_printf_float+0x456>

08009b20 <_printf_common>:
 8009b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b24:	4616      	mov	r6, r2
 8009b26:	4699      	mov	r9, r3
 8009b28:	688a      	ldr	r2, [r1, #8]
 8009b2a:	690b      	ldr	r3, [r1, #16]
 8009b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b30:	4293      	cmp	r3, r2
 8009b32:	bfb8      	it	lt
 8009b34:	4613      	movlt	r3, r2
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	b10a      	cbz	r2, 8009b46 <_printf_common+0x26>
 8009b42:	3301      	adds	r3, #1
 8009b44:	6033      	str	r3, [r6, #0]
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	0699      	lsls	r1, r3, #26
 8009b4a:	bf42      	ittt	mi
 8009b4c:	6833      	ldrmi	r3, [r6, #0]
 8009b4e:	3302      	addmi	r3, #2
 8009b50:	6033      	strmi	r3, [r6, #0]
 8009b52:	6825      	ldr	r5, [r4, #0]
 8009b54:	f015 0506 	ands.w	r5, r5, #6
 8009b58:	d106      	bne.n	8009b68 <_printf_common+0x48>
 8009b5a:	f104 0a19 	add.w	sl, r4, #25
 8009b5e:	68e3      	ldr	r3, [r4, #12]
 8009b60:	6832      	ldr	r2, [r6, #0]
 8009b62:	1a9b      	subs	r3, r3, r2
 8009b64:	42ab      	cmp	r3, r5
 8009b66:	dc26      	bgt.n	8009bb6 <_printf_common+0x96>
 8009b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b6c:	1e13      	subs	r3, r2, #0
 8009b6e:	6822      	ldr	r2, [r4, #0]
 8009b70:	bf18      	it	ne
 8009b72:	2301      	movne	r3, #1
 8009b74:	0692      	lsls	r2, r2, #26
 8009b76:	d42b      	bmi.n	8009bd0 <_printf_common+0xb0>
 8009b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4638      	mov	r0, r7
 8009b80:	47c0      	blx	r8
 8009b82:	3001      	adds	r0, #1
 8009b84:	d01e      	beq.n	8009bc4 <_printf_common+0xa4>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	68e5      	ldr	r5, [r4, #12]
 8009b8a:	6832      	ldr	r2, [r6, #0]
 8009b8c:	f003 0306 	and.w	r3, r3, #6
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	bf08      	it	eq
 8009b94:	1aad      	subeq	r5, r5, r2
 8009b96:	68a3      	ldr	r3, [r4, #8]
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	bf0c      	ite	eq
 8009b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ba0:	2500      	movne	r5, #0
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	bfc4      	itt	gt
 8009ba6:	1a9b      	subgt	r3, r3, r2
 8009ba8:	18ed      	addgt	r5, r5, r3
 8009baa:	2600      	movs	r6, #0
 8009bac:	341a      	adds	r4, #26
 8009bae:	42b5      	cmp	r5, r6
 8009bb0:	d11a      	bne.n	8009be8 <_printf_common+0xc8>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	e008      	b.n	8009bc8 <_printf_common+0xa8>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4652      	mov	r2, sl
 8009bba:	4649      	mov	r1, r9
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	47c0      	blx	r8
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d103      	bne.n	8009bcc <_printf_common+0xac>
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bcc:	3501      	adds	r5, #1
 8009bce:	e7c6      	b.n	8009b5e <_printf_common+0x3e>
 8009bd0:	18e1      	adds	r1, r4, r3
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	2030      	movs	r0, #48	; 0x30
 8009bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bda:	4422      	add	r2, r4
 8009bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009be4:	3302      	adds	r3, #2
 8009be6:	e7c7      	b.n	8009b78 <_printf_common+0x58>
 8009be8:	2301      	movs	r3, #1
 8009bea:	4622      	mov	r2, r4
 8009bec:	4649      	mov	r1, r9
 8009bee:	4638      	mov	r0, r7
 8009bf0:	47c0      	blx	r8
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d0e6      	beq.n	8009bc4 <_printf_common+0xa4>
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	e7d9      	b.n	8009bae <_printf_common+0x8e>
	...

08009bfc <_printf_i>:
 8009bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	460c      	mov	r4, r1
 8009c02:	4691      	mov	r9, r2
 8009c04:	7e27      	ldrb	r7, [r4, #24]
 8009c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c08:	2f78      	cmp	r7, #120	; 0x78
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	469a      	mov	sl, r3
 8009c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c12:	d807      	bhi.n	8009c24 <_printf_i+0x28>
 8009c14:	2f62      	cmp	r7, #98	; 0x62
 8009c16:	d80a      	bhi.n	8009c2e <_printf_i+0x32>
 8009c18:	2f00      	cmp	r7, #0
 8009c1a:	f000 80d8 	beq.w	8009dce <_printf_i+0x1d2>
 8009c1e:	2f58      	cmp	r7, #88	; 0x58
 8009c20:	f000 80a3 	beq.w	8009d6a <_printf_i+0x16e>
 8009c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c2c:	e03a      	b.n	8009ca4 <_printf_i+0xa8>
 8009c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c32:	2b15      	cmp	r3, #21
 8009c34:	d8f6      	bhi.n	8009c24 <_printf_i+0x28>
 8009c36:	a001      	add	r0, pc, #4	; (adr r0, 8009c3c <_printf_i+0x40>)
 8009c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009ca9 	.word	0x08009ca9
 8009c44:	08009c25 	.word	0x08009c25
 8009c48:	08009c25 	.word	0x08009c25
 8009c4c:	08009c25 	.word	0x08009c25
 8009c50:	08009c25 	.word	0x08009c25
 8009c54:	08009ca9 	.word	0x08009ca9
 8009c58:	08009c25 	.word	0x08009c25
 8009c5c:	08009c25 	.word	0x08009c25
 8009c60:	08009c25 	.word	0x08009c25
 8009c64:	08009c25 	.word	0x08009c25
 8009c68:	08009db5 	.word	0x08009db5
 8009c6c:	08009cd9 	.word	0x08009cd9
 8009c70:	08009d97 	.word	0x08009d97
 8009c74:	08009c25 	.word	0x08009c25
 8009c78:	08009c25 	.word	0x08009c25
 8009c7c:	08009dd7 	.word	0x08009dd7
 8009c80:	08009c25 	.word	0x08009c25
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009c25 	.word	0x08009c25
 8009c8c:	08009c25 	.word	0x08009c25
 8009c90:	08009d9f 	.word	0x08009d9f
 8009c94:	680b      	ldr	r3, [r1, #0]
 8009c96:	1d1a      	adds	r2, r3, #4
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	600a      	str	r2, [r1, #0]
 8009c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0a3      	b.n	8009df0 <_printf_i+0x1f4>
 8009ca8:	6825      	ldr	r5, [r4, #0]
 8009caa:	6808      	ldr	r0, [r1, #0]
 8009cac:	062e      	lsls	r6, r5, #24
 8009cae:	f100 0304 	add.w	r3, r0, #4
 8009cb2:	d50a      	bpl.n	8009cca <_printf_i+0xce>
 8009cb4:	6805      	ldr	r5, [r0, #0]
 8009cb6:	600b      	str	r3, [r1, #0]
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	da03      	bge.n	8009cc4 <_printf_i+0xc8>
 8009cbc:	232d      	movs	r3, #45	; 0x2d
 8009cbe:	426d      	negs	r5, r5
 8009cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc4:	485e      	ldr	r0, [pc, #376]	; (8009e40 <_printf_i+0x244>)
 8009cc6:	230a      	movs	r3, #10
 8009cc8:	e019      	b.n	8009cfe <_printf_i+0x102>
 8009cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009cce:	6805      	ldr	r5, [r0, #0]
 8009cd0:	600b      	str	r3, [r1, #0]
 8009cd2:	bf18      	it	ne
 8009cd4:	b22d      	sxthne	r5, r5
 8009cd6:	e7ef      	b.n	8009cb8 <_printf_i+0xbc>
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	6825      	ldr	r5, [r4, #0]
 8009cdc:	1d18      	adds	r0, r3, #4
 8009cde:	6008      	str	r0, [r1, #0]
 8009ce0:	0628      	lsls	r0, r5, #24
 8009ce2:	d501      	bpl.n	8009ce8 <_printf_i+0xec>
 8009ce4:	681d      	ldr	r5, [r3, #0]
 8009ce6:	e002      	b.n	8009cee <_printf_i+0xf2>
 8009ce8:	0669      	lsls	r1, r5, #25
 8009cea:	d5fb      	bpl.n	8009ce4 <_printf_i+0xe8>
 8009cec:	881d      	ldrh	r5, [r3, #0]
 8009cee:	4854      	ldr	r0, [pc, #336]	; (8009e40 <_printf_i+0x244>)
 8009cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2308      	moveq	r3, #8
 8009cf6:	230a      	movne	r3, #10
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cfe:	6866      	ldr	r6, [r4, #4]
 8009d00:	60a6      	str	r6, [r4, #8]
 8009d02:	2e00      	cmp	r6, #0
 8009d04:	bfa2      	ittt	ge
 8009d06:	6821      	ldrge	r1, [r4, #0]
 8009d08:	f021 0104 	bicge.w	r1, r1, #4
 8009d0c:	6021      	strge	r1, [r4, #0]
 8009d0e:	b90d      	cbnz	r5, 8009d14 <_printf_i+0x118>
 8009d10:	2e00      	cmp	r6, #0
 8009d12:	d04d      	beq.n	8009db0 <_printf_i+0x1b4>
 8009d14:	4616      	mov	r6, r2
 8009d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8009d1e:	5dc7      	ldrb	r7, [r0, r7]
 8009d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d24:	462f      	mov	r7, r5
 8009d26:	42bb      	cmp	r3, r7
 8009d28:	460d      	mov	r5, r1
 8009d2a:	d9f4      	bls.n	8009d16 <_printf_i+0x11a>
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d10b      	bne.n	8009d48 <_printf_i+0x14c>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	07df      	lsls	r7, r3, #31
 8009d34:	d508      	bpl.n	8009d48 <_printf_i+0x14c>
 8009d36:	6923      	ldr	r3, [r4, #16]
 8009d38:	6861      	ldr	r1, [r4, #4]
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	bfde      	ittt	le
 8009d3e:	2330      	movle	r3, #48	; 0x30
 8009d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d48:	1b92      	subs	r2, r2, r6
 8009d4a:	6122      	str	r2, [r4, #16]
 8009d4c:	f8cd a000 	str.w	sl, [sp]
 8009d50:	464b      	mov	r3, r9
 8009d52:	aa03      	add	r2, sp, #12
 8009d54:	4621      	mov	r1, r4
 8009d56:	4640      	mov	r0, r8
 8009d58:	f7ff fee2 	bl	8009b20 <_printf_common>
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	d14c      	bne.n	8009dfa <_printf_i+0x1fe>
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	b004      	add	sp, #16
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6a:	4835      	ldr	r0, [pc, #212]	; (8009e40 <_printf_i+0x244>)
 8009d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	680e      	ldr	r6, [r1, #0]
 8009d74:	061f      	lsls	r7, r3, #24
 8009d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d7a:	600e      	str	r6, [r1, #0]
 8009d7c:	d514      	bpl.n	8009da8 <_printf_i+0x1ac>
 8009d7e:	07d9      	lsls	r1, r3, #31
 8009d80:	bf44      	itt	mi
 8009d82:	f043 0320 	orrmi.w	r3, r3, #32
 8009d86:	6023      	strmi	r3, [r4, #0]
 8009d88:	b91d      	cbnz	r5, 8009d92 <_printf_i+0x196>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	f023 0320 	bic.w	r3, r3, #32
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	2310      	movs	r3, #16
 8009d94:	e7b0      	b.n	8009cf8 <_printf_i+0xfc>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	f043 0320 	orr.w	r3, r3, #32
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	2378      	movs	r3, #120	; 0x78
 8009da0:	4828      	ldr	r0, [pc, #160]	; (8009e44 <_printf_i+0x248>)
 8009da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da6:	e7e3      	b.n	8009d70 <_printf_i+0x174>
 8009da8:	065e      	lsls	r6, r3, #25
 8009daa:	bf48      	it	mi
 8009dac:	b2ad      	uxthmi	r5, r5
 8009dae:	e7e6      	b.n	8009d7e <_printf_i+0x182>
 8009db0:	4616      	mov	r6, r2
 8009db2:	e7bb      	b.n	8009d2c <_printf_i+0x130>
 8009db4:	680b      	ldr	r3, [r1, #0]
 8009db6:	6826      	ldr	r6, [r4, #0]
 8009db8:	6960      	ldr	r0, [r4, #20]
 8009dba:	1d1d      	adds	r5, r3, #4
 8009dbc:	600d      	str	r5, [r1, #0]
 8009dbe:	0635      	lsls	r5, r6, #24
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_i+0x1cc>
 8009dc4:	6018      	str	r0, [r3, #0]
 8009dc6:	e002      	b.n	8009dce <_printf_i+0x1d2>
 8009dc8:	0671      	lsls	r1, r6, #25
 8009dca:	d5fb      	bpl.n	8009dc4 <_printf_i+0x1c8>
 8009dcc:	8018      	strh	r0, [r3, #0]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6123      	str	r3, [r4, #16]
 8009dd2:	4616      	mov	r6, r2
 8009dd4:	e7ba      	b.n	8009d4c <_printf_i+0x150>
 8009dd6:	680b      	ldr	r3, [r1, #0]
 8009dd8:	1d1a      	adds	r2, r3, #4
 8009dda:	600a      	str	r2, [r1, #0]
 8009ddc:	681e      	ldr	r6, [r3, #0]
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	2100      	movs	r1, #0
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7f6 fa0c 	bl	8000200 <memchr>
 8009de8:	b108      	cbz	r0, 8009dee <_printf_i+0x1f2>
 8009dea:	1b80      	subs	r0, r0, r6
 8009dec:	6060      	str	r0, [r4, #4]
 8009dee:	6863      	ldr	r3, [r4, #4]
 8009df0:	6123      	str	r3, [r4, #16]
 8009df2:	2300      	movs	r3, #0
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df8:	e7a8      	b.n	8009d4c <_printf_i+0x150>
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4640      	mov	r0, r8
 8009e02:	47d0      	blx	sl
 8009e04:	3001      	adds	r0, #1
 8009e06:	d0ab      	beq.n	8009d60 <_printf_i+0x164>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	079b      	lsls	r3, r3, #30
 8009e0c:	d413      	bmi.n	8009e36 <_printf_i+0x23a>
 8009e0e:	68e0      	ldr	r0, [r4, #12]
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	4298      	cmp	r0, r3
 8009e14:	bfb8      	it	lt
 8009e16:	4618      	movlt	r0, r3
 8009e18:	e7a4      	b.n	8009d64 <_printf_i+0x168>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	4649      	mov	r1, r9
 8009e20:	4640      	mov	r0, r8
 8009e22:	47d0      	blx	sl
 8009e24:	3001      	adds	r0, #1
 8009e26:	d09b      	beq.n	8009d60 <_printf_i+0x164>
 8009e28:	3501      	adds	r5, #1
 8009e2a:	68e3      	ldr	r3, [r4, #12]
 8009e2c:	9903      	ldr	r1, [sp, #12]
 8009e2e:	1a5b      	subs	r3, r3, r1
 8009e30:	42ab      	cmp	r3, r5
 8009e32:	dcf2      	bgt.n	8009e1a <_printf_i+0x21e>
 8009e34:	e7eb      	b.n	8009e0e <_printf_i+0x212>
 8009e36:	2500      	movs	r5, #0
 8009e38:	f104 0619 	add.w	r6, r4, #25
 8009e3c:	e7f5      	b.n	8009e2a <_printf_i+0x22e>
 8009e3e:	bf00      	nop
 8009e40:	0800ea8a 	.word	0x0800ea8a
 8009e44:	0800ea9b 	.word	0x0800ea9b

08009e48 <__swbuf_r>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	460e      	mov	r6, r1
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	4605      	mov	r5, r0
 8009e50:	b118      	cbz	r0, 8009e5a <__swbuf_r+0x12>
 8009e52:	6983      	ldr	r3, [r0, #24]
 8009e54:	b90b      	cbnz	r3, 8009e5a <__swbuf_r+0x12>
 8009e56:	f001 f849 	bl	800aeec <__sinit>
 8009e5a:	4b21      	ldr	r3, [pc, #132]	; (8009ee0 <__swbuf_r+0x98>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	d12b      	bne.n	8009eb8 <__swbuf_r+0x70>
 8009e60:	686c      	ldr	r4, [r5, #4]
 8009e62:	69a3      	ldr	r3, [r4, #24]
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	071a      	lsls	r2, r3, #28
 8009e6a:	d52f      	bpl.n	8009ecc <__swbuf_r+0x84>
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	b36b      	cbz	r3, 8009ecc <__swbuf_r+0x84>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	6820      	ldr	r0, [r4, #0]
 8009e74:	1ac0      	subs	r0, r0, r3
 8009e76:	6963      	ldr	r3, [r4, #20]
 8009e78:	b2f6      	uxtb	r6, r6
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	4637      	mov	r7, r6
 8009e7e:	dc04      	bgt.n	8009e8a <__swbuf_r+0x42>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4628      	mov	r0, r5
 8009e84:	f000 ff9e 	bl	800adc4 <_fflush_r>
 8009e88:	bb30      	cbnz	r0, 8009ed8 <__swbuf_r+0x90>
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	6022      	str	r2, [r4, #0]
 8009e96:	701e      	strb	r6, [r3, #0]
 8009e98:	6963      	ldr	r3, [r4, #20]
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	4283      	cmp	r3, r0
 8009e9e:	d004      	beq.n	8009eaa <__swbuf_r+0x62>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d506      	bpl.n	8009eb4 <__swbuf_r+0x6c>
 8009ea6:	2e0a      	cmp	r6, #10
 8009ea8:	d104      	bne.n	8009eb4 <__swbuf_r+0x6c>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f000 ff89 	bl	800adc4 <_fflush_r>
 8009eb2:	b988      	cbnz	r0, 8009ed8 <__swbuf_r+0x90>
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <__swbuf_r+0x9c>)
 8009eba:	429c      	cmp	r4, r3
 8009ebc:	d101      	bne.n	8009ec2 <__swbuf_r+0x7a>
 8009ebe:	68ac      	ldr	r4, [r5, #8]
 8009ec0:	e7cf      	b.n	8009e62 <__swbuf_r+0x1a>
 8009ec2:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <__swbuf_r+0xa0>)
 8009ec4:	429c      	cmp	r4, r3
 8009ec6:	bf08      	it	eq
 8009ec8:	68ec      	ldreq	r4, [r5, #12]
 8009eca:	e7ca      	b.n	8009e62 <__swbuf_r+0x1a>
 8009ecc:	4621      	mov	r1, r4
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 f80c 	bl	8009eec <__swsetup_r>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d0cb      	beq.n	8009e70 <__swbuf_r+0x28>
 8009ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8009edc:	e7ea      	b.n	8009eb4 <__swbuf_r+0x6c>
 8009ede:	bf00      	nop
 8009ee0:	0800eb60 	.word	0x0800eb60
 8009ee4:	0800eb80 	.word	0x0800eb80
 8009ee8:	0800eb40 	.word	0x0800eb40

08009eec <__swsetup_r>:
 8009eec:	4b32      	ldr	r3, [pc, #200]	; (8009fb8 <__swsetup_r+0xcc>)
 8009eee:	b570      	push	{r4, r5, r6, lr}
 8009ef0:	681d      	ldr	r5, [r3, #0]
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	b125      	cbz	r5, 8009f02 <__swsetup_r+0x16>
 8009ef8:	69ab      	ldr	r3, [r5, #24]
 8009efa:	b913      	cbnz	r3, 8009f02 <__swsetup_r+0x16>
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 fff5 	bl	800aeec <__sinit>
 8009f02:	4b2e      	ldr	r3, [pc, #184]	; (8009fbc <__swsetup_r+0xd0>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	d10f      	bne.n	8009f28 <__swsetup_r+0x3c>
 8009f08:	686c      	ldr	r4, [r5, #4]
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f10:	0719      	lsls	r1, r3, #28
 8009f12:	d42c      	bmi.n	8009f6e <__swsetup_r+0x82>
 8009f14:	06dd      	lsls	r5, r3, #27
 8009f16:	d411      	bmi.n	8009f3c <__swsetup_r+0x50>
 8009f18:	2309      	movs	r3, #9
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	e03e      	b.n	8009fa6 <__swsetup_r+0xba>
 8009f28:	4b25      	ldr	r3, [pc, #148]	; (8009fc0 <__swsetup_r+0xd4>)
 8009f2a:	429c      	cmp	r4, r3
 8009f2c:	d101      	bne.n	8009f32 <__swsetup_r+0x46>
 8009f2e:	68ac      	ldr	r4, [r5, #8]
 8009f30:	e7eb      	b.n	8009f0a <__swsetup_r+0x1e>
 8009f32:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <__swsetup_r+0xd8>)
 8009f34:	429c      	cmp	r4, r3
 8009f36:	bf08      	it	eq
 8009f38:	68ec      	ldreq	r4, [r5, #12]
 8009f3a:	e7e6      	b.n	8009f0a <__swsetup_r+0x1e>
 8009f3c:	0758      	lsls	r0, r3, #29
 8009f3e:	d512      	bpl.n	8009f66 <__swsetup_r+0x7a>
 8009f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f42:	b141      	cbz	r1, 8009f56 <__swsetup_r+0x6a>
 8009f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d002      	beq.n	8009f52 <__swsetup_r+0x66>
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f001 fc6d 	bl	800b82c <_free_r>
 8009f52:	2300      	movs	r3, #0
 8009f54:	6363      	str	r3, [r4, #52]	; 0x34
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0308 	orr.w	r3, r3, #8
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b94b      	cbnz	r3, 8009f86 <__swsetup_r+0x9a>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7c:	d003      	beq.n	8009f86 <__swsetup_r+0x9a>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4630      	mov	r0, r6
 8009f82:	f001 f87d 	bl	800b080 <__smakebuf_r>
 8009f86:	89a0      	ldrh	r0, [r4, #12]
 8009f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8c:	f010 0301 	ands.w	r3, r0, #1
 8009f90:	d00a      	beq.n	8009fa8 <__swsetup_r+0xbc>
 8009f92:	2300      	movs	r3, #0
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	6963      	ldr	r3, [r4, #20]
 8009f98:	425b      	negs	r3, r3
 8009f9a:	61a3      	str	r3, [r4, #24]
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	b943      	cbnz	r3, 8009fb2 <__swsetup_r+0xc6>
 8009fa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fa4:	d1ba      	bne.n	8009f1c <__swsetup_r+0x30>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	0781      	lsls	r1, r0, #30
 8009faa:	bf58      	it	pl
 8009fac:	6963      	ldrpl	r3, [r4, #20]
 8009fae:	60a3      	str	r3, [r4, #8]
 8009fb0:	e7f4      	b.n	8009f9c <__swsetup_r+0xb0>
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e7f7      	b.n	8009fa6 <__swsetup_r+0xba>
 8009fb6:	bf00      	nop
 8009fb8:	20000064 	.word	0x20000064
 8009fbc:	0800eb60 	.word	0x0800eb60
 8009fc0:	0800eb80 	.word	0x0800eb80
 8009fc4:	0800eb40 	.word	0x0800eb40

08009fc8 <quorem>:
 8009fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	6903      	ldr	r3, [r0, #16]
 8009fce:	690c      	ldr	r4, [r1, #16]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	f2c0 8081 	blt.w	800a0da <quorem+0x112>
 8009fd8:	3c01      	subs	r4, #1
 8009fda:	f101 0814 	add.w	r8, r1, #20
 8009fde:	f100 0514 	add.w	r5, r0, #20
 8009fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ffc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a000:	d331      	bcc.n	800a066 <quorem+0x9e>
 800a002:	f04f 0e00 	mov.w	lr, #0
 800a006:	4640      	mov	r0, r8
 800a008:	46ac      	mov	ip, r5
 800a00a:	46f2      	mov	sl, lr
 800a00c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a010:	b293      	uxth	r3, r2
 800a012:	fb06 e303 	mla	r3, r6, r3, lr
 800a016:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	ebaa 0303 	sub.w	r3, sl, r3
 800a020:	0c12      	lsrs	r2, r2, #16
 800a022:	f8dc a000 	ldr.w	sl, [ip]
 800a026:	fb06 e202 	mla	r2, r6, r2, lr
 800a02a:	fa13 f38a 	uxtah	r3, r3, sl
 800a02e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a032:	fa1f fa82 	uxth.w	sl, r2
 800a036:	f8dc 2000 	ldr.w	r2, [ip]
 800a03a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a03e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a042:	b29b      	uxth	r3, r3
 800a044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a048:	4581      	cmp	r9, r0
 800a04a:	f84c 3b04 	str.w	r3, [ip], #4
 800a04e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a052:	d2db      	bcs.n	800a00c <quorem+0x44>
 800a054:	f855 300b 	ldr.w	r3, [r5, fp]
 800a058:	b92b      	cbnz	r3, 800a066 <quorem+0x9e>
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	3b04      	subs	r3, #4
 800a05e:	429d      	cmp	r5, r3
 800a060:	461a      	mov	r2, r3
 800a062:	d32e      	bcc.n	800a0c2 <quorem+0xfa>
 800a064:	613c      	str	r4, [r7, #16]
 800a066:	4638      	mov	r0, r7
 800a068:	f001 fad0 	bl	800b60c <__mcmp>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	db24      	blt.n	800a0ba <quorem+0xf2>
 800a070:	3601      	adds	r6, #1
 800a072:	4628      	mov	r0, r5
 800a074:	f04f 0c00 	mov.w	ip, #0
 800a078:	f858 2b04 	ldr.w	r2, [r8], #4
 800a07c:	f8d0 e000 	ldr.w	lr, [r0]
 800a080:	b293      	uxth	r3, r2
 800a082:	ebac 0303 	sub.w	r3, ip, r3
 800a086:	0c12      	lsrs	r2, r2, #16
 800a088:	fa13 f38e 	uxtah	r3, r3, lr
 800a08c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a094:	b29b      	uxth	r3, r3
 800a096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a09a:	45c1      	cmp	r9, r8
 800a09c:	f840 3b04 	str.w	r3, [r0], #4
 800a0a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0a4:	d2e8      	bcs.n	800a078 <quorem+0xb0>
 800a0a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ae:	b922      	cbnz	r2, 800a0ba <quorem+0xf2>
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	d30a      	bcc.n	800a0ce <quorem+0x106>
 800a0b8:	613c      	str	r4, [r7, #16]
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	b003      	add	sp, #12
 800a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	3b04      	subs	r3, #4
 800a0c6:	2a00      	cmp	r2, #0
 800a0c8:	d1cc      	bne.n	800a064 <quorem+0x9c>
 800a0ca:	3c01      	subs	r4, #1
 800a0cc:	e7c7      	b.n	800a05e <quorem+0x96>
 800a0ce:	6812      	ldr	r2, [r2, #0]
 800a0d0:	3b04      	subs	r3, #4
 800a0d2:	2a00      	cmp	r2, #0
 800a0d4:	d1f0      	bne.n	800a0b8 <quorem+0xf0>
 800a0d6:	3c01      	subs	r4, #1
 800a0d8:	e7eb      	b.n	800a0b2 <quorem+0xea>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e7ee      	b.n	800a0bc <quorem+0xf4>
	...

0800a0e0 <_dtoa_r>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	ed2d 8b02 	vpush	{d8}
 800a0e8:	ec57 6b10 	vmov	r6, r7, d0
 800a0ec:	b095      	sub	sp, #84	; 0x54
 800a0ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0f4:	9105      	str	r1, [sp, #20]
 800a0f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a100:	b975      	cbnz	r5, 800a120 <_dtoa_r+0x40>
 800a102:	2010      	movs	r0, #16
 800a104:	f000 fffc 	bl	800b100 <malloc>
 800a108:	4602      	mov	r2, r0
 800a10a:	6260      	str	r0, [r4, #36]	; 0x24
 800a10c:	b920      	cbnz	r0, 800a118 <_dtoa_r+0x38>
 800a10e:	4bb2      	ldr	r3, [pc, #712]	; (800a3d8 <_dtoa_r+0x2f8>)
 800a110:	21ea      	movs	r1, #234	; 0xea
 800a112:	48b2      	ldr	r0, [pc, #712]	; (800a3dc <_dtoa_r+0x2fc>)
 800a114:	f001 fc9a 	bl	800ba4c <__assert_func>
 800a118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a11c:	6005      	str	r5, [r0, #0]
 800a11e:	60c5      	str	r5, [r0, #12]
 800a120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a122:	6819      	ldr	r1, [r3, #0]
 800a124:	b151      	cbz	r1, 800a13c <_dtoa_r+0x5c>
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	604a      	str	r2, [r1, #4]
 800a12a:	2301      	movs	r3, #1
 800a12c:	4093      	lsls	r3, r2
 800a12e:	608b      	str	r3, [r1, #8]
 800a130:	4620      	mov	r0, r4
 800a132:	f001 f82d 	bl	800b190 <_Bfree>
 800a136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	1e3b      	subs	r3, r7, #0
 800a13e:	bfb9      	ittee	lt
 800a140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a144:	9303      	strlt	r3, [sp, #12]
 800a146:	2300      	movge	r3, #0
 800a148:	f8c8 3000 	strge.w	r3, [r8]
 800a14c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a150:	4ba3      	ldr	r3, [pc, #652]	; (800a3e0 <_dtoa_r+0x300>)
 800a152:	bfbc      	itt	lt
 800a154:	2201      	movlt	r2, #1
 800a156:	f8c8 2000 	strlt.w	r2, [r8]
 800a15a:	ea33 0309 	bics.w	r3, r3, r9
 800a15e:	d11b      	bne.n	800a198 <_dtoa_r+0xb8>
 800a160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a162:	f242 730f 	movw	r3, #9999	; 0x270f
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a16c:	4333      	orrs	r3, r6
 800a16e:	f000 857a 	beq.w	800ac66 <_dtoa_r+0xb86>
 800a172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a174:	b963      	cbnz	r3, 800a190 <_dtoa_r+0xb0>
 800a176:	4b9b      	ldr	r3, [pc, #620]	; (800a3e4 <_dtoa_r+0x304>)
 800a178:	e024      	b.n	800a1c4 <_dtoa_r+0xe4>
 800a17a:	4b9b      	ldr	r3, [pc, #620]	; (800a3e8 <_dtoa_r+0x308>)
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	3308      	adds	r3, #8
 800a180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	9800      	ldr	r0, [sp, #0]
 800a186:	b015      	add	sp, #84	; 0x54
 800a188:	ecbd 8b02 	vpop	{d8}
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	4b94      	ldr	r3, [pc, #592]	; (800a3e4 <_dtoa_r+0x304>)
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	3303      	adds	r3, #3
 800a196:	e7f3      	b.n	800a180 <_dtoa_r+0xa0>
 800a198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a19c:	2200      	movs	r2, #0
 800a19e:	ec51 0b17 	vmov	r0, r1, d7
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a1a8:	f7f6 fc9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1ac:	4680      	mov	r8, r0
 800a1ae:	b158      	cbz	r0, 800a1c8 <_dtoa_r+0xe8>
 800a1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8551 	beq.w	800ac60 <_dtoa_r+0xb80>
 800a1be:	488b      	ldr	r0, [pc, #556]	; (800a3ec <_dtoa_r+0x30c>)
 800a1c0:	6018      	str	r0, [r3, #0]
 800a1c2:	1e43      	subs	r3, r0, #1
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	e7dd      	b.n	800a184 <_dtoa_r+0xa4>
 800a1c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1cc:	aa12      	add	r2, sp, #72	; 0x48
 800a1ce:	a913      	add	r1, sp, #76	; 0x4c
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f001 fabf 	bl	800b754 <__d2b>
 800a1d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1da:	4683      	mov	fp, r0
 800a1dc:	2d00      	cmp	r5, #0
 800a1de:	d07c      	beq.n	800a2da <_dtoa_r+0x1fa>
 800a1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a1e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a1ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1fa:	4b7d      	ldr	r3, [pc, #500]	; (800a3f0 <_dtoa_r+0x310>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 f851 	bl	80002a8 <__aeabi_dsub>
 800a206:	a36e      	add	r3, pc, #440	; (adr r3, 800a3c0 <_dtoa_r+0x2e0>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7f6 fa04 	bl	8000618 <__aeabi_dmul>
 800a210:	a36d      	add	r3, pc, #436	; (adr r3, 800a3c8 <_dtoa_r+0x2e8>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 f849 	bl	80002ac <__adddf3>
 800a21a:	4606      	mov	r6, r0
 800a21c:	4628      	mov	r0, r5
 800a21e:	460f      	mov	r7, r1
 800a220:	f7f6 f990 	bl	8000544 <__aeabi_i2d>
 800a224:	a36a      	add	r3, pc, #424	; (adr r3, 800a3d0 <_dtoa_r+0x2f0>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f6 f9f5 	bl	8000618 <__aeabi_dmul>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f839 	bl	80002ac <__adddf3>
 800a23a:	4606      	mov	r6, r0
 800a23c:	460f      	mov	r7, r1
 800a23e:	f7f6 fc9b 	bl	8000b78 <__aeabi_d2iz>
 800a242:	2200      	movs	r2, #0
 800a244:	4682      	mov	sl, r0
 800a246:	2300      	movs	r3, #0
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f6 fc56 	bl	8000afc <__aeabi_dcmplt>
 800a250:	b148      	cbz	r0, 800a266 <_dtoa_r+0x186>
 800a252:	4650      	mov	r0, sl
 800a254:	f7f6 f976 	bl	8000544 <__aeabi_i2d>
 800a258:	4632      	mov	r2, r6
 800a25a:	463b      	mov	r3, r7
 800a25c:	f7f6 fc44 	bl	8000ae8 <__aeabi_dcmpeq>
 800a260:	b908      	cbnz	r0, 800a266 <_dtoa_r+0x186>
 800a262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a266:	f1ba 0f16 	cmp.w	sl, #22
 800a26a:	d854      	bhi.n	800a316 <_dtoa_r+0x236>
 800a26c:	4b61      	ldr	r3, [pc, #388]	; (800a3f4 <_dtoa_r+0x314>)
 800a26e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a27a:	f7f6 fc3f 	bl	8000afc <__aeabi_dcmplt>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d04b      	beq.n	800a31a <_dtoa_r+0x23a>
 800a282:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a286:	2300      	movs	r3, #0
 800a288:	930e      	str	r3, [sp, #56]	; 0x38
 800a28a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a28c:	1b5d      	subs	r5, r3, r5
 800a28e:	1e6b      	subs	r3, r5, #1
 800a290:	9304      	str	r3, [sp, #16]
 800a292:	bf43      	ittte	mi
 800a294:	2300      	movmi	r3, #0
 800a296:	f1c5 0801 	rsbmi	r8, r5, #1
 800a29a:	9304      	strmi	r3, [sp, #16]
 800a29c:	f04f 0800 	movpl.w	r8, #0
 800a2a0:	f1ba 0f00 	cmp.w	sl, #0
 800a2a4:	db3b      	blt.n	800a31e <_dtoa_r+0x23e>
 800a2a6:	9b04      	ldr	r3, [sp, #16]
 800a2a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a2ac:	4453      	add	r3, sl
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9306      	str	r3, [sp, #24]
 800a2b4:	9b05      	ldr	r3, [sp, #20]
 800a2b6:	2b09      	cmp	r3, #9
 800a2b8:	d869      	bhi.n	800a38e <_dtoa_r+0x2ae>
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	bfc4      	itt	gt
 800a2be:	3b04      	subgt	r3, #4
 800a2c0:	9305      	strgt	r3, [sp, #20]
 800a2c2:	9b05      	ldr	r3, [sp, #20]
 800a2c4:	f1a3 0302 	sub.w	r3, r3, #2
 800a2c8:	bfcc      	ite	gt
 800a2ca:	2500      	movgt	r5, #0
 800a2cc:	2501      	movle	r5, #1
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d869      	bhi.n	800a3a6 <_dtoa_r+0x2c6>
 800a2d2:	e8df f003 	tbb	[pc, r3]
 800a2d6:	4e2c      	.short	0x4e2c
 800a2d8:	5a4c      	.short	0x5a4c
 800a2da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a2de:	441d      	add	r5, r3
 800a2e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2e4:	2b20      	cmp	r3, #32
 800a2e6:	bfc1      	itttt	gt
 800a2e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2f8:	bfda      	itte	le
 800a2fa:	f1c3 0320 	rsble	r3, r3, #32
 800a2fe:	fa06 f003 	lslle.w	r0, r6, r3
 800a302:	4318      	orrgt	r0, r3
 800a304:	f7f6 f90e 	bl	8000524 <__aeabi_ui2d>
 800a308:	2301      	movs	r3, #1
 800a30a:	4606      	mov	r6, r0
 800a30c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a310:	3d01      	subs	r5, #1
 800a312:	9310      	str	r3, [sp, #64]	; 0x40
 800a314:	e771      	b.n	800a1fa <_dtoa_r+0x11a>
 800a316:	2301      	movs	r3, #1
 800a318:	e7b6      	b.n	800a288 <_dtoa_r+0x1a8>
 800a31a:	900e      	str	r0, [sp, #56]	; 0x38
 800a31c:	e7b5      	b.n	800a28a <_dtoa_r+0x1aa>
 800a31e:	f1ca 0300 	rsb	r3, sl, #0
 800a322:	9306      	str	r3, [sp, #24]
 800a324:	2300      	movs	r3, #0
 800a326:	eba8 080a 	sub.w	r8, r8, sl
 800a32a:	930d      	str	r3, [sp, #52]	; 0x34
 800a32c:	e7c2      	b.n	800a2b4 <_dtoa_r+0x1d4>
 800a32e:	2300      	movs	r3, #0
 800a330:	9308      	str	r3, [sp, #32]
 800a332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	dc39      	bgt.n	800a3ac <_dtoa_r+0x2cc>
 800a338:	f04f 0901 	mov.w	r9, #1
 800a33c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a340:	464b      	mov	r3, r9
 800a342:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a348:	2200      	movs	r2, #0
 800a34a:	6042      	str	r2, [r0, #4]
 800a34c:	2204      	movs	r2, #4
 800a34e:	f102 0614 	add.w	r6, r2, #20
 800a352:	429e      	cmp	r6, r3
 800a354:	6841      	ldr	r1, [r0, #4]
 800a356:	d92f      	bls.n	800a3b8 <_dtoa_r+0x2d8>
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fed9 	bl	800b110 <_Balloc>
 800a35e:	9000      	str	r0, [sp, #0]
 800a360:	2800      	cmp	r0, #0
 800a362:	d14b      	bne.n	800a3fc <_dtoa_r+0x31c>
 800a364:	4b24      	ldr	r3, [pc, #144]	; (800a3f8 <_dtoa_r+0x318>)
 800a366:	4602      	mov	r2, r0
 800a368:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a36c:	e6d1      	b.n	800a112 <_dtoa_r+0x32>
 800a36e:	2301      	movs	r3, #1
 800a370:	e7de      	b.n	800a330 <_dtoa_r+0x250>
 800a372:	2300      	movs	r3, #0
 800a374:	9308      	str	r3, [sp, #32]
 800a376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a378:	eb0a 0903 	add.w	r9, sl, r3
 800a37c:	f109 0301 	add.w	r3, r9, #1
 800a380:	2b01      	cmp	r3, #1
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	bfb8      	it	lt
 800a386:	2301      	movlt	r3, #1
 800a388:	e7dd      	b.n	800a346 <_dtoa_r+0x266>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e7f2      	b.n	800a374 <_dtoa_r+0x294>
 800a38e:	2501      	movs	r5, #1
 800a390:	2300      	movs	r3, #0
 800a392:	9305      	str	r3, [sp, #20]
 800a394:	9508      	str	r5, [sp, #32]
 800a396:	f04f 39ff 	mov.w	r9, #4294967295
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3a0:	2312      	movs	r3, #18
 800a3a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a4:	e7cf      	b.n	800a346 <_dtoa_r+0x266>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	9308      	str	r3, [sp, #32]
 800a3aa:	e7f4      	b.n	800a396 <_dtoa_r+0x2b6>
 800a3ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a3b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	e7c6      	b.n	800a346 <_dtoa_r+0x266>
 800a3b8:	3101      	adds	r1, #1
 800a3ba:	6041      	str	r1, [r0, #4]
 800a3bc:	0052      	lsls	r2, r2, #1
 800a3be:	e7c6      	b.n	800a34e <_dtoa_r+0x26e>
 800a3c0:	636f4361 	.word	0x636f4361
 800a3c4:	3fd287a7 	.word	0x3fd287a7
 800a3c8:	8b60c8b3 	.word	0x8b60c8b3
 800a3cc:	3fc68a28 	.word	0x3fc68a28
 800a3d0:	509f79fb 	.word	0x509f79fb
 800a3d4:	3fd34413 	.word	0x3fd34413
 800a3d8:	0800eab9 	.word	0x0800eab9
 800a3dc:	0800ead0 	.word	0x0800ead0
 800a3e0:	7ff00000 	.word	0x7ff00000
 800a3e4:	0800eab5 	.word	0x0800eab5
 800a3e8:	0800eaac 	.word	0x0800eaac
 800a3ec:	0800ea89 	.word	0x0800ea89
 800a3f0:	3ff80000 	.word	0x3ff80000
 800a3f4:	0800ec28 	.word	0x0800ec28
 800a3f8:	0800eb2f 	.word	0x0800eb2f
 800a3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3fe:	9a00      	ldr	r2, [sp, #0]
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	2b0e      	cmp	r3, #14
 800a406:	f200 80ad 	bhi.w	800a564 <_dtoa_r+0x484>
 800a40a:	2d00      	cmp	r5, #0
 800a40c:	f000 80aa 	beq.w	800a564 <_dtoa_r+0x484>
 800a410:	f1ba 0f00 	cmp.w	sl, #0
 800a414:	dd36      	ble.n	800a484 <_dtoa_r+0x3a4>
 800a416:	4ac3      	ldr	r2, [pc, #780]	; (800a724 <_dtoa_r+0x644>)
 800a418:	f00a 030f 	and.w	r3, sl, #15
 800a41c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a420:	ed93 7b00 	vldr	d7, [r3]
 800a424:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a428:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a42c:	eeb0 8a47 	vmov.f32	s16, s14
 800a430:	eef0 8a67 	vmov.f32	s17, s15
 800a434:	d016      	beq.n	800a464 <_dtoa_r+0x384>
 800a436:	4bbc      	ldr	r3, [pc, #752]	; (800a728 <_dtoa_r+0x648>)
 800a438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a43c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a440:	f7f6 fa14 	bl	800086c <__aeabi_ddiv>
 800a444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a448:	f007 070f 	and.w	r7, r7, #15
 800a44c:	2503      	movs	r5, #3
 800a44e:	4eb6      	ldr	r6, [pc, #728]	; (800a728 <_dtoa_r+0x648>)
 800a450:	b957      	cbnz	r7, 800a468 <_dtoa_r+0x388>
 800a452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a456:	ec53 2b18 	vmov	r2, r3, d8
 800a45a:	f7f6 fa07 	bl	800086c <__aeabi_ddiv>
 800a45e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a462:	e029      	b.n	800a4b8 <_dtoa_r+0x3d8>
 800a464:	2502      	movs	r5, #2
 800a466:	e7f2      	b.n	800a44e <_dtoa_r+0x36e>
 800a468:	07f9      	lsls	r1, r7, #31
 800a46a:	d508      	bpl.n	800a47e <_dtoa_r+0x39e>
 800a46c:	ec51 0b18 	vmov	r0, r1, d8
 800a470:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a474:	f7f6 f8d0 	bl	8000618 <__aeabi_dmul>
 800a478:	ec41 0b18 	vmov	d8, r0, r1
 800a47c:	3501      	adds	r5, #1
 800a47e:	107f      	asrs	r7, r7, #1
 800a480:	3608      	adds	r6, #8
 800a482:	e7e5      	b.n	800a450 <_dtoa_r+0x370>
 800a484:	f000 80a6 	beq.w	800a5d4 <_dtoa_r+0x4f4>
 800a488:	f1ca 0600 	rsb	r6, sl, #0
 800a48c:	4ba5      	ldr	r3, [pc, #660]	; (800a724 <_dtoa_r+0x644>)
 800a48e:	4fa6      	ldr	r7, [pc, #664]	; (800a728 <_dtoa_r+0x648>)
 800a490:	f006 020f 	and.w	r2, r6, #15
 800a494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4a0:	f7f6 f8ba 	bl	8000618 <__aeabi_dmul>
 800a4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a8:	1136      	asrs	r6, r6, #4
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2502      	movs	r5, #2
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	f040 8085 	bne.w	800a5be <_dtoa_r+0x4de>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1d2      	bne.n	800a45e <_dtoa_r+0x37e>
 800a4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 808c 	beq.w	800a5d8 <_dtoa_r+0x4f8>
 800a4c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4c4:	4b99      	ldr	r3, [pc, #612]	; (800a72c <_dtoa_r+0x64c>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f6 fb16 	bl	8000afc <__aeabi_dcmplt>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	f000 8081 	beq.w	800a5d8 <_dtoa_r+0x4f8>
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d07d      	beq.n	800a5d8 <_dtoa_r+0x4f8>
 800a4dc:	f1b9 0f00 	cmp.w	r9, #0
 800a4e0:	dd3c      	ble.n	800a55c <_dtoa_r+0x47c>
 800a4e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4b91      	ldr	r3, [pc, #580]	; (800a730 <_dtoa_r+0x650>)
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	f7f6 f892 	bl	8000618 <__aeabi_dmul>
 800a4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a4fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a502:	4628      	mov	r0, r5
 800a504:	f7f6 f81e 	bl	8000544 <__aeabi_i2d>
 800a508:	4632      	mov	r2, r6
 800a50a:	463b      	mov	r3, r7
 800a50c:	f7f6 f884 	bl	8000618 <__aeabi_dmul>
 800a510:	4b88      	ldr	r3, [pc, #544]	; (800a734 <_dtoa_r+0x654>)
 800a512:	2200      	movs	r2, #0
 800a514:	f7f5 feca 	bl	80002ac <__adddf3>
 800a518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a51c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a520:	9303      	str	r3, [sp, #12]
 800a522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a524:	2b00      	cmp	r3, #0
 800a526:	d15c      	bne.n	800a5e2 <_dtoa_r+0x502>
 800a528:	4b83      	ldr	r3, [pc, #524]	; (800a738 <_dtoa_r+0x658>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 feba 	bl	80002a8 <__aeabi_dsub>
 800a534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a538:	4606      	mov	r6, r0
 800a53a:	460f      	mov	r7, r1
 800a53c:	f7f6 fafc 	bl	8000b38 <__aeabi_dcmpgt>
 800a540:	2800      	cmp	r0, #0
 800a542:	f040 8296 	bne.w	800aa72 <_dtoa_r+0x992>
 800a546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a54a:	4630      	mov	r0, r6
 800a54c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a550:	4639      	mov	r1, r7
 800a552:	f7f6 fad3 	bl	8000afc <__aeabi_dcmplt>
 800a556:	2800      	cmp	r0, #0
 800a558:	f040 8288 	bne.w	800aa6c <_dtoa_r+0x98c>
 800a55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a566:	2b00      	cmp	r3, #0
 800a568:	f2c0 8158 	blt.w	800a81c <_dtoa_r+0x73c>
 800a56c:	f1ba 0f0e 	cmp.w	sl, #14
 800a570:	f300 8154 	bgt.w	800a81c <_dtoa_r+0x73c>
 800a574:	4b6b      	ldr	r3, [pc, #428]	; (800a724 <_dtoa_r+0x644>)
 800a576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a57a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a580:	2b00      	cmp	r3, #0
 800a582:	f280 80e3 	bge.w	800a74c <_dtoa_r+0x66c>
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f300 80df 	bgt.w	800a74c <_dtoa_r+0x66c>
 800a58e:	f040 826d 	bne.w	800aa6c <_dtoa_r+0x98c>
 800a592:	4b69      	ldr	r3, [pc, #420]	; (800a738 <_dtoa_r+0x658>)
 800a594:	2200      	movs	r2, #0
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f6 f83d 	bl	8000618 <__aeabi_dmul>
 800a59e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a2:	f7f6 fabf 	bl	8000b24 <__aeabi_dcmpge>
 800a5a6:	9e01      	ldr	r6, [sp, #4]
 800a5a8:	4637      	mov	r7, r6
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f040 8243 	bne.w	800aa36 <_dtoa_r+0x956>
 800a5b0:	9d00      	ldr	r5, [sp, #0]
 800a5b2:	2331      	movs	r3, #49	; 0x31
 800a5b4:	f805 3b01 	strb.w	r3, [r5], #1
 800a5b8:	f10a 0a01 	add.w	sl, sl, #1
 800a5bc:	e23f      	b.n	800aa3e <_dtoa_r+0x95e>
 800a5be:	07f2      	lsls	r2, r6, #31
 800a5c0:	d505      	bpl.n	800a5ce <_dtoa_r+0x4ee>
 800a5c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c6:	f7f6 f827 	bl	8000618 <__aeabi_dmul>
 800a5ca:	3501      	adds	r5, #1
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	1076      	asrs	r6, r6, #1
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	e76c      	b.n	800a4ae <_dtoa_r+0x3ce>
 800a5d4:	2502      	movs	r5, #2
 800a5d6:	e76f      	b.n	800a4b8 <_dtoa_r+0x3d8>
 800a5d8:	9b01      	ldr	r3, [sp, #4]
 800a5da:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5de:	930c      	str	r3, [sp, #48]	; 0x30
 800a5e0:	e78d      	b.n	800a4fe <_dtoa_r+0x41e>
 800a5e2:	9900      	ldr	r1, [sp, #0]
 800a5e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5e8:	4b4e      	ldr	r3, [pc, #312]	; (800a724 <_dtoa_r+0x644>)
 800a5ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5ee:	4401      	add	r1, r0
 800a5f0:	9102      	str	r1, [sp, #8]
 800a5f2:	9908      	ldr	r1, [sp, #32]
 800a5f4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5f8:	eef0 8a67 	vmov.f32	s17, s15
 800a5fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a604:	2900      	cmp	r1, #0
 800a606:	d045      	beq.n	800a694 <_dtoa_r+0x5b4>
 800a608:	494c      	ldr	r1, [pc, #304]	; (800a73c <_dtoa_r+0x65c>)
 800a60a:	2000      	movs	r0, #0
 800a60c:	f7f6 f92e 	bl	800086c <__aeabi_ddiv>
 800a610:	ec53 2b18 	vmov	r2, r3, d8
 800a614:	f7f5 fe48 	bl	80002a8 <__aeabi_dsub>
 800a618:	9d00      	ldr	r5, [sp, #0]
 800a61a:	ec41 0b18 	vmov	d8, r0, r1
 800a61e:	4639      	mov	r1, r7
 800a620:	4630      	mov	r0, r6
 800a622:	f7f6 faa9 	bl	8000b78 <__aeabi_d2iz>
 800a626:	900c      	str	r0, [sp, #48]	; 0x30
 800a628:	f7f5 ff8c 	bl	8000544 <__aeabi_i2d>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f5 fe38 	bl	80002a8 <__aeabi_dsub>
 800a638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a63a:	3330      	adds	r3, #48	; 0x30
 800a63c:	f805 3b01 	strb.w	r3, [r5], #1
 800a640:	ec53 2b18 	vmov	r2, r3, d8
 800a644:	4606      	mov	r6, r0
 800a646:	460f      	mov	r7, r1
 800a648:	f7f6 fa58 	bl	8000afc <__aeabi_dcmplt>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d165      	bne.n	800a71c <_dtoa_r+0x63c>
 800a650:	4632      	mov	r2, r6
 800a652:	463b      	mov	r3, r7
 800a654:	4935      	ldr	r1, [pc, #212]	; (800a72c <_dtoa_r+0x64c>)
 800a656:	2000      	movs	r0, #0
 800a658:	f7f5 fe26 	bl	80002a8 <__aeabi_dsub>
 800a65c:	ec53 2b18 	vmov	r2, r3, d8
 800a660:	f7f6 fa4c 	bl	8000afc <__aeabi_dcmplt>
 800a664:	2800      	cmp	r0, #0
 800a666:	f040 80b9 	bne.w	800a7dc <_dtoa_r+0x6fc>
 800a66a:	9b02      	ldr	r3, [sp, #8]
 800a66c:	429d      	cmp	r5, r3
 800a66e:	f43f af75 	beq.w	800a55c <_dtoa_r+0x47c>
 800a672:	4b2f      	ldr	r3, [pc, #188]	; (800a730 <_dtoa_r+0x650>)
 800a674:	ec51 0b18 	vmov	r0, r1, d8
 800a678:	2200      	movs	r2, #0
 800a67a:	f7f5 ffcd 	bl	8000618 <__aeabi_dmul>
 800a67e:	4b2c      	ldr	r3, [pc, #176]	; (800a730 <_dtoa_r+0x650>)
 800a680:	ec41 0b18 	vmov	d8, r0, r1
 800a684:	2200      	movs	r2, #0
 800a686:	4630      	mov	r0, r6
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f5 ffc5 	bl	8000618 <__aeabi_dmul>
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	e7c4      	b.n	800a61e <_dtoa_r+0x53e>
 800a694:	ec51 0b17 	vmov	r0, r1, d7
 800a698:	f7f5 ffbe 	bl	8000618 <__aeabi_dmul>
 800a69c:	9b02      	ldr	r3, [sp, #8]
 800a69e:	9d00      	ldr	r5, [sp, #0]
 800a6a0:	930c      	str	r3, [sp, #48]	; 0x30
 800a6a2:	ec41 0b18 	vmov	d8, r0, r1
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7f6 fa65 	bl	8000b78 <__aeabi_d2iz>
 800a6ae:	9011      	str	r0, [sp, #68]	; 0x44
 800a6b0:	f7f5 ff48 	bl	8000544 <__aeabi_i2d>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	f7f5 fdf4 	bl	80002a8 <__aeabi_dsub>
 800a6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6c2:	3330      	adds	r3, #48	; 0x30
 800a6c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	429d      	cmp	r5, r3
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	f04f 0200 	mov.w	r2, #0
 800a6d4:	d134      	bne.n	800a740 <_dtoa_r+0x660>
 800a6d6:	4b19      	ldr	r3, [pc, #100]	; (800a73c <_dtoa_r+0x65c>)
 800a6d8:	ec51 0b18 	vmov	r0, r1, d8
 800a6dc:	f7f5 fde6 	bl	80002ac <__adddf3>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f6 fa26 	bl	8000b38 <__aeabi_dcmpgt>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d175      	bne.n	800a7dc <_dtoa_r+0x6fc>
 800a6f0:	ec53 2b18 	vmov	r2, r3, d8
 800a6f4:	4911      	ldr	r1, [pc, #68]	; (800a73c <_dtoa_r+0x65c>)
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f7f5 fdd6 	bl	80002a8 <__aeabi_dsub>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f6 f9fa 	bl	8000afc <__aeabi_dcmplt>
 800a708:	2800      	cmp	r0, #0
 800a70a:	f43f af27 	beq.w	800a55c <_dtoa_r+0x47c>
 800a70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a710:	1e6b      	subs	r3, r5, #1
 800a712:	930c      	str	r3, [sp, #48]	; 0x30
 800a714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a718:	2b30      	cmp	r3, #48	; 0x30
 800a71a:	d0f8      	beq.n	800a70e <_dtoa_r+0x62e>
 800a71c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a720:	e04a      	b.n	800a7b8 <_dtoa_r+0x6d8>
 800a722:	bf00      	nop
 800a724:	0800ec28 	.word	0x0800ec28
 800a728:	0800ec00 	.word	0x0800ec00
 800a72c:	3ff00000 	.word	0x3ff00000
 800a730:	40240000 	.word	0x40240000
 800a734:	401c0000 	.word	0x401c0000
 800a738:	40140000 	.word	0x40140000
 800a73c:	3fe00000 	.word	0x3fe00000
 800a740:	4baf      	ldr	r3, [pc, #700]	; (800aa00 <_dtoa_r+0x920>)
 800a742:	f7f5 ff69 	bl	8000618 <__aeabi_dmul>
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	e7ac      	b.n	800a6a6 <_dtoa_r+0x5c6>
 800a74c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a750:	9d00      	ldr	r5, [sp, #0]
 800a752:	4642      	mov	r2, r8
 800a754:	464b      	mov	r3, r9
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f6 f887 	bl	800086c <__aeabi_ddiv>
 800a75e:	f7f6 fa0b 	bl	8000b78 <__aeabi_d2iz>
 800a762:	9002      	str	r0, [sp, #8]
 800a764:	f7f5 feee 	bl	8000544 <__aeabi_i2d>
 800a768:	4642      	mov	r2, r8
 800a76a:	464b      	mov	r3, r9
 800a76c:	f7f5 ff54 	bl	8000618 <__aeabi_dmul>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4630      	mov	r0, r6
 800a776:	4639      	mov	r1, r7
 800a778:	f7f5 fd96 	bl	80002a8 <__aeabi_dsub>
 800a77c:	9e02      	ldr	r6, [sp, #8]
 800a77e:	9f01      	ldr	r7, [sp, #4]
 800a780:	3630      	adds	r6, #48	; 0x30
 800a782:	f805 6b01 	strb.w	r6, [r5], #1
 800a786:	9e00      	ldr	r6, [sp, #0]
 800a788:	1bae      	subs	r6, r5, r6
 800a78a:	42b7      	cmp	r7, r6
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	d137      	bne.n	800a802 <_dtoa_r+0x722>
 800a792:	f7f5 fd8b 	bl	80002ac <__adddf3>
 800a796:	4642      	mov	r2, r8
 800a798:	464b      	mov	r3, r9
 800a79a:	4606      	mov	r6, r0
 800a79c:	460f      	mov	r7, r1
 800a79e:	f7f6 f9cb 	bl	8000b38 <__aeabi_dcmpgt>
 800a7a2:	b9c8      	cbnz	r0, 800a7d8 <_dtoa_r+0x6f8>
 800a7a4:	4642      	mov	r2, r8
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	f7f6 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7b0:	b110      	cbz	r0, 800a7b8 <_dtoa_r+0x6d8>
 800a7b2:	9b02      	ldr	r3, [sp, #8]
 800a7b4:	07d9      	lsls	r1, r3, #31
 800a7b6:	d40f      	bmi.n	800a7d8 <_dtoa_r+0x6f8>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4659      	mov	r1, fp
 800a7bc:	f000 fce8 	bl	800b190 <_Bfree>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	702b      	strb	r3, [r5, #0]
 800a7c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7c6:	f10a 0001 	add.w	r0, sl, #1
 800a7ca:	6018      	str	r0, [r3, #0]
 800a7cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f43f acd8 	beq.w	800a184 <_dtoa_r+0xa4>
 800a7d4:	601d      	str	r5, [r3, #0]
 800a7d6:	e4d5      	b.n	800a184 <_dtoa_r+0xa4>
 800a7d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7dc:	462b      	mov	r3, r5
 800a7de:	461d      	mov	r5, r3
 800a7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7e4:	2a39      	cmp	r2, #57	; 0x39
 800a7e6:	d108      	bne.n	800a7fa <_dtoa_r+0x71a>
 800a7e8:	9a00      	ldr	r2, [sp, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d1f7      	bne.n	800a7de <_dtoa_r+0x6fe>
 800a7ee:	9a07      	ldr	r2, [sp, #28]
 800a7f0:	9900      	ldr	r1, [sp, #0]
 800a7f2:	3201      	adds	r2, #1
 800a7f4:	9207      	str	r2, [sp, #28]
 800a7f6:	2230      	movs	r2, #48	; 0x30
 800a7f8:	700a      	strb	r2, [r1, #0]
 800a7fa:	781a      	ldrb	r2, [r3, #0]
 800a7fc:	3201      	adds	r2, #1
 800a7fe:	701a      	strb	r2, [r3, #0]
 800a800:	e78c      	b.n	800a71c <_dtoa_r+0x63c>
 800a802:	4b7f      	ldr	r3, [pc, #508]	; (800aa00 <_dtoa_r+0x920>)
 800a804:	2200      	movs	r2, #0
 800a806:	f7f5 ff07 	bl	8000618 <__aeabi_dmul>
 800a80a:	2200      	movs	r2, #0
 800a80c:	2300      	movs	r3, #0
 800a80e:	4606      	mov	r6, r0
 800a810:	460f      	mov	r7, r1
 800a812:	f7f6 f969 	bl	8000ae8 <__aeabi_dcmpeq>
 800a816:	2800      	cmp	r0, #0
 800a818:	d09b      	beq.n	800a752 <_dtoa_r+0x672>
 800a81a:	e7cd      	b.n	800a7b8 <_dtoa_r+0x6d8>
 800a81c:	9a08      	ldr	r2, [sp, #32]
 800a81e:	2a00      	cmp	r2, #0
 800a820:	f000 80c4 	beq.w	800a9ac <_dtoa_r+0x8cc>
 800a824:	9a05      	ldr	r2, [sp, #20]
 800a826:	2a01      	cmp	r2, #1
 800a828:	f300 80a8 	bgt.w	800a97c <_dtoa_r+0x89c>
 800a82c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a82e:	2a00      	cmp	r2, #0
 800a830:	f000 80a0 	beq.w	800a974 <_dtoa_r+0x894>
 800a834:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a838:	9e06      	ldr	r6, [sp, #24]
 800a83a:	4645      	mov	r5, r8
 800a83c:	9a04      	ldr	r2, [sp, #16]
 800a83e:	2101      	movs	r1, #1
 800a840:	441a      	add	r2, r3
 800a842:	4620      	mov	r0, r4
 800a844:	4498      	add	r8, r3
 800a846:	9204      	str	r2, [sp, #16]
 800a848:	f000 fd5e 	bl	800b308 <__i2b>
 800a84c:	4607      	mov	r7, r0
 800a84e:	2d00      	cmp	r5, #0
 800a850:	dd0b      	ble.n	800a86a <_dtoa_r+0x78a>
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd08      	ble.n	800a86a <_dtoa_r+0x78a>
 800a858:	42ab      	cmp	r3, r5
 800a85a:	9a04      	ldr	r2, [sp, #16]
 800a85c:	bfa8      	it	ge
 800a85e:	462b      	movge	r3, r5
 800a860:	eba8 0803 	sub.w	r8, r8, r3
 800a864:	1aed      	subs	r5, r5, r3
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	9b06      	ldr	r3, [sp, #24]
 800a86c:	b1fb      	cbz	r3, 800a8ae <_dtoa_r+0x7ce>
 800a86e:	9b08      	ldr	r3, [sp, #32]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 809f 	beq.w	800a9b4 <_dtoa_r+0x8d4>
 800a876:	2e00      	cmp	r6, #0
 800a878:	dd11      	ble.n	800a89e <_dtoa_r+0x7be>
 800a87a:	4639      	mov	r1, r7
 800a87c:	4632      	mov	r2, r6
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 fdfe 	bl	800b480 <__pow5mult>
 800a884:	465a      	mov	r2, fp
 800a886:	4601      	mov	r1, r0
 800a888:	4607      	mov	r7, r0
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fd52 	bl	800b334 <__multiply>
 800a890:	4659      	mov	r1, fp
 800a892:	9007      	str	r0, [sp, #28]
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fc7b 	bl	800b190 <_Bfree>
 800a89a:	9b07      	ldr	r3, [sp, #28]
 800a89c:	469b      	mov	fp, r3
 800a89e:	9b06      	ldr	r3, [sp, #24]
 800a8a0:	1b9a      	subs	r2, r3, r6
 800a8a2:	d004      	beq.n	800a8ae <_dtoa_r+0x7ce>
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 fdea 	bl	800b480 <__pow5mult>
 800a8ac:	4683      	mov	fp, r0
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fd29 	bl	800b308 <__i2b>
 800a8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	dd7c      	ble.n	800a9b8 <_dtoa_r+0x8d8>
 800a8be:	461a      	mov	r2, r3
 800a8c0:	4601      	mov	r1, r0
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fddc 	bl	800b480 <__pow5mult>
 800a8c8:	9b05      	ldr	r3, [sp, #20]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	dd76      	ble.n	800a9be <_dtoa_r+0x8de>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9306      	str	r3, [sp, #24]
 800a8d4:	6933      	ldr	r3, [r6, #16]
 800a8d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8da:	6918      	ldr	r0, [r3, #16]
 800a8dc:	f000 fcc4 	bl	800b268 <__hi0bits>
 800a8e0:	f1c0 0020 	rsb	r0, r0, #32
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	4418      	add	r0, r3
 800a8e8:	f010 001f 	ands.w	r0, r0, #31
 800a8ec:	f000 8086 	beq.w	800a9fc <_dtoa_r+0x91c>
 800a8f0:	f1c0 0320 	rsb	r3, r0, #32
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	dd7f      	ble.n	800a9f8 <_dtoa_r+0x918>
 800a8f8:	f1c0 001c 	rsb	r0, r0, #28
 800a8fc:	9b04      	ldr	r3, [sp, #16]
 800a8fe:	4403      	add	r3, r0
 800a900:	4480      	add	r8, r0
 800a902:	4405      	add	r5, r0
 800a904:	9304      	str	r3, [sp, #16]
 800a906:	f1b8 0f00 	cmp.w	r8, #0
 800a90a:	dd05      	ble.n	800a918 <_dtoa_r+0x838>
 800a90c:	4659      	mov	r1, fp
 800a90e:	4642      	mov	r2, r8
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fe0f 	bl	800b534 <__lshift>
 800a916:	4683      	mov	fp, r0
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dd05      	ble.n	800a92a <_dtoa_r+0x84a>
 800a91e:	4631      	mov	r1, r6
 800a920:	461a      	mov	r2, r3
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fe06 	bl	800b534 <__lshift>
 800a928:	4606      	mov	r6, r0
 800a92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d069      	beq.n	800aa04 <_dtoa_r+0x924>
 800a930:	4631      	mov	r1, r6
 800a932:	4658      	mov	r0, fp
 800a934:	f000 fe6a 	bl	800b60c <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	da63      	bge.n	800aa04 <_dtoa_r+0x924>
 800a93c:	2300      	movs	r3, #0
 800a93e:	4659      	mov	r1, fp
 800a940:	220a      	movs	r2, #10
 800a942:	4620      	mov	r0, r4
 800a944:	f000 fc46 	bl	800b1d4 <__multadd>
 800a948:	9b08      	ldr	r3, [sp, #32]
 800a94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a94e:	4683      	mov	fp, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 818f 	beq.w	800ac74 <_dtoa_r+0xb94>
 800a956:	4639      	mov	r1, r7
 800a958:	2300      	movs	r3, #0
 800a95a:	220a      	movs	r2, #10
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 fc39 	bl	800b1d4 <__multadd>
 800a962:	f1b9 0f00 	cmp.w	r9, #0
 800a966:	4607      	mov	r7, r0
 800a968:	f300 808e 	bgt.w	800aa88 <_dtoa_r+0x9a8>
 800a96c:	9b05      	ldr	r3, [sp, #20]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	dc50      	bgt.n	800aa14 <_dtoa_r+0x934>
 800a972:	e089      	b.n	800aa88 <_dtoa_r+0x9a8>
 800a974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a97a:	e75d      	b.n	800a838 <_dtoa_r+0x758>
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	1e5e      	subs	r6, r3, #1
 800a980:	9b06      	ldr	r3, [sp, #24]
 800a982:	42b3      	cmp	r3, r6
 800a984:	bfbf      	itttt	lt
 800a986:	9b06      	ldrlt	r3, [sp, #24]
 800a988:	9606      	strlt	r6, [sp, #24]
 800a98a:	1af2      	sublt	r2, r6, r3
 800a98c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a98e:	bfb6      	itet	lt
 800a990:	189b      	addlt	r3, r3, r2
 800a992:	1b9e      	subge	r6, r3, r6
 800a994:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	bfb8      	it	lt
 800a99a:	2600      	movlt	r6, #0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfb5      	itete	lt
 800a9a0:	eba8 0503 	sublt.w	r5, r8, r3
 800a9a4:	9b01      	ldrge	r3, [sp, #4]
 800a9a6:	2300      	movlt	r3, #0
 800a9a8:	4645      	movge	r5, r8
 800a9aa:	e747      	b.n	800a83c <_dtoa_r+0x75c>
 800a9ac:	9e06      	ldr	r6, [sp, #24]
 800a9ae:	9f08      	ldr	r7, [sp, #32]
 800a9b0:	4645      	mov	r5, r8
 800a9b2:	e74c      	b.n	800a84e <_dtoa_r+0x76e>
 800a9b4:	9a06      	ldr	r2, [sp, #24]
 800a9b6:	e775      	b.n	800a8a4 <_dtoa_r+0x7c4>
 800a9b8:	9b05      	ldr	r3, [sp, #20]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	dc18      	bgt.n	800a9f0 <_dtoa_r+0x910>
 800a9be:	9b02      	ldr	r3, [sp, #8]
 800a9c0:	b9b3      	cbnz	r3, 800a9f0 <_dtoa_r+0x910>
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9c8:	b9a3      	cbnz	r3, 800a9f4 <_dtoa_r+0x914>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9d0:	0d1b      	lsrs	r3, r3, #20
 800a9d2:	051b      	lsls	r3, r3, #20
 800a9d4:	b12b      	cbz	r3, 800a9e2 <_dtoa_r+0x902>
 800a9d6:	9b04      	ldr	r3, [sp, #16]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	f108 0801 	add.w	r8, r8, #1
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	9306      	str	r3, [sp, #24]
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f47f af74 	bne.w	800a8d4 <_dtoa_r+0x7f4>
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	e779      	b.n	800a8e4 <_dtoa_r+0x804>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	e7f6      	b.n	800a9e2 <_dtoa_r+0x902>
 800a9f4:	9b02      	ldr	r3, [sp, #8]
 800a9f6:	e7f4      	b.n	800a9e2 <_dtoa_r+0x902>
 800a9f8:	d085      	beq.n	800a906 <_dtoa_r+0x826>
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	301c      	adds	r0, #28
 800a9fe:	e77d      	b.n	800a8fc <_dtoa_r+0x81c>
 800aa00:	40240000 	.word	0x40240000
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dc38      	bgt.n	800aa7c <_dtoa_r+0x99c>
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	dd35      	ble.n	800aa7c <_dtoa_r+0x99c>
 800aa10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa14:	f1b9 0f00 	cmp.w	r9, #0
 800aa18:	d10d      	bne.n	800aa36 <_dtoa_r+0x956>
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	464b      	mov	r3, r9
 800aa1e:	2205      	movs	r2, #5
 800aa20:	4620      	mov	r0, r4
 800aa22:	f000 fbd7 	bl	800b1d4 <__multadd>
 800aa26:	4601      	mov	r1, r0
 800aa28:	4606      	mov	r6, r0
 800aa2a:	4658      	mov	r0, fp
 800aa2c:	f000 fdee 	bl	800b60c <__mcmp>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f73f adbd 	bgt.w	800a5b0 <_dtoa_r+0x4d0>
 800aa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa38:	9d00      	ldr	r5, [sp, #0]
 800aa3a:	ea6f 0a03 	mvn.w	sl, r3
 800aa3e:	f04f 0800 	mov.w	r8, #0
 800aa42:	4631      	mov	r1, r6
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 fba3 	bl	800b190 <_Bfree>
 800aa4a:	2f00      	cmp	r7, #0
 800aa4c:	f43f aeb4 	beq.w	800a7b8 <_dtoa_r+0x6d8>
 800aa50:	f1b8 0f00 	cmp.w	r8, #0
 800aa54:	d005      	beq.n	800aa62 <_dtoa_r+0x982>
 800aa56:	45b8      	cmp	r8, r7
 800aa58:	d003      	beq.n	800aa62 <_dtoa_r+0x982>
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fb97 	bl	800b190 <_Bfree>
 800aa62:	4639      	mov	r1, r7
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fb93 	bl	800b190 <_Bfree>
 800aa6a:	e6a5      	b.n	800a7b8 <_dtoa_r+0x6d8>
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	4637      	mov	r7, r6
 800aa70:	e7e1      	b.n	800aa36 <_dtoa_r+0x956>
 800aa72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa78:	4637      	mov	r7, r6
 800aa7a:	e599      	b.n	800a5b0 <_dtoa_r+0x4d0>
 800aa7c:	9b08      	ldr	r3, [sp, #32]
 800aa7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 80fd 	beq.w	800ac82 <_dtoa_r+0xba2>
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	dd05      	ble.n	800aa98 <_dtoa_r+0x9b8>
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fd4f 	bl	800b534 <__lshift>
 800aa96:	4607      	mov	r7, r0
 800aa98:	9b06      	ldr	r3, [sp, #24]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d05c      	beq.n	800ab58 <_dtoa_r+0xa78>
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 fb35 	bl	800b110 <_Balloc>
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	b928      	cbnz	r0, 800aab6 <_dtoa_r+0x9d6>
 800aaaa:	4b80      	ldr	r3, [pc, #512]	; (800acac <_dtoa_r+0xbcc>)
 800aaac:	4602      	mov	r2, r0
 800aaae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aab2:	f7ff bb2e 	b.w	800a112 <_dtoa_r+0x32>
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	3202      	adds	r2, #2
 800aaba:	0092      	lsls	r2, r2, #2
 800aabc:	f107 010c 	add.w	r1, r7, #12
 800aac0:	300c      	adds	r0, #12
 800aac2:	f7fe fd41 	bl	8009548 <memcpy>
 800aac6:	2201      	movs	r2, #1
 800aac8:	4629      	mov	r1, r5
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fd32 	bl	800b534 <__lshift>
 800aad0:	9b00      	ldr	r3, [sp, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	9b00      	ldr	r3, [sp, #0]
 800aad8:	444b      	add	r3, r9
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	9b02      	ldr	r3, [sp, #8]
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	46b8      	mov	r8, r7
 800aae4:	9306      	str	r3, [sp, #24]
 800aae6:	4607      	mov	r7, r0
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	4631      	mov	r1, r6
 800aaec:	3b01      	subs	r3, #1
 800aaee:	4658      	mov	r0, fp
 800aaf0:	9302      	str	r3, [sp, #8]
 800aaf2:	f7ff fa69 	bl	8009fc8 <quorem>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	3330      	adds	r3, #48	; 0x30
 800aafa:	9004      	str	r0, [sp, #16]
 800aafc:	4641      	mov	r1, r8
 800aafe:	4658      	mov	r0, fp
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	f000 fd83 	bl	800b60c <__mcmp>
 800ab06:	463a      	mov	r2, r7
 800ab08:	4681      	mov	r9, r0
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 fd99 	bl	800b644 <__mdiff>
 800ab12:	68c2      	ldr	r2, [r0, #12]
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	4605      	mov	r5, r0
 800ab18:	bb02      	cbnz	r2, 800ab5c <_dtoa_r+0xa7c>
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f000 fd75 	bl	800b60c <__mcmp>
 800ab22:	9b08      	ldr	r3, [sp, #32]
 800ab24:	4602      	mov	r2, r0
 800ab26:	4629      	mov	r1, r5
 800ab28:	4620      	mov	r0, r4
 800ab2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab2e:	f000 fb2f 	bl	800b190 <_Bfree>
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab36:	9d01      	ldr	r5, [sp, #4]
 800ab38:	ea43 0102 	orr.w	r1, r3, r2
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	430b      	orrs	r3, r1
 800ab40:	9b08      	ldr	r3, [sp, #32]
 800ab42:	d10d      	bne.n	800ab60 <_dtoa_r+0xa80>
 800ab44:	2b39      	cmp	r3, #57	; 0x39
 800ab46:	d029      	beq.n	800ab9c <_dtoa_r+0xabc>
 800ab48:	f1b9 0f00 	cmp.w	r9, #0
 800ab4c:	dd01      	ble.n	800ab52 <_dtoa_r+0xa72>
 800ab4e:	9b04      	ldr	r3, [sp, #16]
 800ab50:	3331      	adds	r3, #49	; 0x31
 800ab52:	9a02      	ldr	r2, [sp, #8]
 800ab54:	7013      	strb	r3, [r2, #0]
 800ab56:	e774      	b.n	800aa42 <_dtoa_r+0x962>
 800ab58:	4638      	mov	r0, r7
 800ab5a:	e7b9      	b.n	800aad0 <_dtoa_r+0x9f0>
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	e7e2      	b.n	800ab26 <_dtoa_r+0xa46>
 800ab60:	f1b9 0f00 	cmp.w	r9, #0
 800ab64:	db06      	blt.n	800ab74 <_dtoa_r+0xa94>
 800ab66:	9905      	ldr	r1, [sp, #20]
 800ab68:	ea41 0909 	orr.w	r9, r1, r9
 800ab6c:	9906      	ldr	r1, [sp, #24]
 800ab6e:	ea59 0101 	orrs.w	r1, r9, r1
 800ab72:	d120      	bne.n	800abb6 <_dtoa_r+0xad6>
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	ddec      	ble.n	800ab52 <_dtoa_r+0xa72>
 800ab78:	4659      	mov	r1, fp
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	f000 fcd8 	bl	800b534 <__lshift>
 800ab84:	4631      	mov	r1, r6
 800ab86:	4683      	mov	fp, r0
 800ab88:	f000 fd40 	bl	800b60c <__mcmp>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	dc02      	bgt.n	800ab98 <_dtoa_r+0xab8>
 800ab92:	d1de      	bne.n	800ab52 <_dtoa_r+0xa72>
 800ab94:	07da      	lsls	r2, r3, #31
 800ab96:	d5dc      	bpl.n	800ab52 <_dtoa_r+0xa72>
 800ab98:	2b39      	cmp	r3, #57	; 0x39
 800ab9a:	d1d8      	bne.n	800ab4e <_dtoa_r+0xa6e>
 800ab9c:	9a02      	ldr	r2, [sp, #8]
 800ab9e:	2339      	movs	r3, #57	; 0x39
 800aba0:	7013      	strb	r3, [r2, #0]
 800aba2:	462b      	mov	r3, r5
 800aba4:	461d      	mov	r5, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abac:	2a39      	cmp	r2, #57	; 0x39
 800abae:	d050      	beq.n	800ac52 <_dtoa_r+0xb72>
 800abb0:	3201      	adds	r2, #1
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	e745      	b.n	800aa42 <_dtoa_r+0x962>
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	dd03      	ble.n	800abc2 <_dtoa_r+0xae2>
 800abba:	2b39      	cmp	r3, #57	; 0x39
 800abbc:	d0ee      	beq.n	800ab9c <_dtoa_r+0xabc>
 800abbe:	3301      	adds	r3, #1
 800abc0:	e7c7      	b.n	800ab52 <_dtoa_r+0xa72>
 800abc2:	9a01      	ldr	r2, [sp, #4]
 800abc4:	9907      	ldr	r1, [sp, #28]
 800abc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abca:	428a      	cmp	r2, r1
 800abcc:	d02a      	beq.n	800ac24 <_dtoa_r+0xb44>
 800abce:	4659      	mov	r1, fp
 800abd0:	2300      	movs	r3, #0
 800abd2:	220a      	movs	r2, #10
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fafd 	bl	800b1d4 <__multadd>
 800abda:	45b8      	cmp	r8, r7
 800abdc:	4683      	mov	fp, r0
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	f04f 020a 	mov.w	r2, #10
 800abe6:	4641      	mov	r1, r8
 800abe8:	4620      	mov	r0, r4
 800abea:	d107      	bne.n	800abfc <_dtoa_r+0xb1c>
 800abec:	f000 faf2 	bl	800b1d4 <__multadd>
 800abf0:	4680      	mov	r8, r0
 800abf2:	4607      	mov	r7, r0
 800abf4:	9b01      	ldr	r3, [sp, #4]
 800abf6:	3301      	adds	r3, #1
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	e775      	b.n	800aae8 <_dtoa_r+0xa08>
 800abfc:	f000 faea 	bl	800b1d4 <__multadd>
 800ac00:	4639      	mov	r1, r7
 800ac02:	4680      	mov	r8, r0
 800ac04:	2300      	movs	r3, #0
 800ac06:	220a      	movs	r2, #10
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fae3 	bl	800b1d4 <__multadd>
 800ac0e:	4607      	mov	r7, r0
 800ac10:	e7f0      	b.n	800abf4 <_dtoa_r+0xb14>
 800ac12:	f1b9 0f00 	cmp.w	r9, #0
 800ac16:	9a00      	ldr	r2, [sp, #0]
 800ac18:	bfcc      	ite	gt
 800ac1a:	464d      	movgt	r5, r9
 800ac1c:	2501      	movle	r5, #1
 800ac1e:	4415      	add	r5, r2
 800ac20:	f04f 0800 	mov.w	r8, #0
 800ac24:	4659      	mov	r1, fp
 800ac26:	2201      	movs	r2, #1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	f000 fc82 	bl	800b534 <__lshift>
 800ac30:	4631      	mov	r1, r6
 800ac32:	4683      	mov	fp, r0
 800ac34:	f000 fcea 	bl	800b60c <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dcb2      	bgt.n	800aba2 <_dtoa_r+0xac2>
 800ac3c:	d102      	bne.n	800ac44 <_dtoa_r+0xb64>
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	07db      	lsls	r3, r3, #31
 800ac42:	d4ae      	bmi.n	800aba2 <_dtoa_r+0xac2>
 800ac44:	462b      	mov	r3, r5
 800ac46:	461d      	mov	r5, r3
 800ac48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac4c:	2a30      	cmp	r2, #48	; 0x30
 800ac4e:	d0fa      	beq.n	800ac46 <_dtoa_r+0xb66>
 800ac50:	e6f7      	b.n	800aa42 <_dtoa_r+0x962>
 800ac52:	9a00      	ldr	r2, [sp, #0]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d1a5      	bne.n	800aba4 <_dtoa_r+0xac4>
 800ac58:	f10a 0a01 	add.w	sl, sl, #1
 800ac5c:	2331      	movs	r3, #49	; 0x31
 800ac5e:	e779      	b.n	800ab54 <_dtoa_r+0xa74>
 800ac60:	4b13      	ldr	r3, [pc, #76]	; (800acb0 <_dtoa_r+0xbd0>)
 800ac62:	f7ff baaf 	b.w	800a1c4 <_dtoa_r+0xe4>
 800ac66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f47f aa86 	bne.w	800a17a <_dtoa_r+0x9a>
 800ac6e:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <_dtoa_r+0xbd4>)
 800ac70:	f7ff baa8 	b.w	800a1c4 <_dtoa_r+0xe4>
 800ac74:	f1b9 0f00 	cmp.w	r9, #0
 800ac78:	dc03      	bgt.n	800ac82 <_dtoa_r+0xba2>
 800ac7a:	9b05      	ldr	r3, [sp, #20]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	f73f aec9 	bgt.w	800aa14 <_dtoa_r+0x934>
 800ac82:	9d00      	ldr	r5, [sp, #0]
 800ac84:	4631      	mov	r1, r6
 800ac86:	4658      	mov	r0, fp
 800ac88:	f7ff f99e 	bl	8009fc8 <quorem>
 800ac8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac90:	f805 3b01 	strb.w	r3, [r5], #1
 800ac94:	9a00      	ldr	r2, [sp, #0]
 800ac96:	1aaa      	subs	r2, r5, r2
 800ac98:	4591      	cmp	r9, r2
 800ac9a:	ddba      	ble.n	800ac12 <_dtoa_r+0xb32>
 800ac9c:	4659      	mov	r1, fp
 800ac9e:	2300      	movs	r3, #0
 800aca0:	220a      	movs	r2, #10
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 fa96 	bl	800b1d4 <__multadd>
 800aca8:	4683      	mov	fp, r0
 800acaa:	e7eb      	b.n	800ac84 <_dtoa_r+0xba4>
 800acac:	0800eb2f 	.word	0x0800eb2f
 800acb0:	0800ea88 	.word	0x0800ea88
 800acb4:	0800eaac 	.word	0x0800eaac

0800acb8 <__sflush_r>:
 800acb8:	898a      	ldrh	r2, [r1, #12]
 800acba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	4605      	mov	r5, r0
 800acc0:	0710      	lsls	r0, r2, #28
 800acc2:	460c      	mov	r4, r1
 800acc4:	d458      	bmi.n	800ad78 <__sflush_r+0xc0>
 800acc6:	684b      	ldr	r3, [r1, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	dc05      	bgt.n	800acd8 <__sflush_r+0x20>
 800accc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dc02      	bgt.n	800acd8 <__sflush_r+0x20>
 800acd2:	2000      	movs	r0, #0
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acda:	2e00      	cmp	r6, #0
 800acdc:	d0f9      	beq.n	800acd2 <__sflush_r+0x1a>
 800acde:	2300      	movs	r3, #0
 800ace0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ace4:	682f      	ldr	r7, [r5, #0]
 800ace6:	602b      	str	r3, [r5, #0]
 800ace8:	d032      	beq.n	800ad50 <__sflush_r+0x98>
 800acea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	075a      	lsls	r2, r3, #29
 800acf0:	d505      	bpl.n	800acfe <__sflush_r+0x46>
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	1ac0      	subs	r0, r0, r3
 800acf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acf8:	b10b      	cbz	r3, 800acfe <__sflush_r+0x46>
 800acfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acfc:	1ac0      	subs	r0, r0, r3
 800acfe:	2300      	movs	r3, #0
 800ad00:	4602      	mov	r2, r0
 800ad02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad04:	6a21      	ldr	r1, [r4, #32]
 800ad06:	4628      	mov	r0, r5
 800ad08:	47b0      	blx	r6
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	d106      	bne.n	800ad1e <__sflush_r+0x66>
 800ad10:	6829      	ldr	r1, [r5, #0]
 800ad12:	291d      	cmp	r1, #29
 800ad14:	d82c      	bhi.n	800ad70 <__sflush_r+0xb8>
 800ad16:	4a2a      	ldr	r2, [pc, #168]	; (800adc0 <__sflush_r+0x108>)
 800ad18:	40ca      	lsrs	r2, r1
 800ad1a:	07d6      	lsls	r6, r2, #31
 800ad1c:	d528      	bpl.n	800ad70 <__sflush_r+0xb8>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	6062      	str	r2, [r4, #4]
 800ad22:	04d9      	lsls	r1, r3, #19
 800ad24:	6922      	ldr	r2, [r4, #16]
 800ad26:	6022      	str	r2, [r4, #0]
 800ad28:	d504      	bpl.n	800ad34 <__sflush_r+0x7c>
 800ad2a:	1c42      	adds	r2, r0, #1
 800ad2c:	d101      	bne.n	800ad32 <__sflush_r+0x7a>
 800ad2e:	682b      	ldr	r3, [r5, #0]
 800ad30:	b903      	cbnz	r3, 800ad34 <__sflush_r+0x7c>
 800ad32:	6560      	str	r0, [r4, #84]	; 0x54
 800ad34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad36:	602f      	str	r7, [r5, #0]
 800ad38:	2900      	cmp	r1, #0
 800ad3a:	d0ca      	beq.n	800acd2 <__sflush_r+0x1a>
 800ad3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad40:	4299      	cmp	r1, r3
 800ad42:	d002      	beq.n	800ad4a <__sflush_r+0x92>
 800ad44:	4628      	mov	r0, r5
 800ad46:	f000 fd71 	bl	800b82c <_free_r>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad4e:	e7c1      	b.n	800acd4 <__sflush_r+0x1c>
 800ad50:	6a21      	ldr	r1, [r4, #32]
 800ad52:	2301      	movs	r3, #1
 800ad54:	4628      	mov	r0, r5
 800ad56:	47b0      	blx	r6
 800ad58:	1c41      	adds	r1, r0, #1
 800ad5a:	d1c7      	bne.n	800acec <__sflush_r+0x34>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0c4      	beq.n	800acec <__sflush_r+0x34>
 800ad62:	2b1d      	cmp	r3, #29
 800ad64:	d001      	beq.n	800ad6a <__sflush_r+0xb2>
 800ad66:	2b16      	cmp	r3, #22
 800ad68:	d101      	bne.n	800ad6e <__sflush_r+0xb6>
 800ad6a:	602f      	str	r7, [r5, #0]
 800ad6c:	e7b1      	b.n	800acd2 <__sflush_r+0x1a>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	e7ad      	b.n	800acd4 <__sflush_r+0x1c>
 800ad78:	690f      	ldr	r7, [r1, #16]
 800ad7a:	2f00      	cmp	r7, #0
 800ad7c:	d0a9      	beq.n	800acd2 <__sflush_r+0x1a>
 800ad7e:	0793      	lsls	r3, r2, #30
 800ad80:	680e      	ldr	r6, [r1, #0]
 800ad82:	bf08      	it	eq
 800ad84:	694b      	ldreq	r3, [r1, #20]
 800ad86:	600f      	str	r7, [r1, #0]
 800ad88:	bf18      	it	ne
 800ad8a:	2300      	movne	r3, #0
 800ad8c:	eba6 0807 	sub.w	r8, r6, r7
 800ad90:	608b      	str	r3, [r1, #8]
 800ad92:	f1b8 0f00 	cmp.w	r8, #0
 800ad96:	dd9c      	ble.n	800acd2 <__sflush_r+0x1a>
 800ad98:	6a21      	ldr	r1, [r4, #32]
 800ad9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad9c:	4643      	mov	r3, r8
 800ad9e:	463a      	mov	r2, r7
 800ada0:	4628      	mov	r0, r5
 800ada2:	47b0      	blx	r6
 800ada4:	2800      	cmp	r0, #0
 800ada6:	dc06      	bgt.n	800adb6 <__sflush_r+0xfe>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	e78e      	b.n	800acd4 <__sflush_r+0x1c>
 800adb6:	4407      	add	r7, r0
 800adb8:	eba8 0800 	sub.w	r8, r8, r0
 800adbc:	e7e9      	b.n	800ad92 <__sflush_r+0xda>
 800adbe:	bf00      	nop
 800adc0:	20400001 	.word	0x20400001

0800adc4 <_fflush_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	690b      	ldr	r3, [r1, #16]
 800adc8:	4605      	mov	r5, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	b913      	cbnz	r3, 800add4 <_fflush_r+0x10>
 800adce:	2500      	movs	r5, #0
 800add0:	4628      	mov	r0, r5
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	b118      	cbz	r0, 800adde <_fflush_r+0x1a>
 800add6:	6983      	ldr	r3, [r0, #24]
 800add8:	b90b      	cbnz	r3, 800adde <_fflush_r+0x1a>
 800adda:	f000 f887 	bl	800aeec <__sinit>
 800adde:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <_fflush_r+0x6c>)
 800ade0:	429c      	cmp	r4, r3
 800ade2:	d11b      	bne.n	800ae1c <_fflush_r+0x58>
 800ade4:	686c      	ldr	r4, [r5, #4]
 800ade6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0ef      	beq.n	800adce <_fflush_r+0xa>
 800adee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adf0:	07d0      	lsls	r0, r2, #31
 800adf2:	d404      	bmi.n	800adfe <_fflush_r+0x3a>
 800adf4:	0599      	lsls	r1, r3, #22
 800adf6:	d402      	bmi.n	800adfe <_fflush_r+0x3a>
 800adf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adfa:	f000 f91a 	bl	800b032 <__retarget_lock_acquire_recursive>
 800adfe:	4628      	mov	r0, r5
 800ae00:	4621      	mov	r1, r4
 800ae02:	f7ff ff59 	bl	800acb8 <__sflush_r>
 800ae06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae08:	07da      	lsls	r2, r3, #31
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	d4e0      	bmi.n	800add0 <_fflush_r+0xc>
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	059b      	lsls	r3, r3, #22
 800ae12:	d4dd      	bmi.n	800add0 <_fflush_r+0xc>
 800ae14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae16:	f000 f90d 	bl	800b034 <__retarget_lock_release_recursive>
 800ae1a:	e7d9      	b.n	800add0 <_fflush_r+0xc>
 800ae1c:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <_fflush_r+0x70>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	d101      	bne.n	800ae26 <_fflush_r+0x62>
 800ae22:	68ac      	ldr	r4, [r5, #8]
 800ae24:	e7df      	b.n	800ade6 <_fflush_r+0x22>
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <_fflush_r+0x74>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	bf08      	it	eq
 800ae2c:	68ec      	ldreq	r4, [r5, #12]
 800ae2e:	e7da      	b.n	800ade6 <_fflush_r+0x22>
 800ae30:	0800eb60 	.word	0x0800eb60
 800ae34:	0800eb80 	.word	0x0800eb80
 800ae38:	0800eb40 	.word	0x0800eb40

0800ae3c <std>:
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	4604      	mov	r4, r0
 800ae42:	e9c0 3300 	strd	r3, r3, [r0]
 800ae46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae4a:	6083      	str	r3, [r0, #8]
 800ae4c:	8181      	strh	r1, [r0, #12]
 800ae4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae50:	81c2      	strh	r2, [r0, #14]
 800ae52:	6183      	str	r3, [r0, #24]
 800ae54:	4619      	mov	r1, r3
 800ae56:	2208      	movs	r2, #8
 800ae58:	305c      	adds	r0, #92	; 0x5c
 800ae5a:	f7fe fb83 	bl	8009564 <memset>
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x38>)
 800ae60:	6263      	str	r3, [r4, #36]	; 0x24
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <std+0x3c>)
 800ae64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <std+0x40>)
 800ae68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <std+0x44>)
 800ae6c:	6224      	str	r4, [r4, #32]
 800ae6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae70:	bd10      	pop	{r4, pc}
 800ae72:	bf00      	nop
 800ae74:	0800b9a1 	.word	0x0800b9a1
 800ae78:	0800b9c3 	.word	0x0800b9c3
 800ae7c:	0800b9fb 	.word	0x0800b9fb
 800ae80:	0800ba1f 	.word	0x0800ba1f

0800ae84 <_cleanup_r>:
 800ae84:	4901      	ldr	r1, [pc, #4]	; (800ae8c <_cleanup_r+0x8>)
 800ae86:	f000 b8af 	b.w	800afe8 <_fwalk_reent>
 800ae8a:	bf00      	nop
 800ae8c:	0800adc5 	.word	0x0800adc5

0800ae90 <__sfmoreglue>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	1e4a      	subs	r2, r1, #1
 800ae94:	2568      	movs	r5, #104	; 0x68
 800ae96:	4355      	muls	r5, r2
 800ae98:	460e      	mov	r6, r1
 800ae9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae9e:	f000 fd15 	bl	800b8cc <_malloc_r>
 800aea2:	4604      	mov	r4, r0
 800aea4:	b140      	cbz	r0, 800aeb8 <__sfmoreglue+0x28>
 800aea6:	2100      	movs	r1, #0
 800aea8:	e9c0 1600 	strd	r1, r6, [r0]
 800aeac:	300c      	adds	r0, #12
 800aeae:	60a0      	str	r0, [r4, #8]
 800aeb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeb4:	f7fe fb56 	bl	8009564 <memset>
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bd70      	pop	{r4, r5, r6, pc}

0800aebc <__sfp_lock_acquire>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sfp_lock_acquire+0x8>)
 800aebe:	f000 b8b8 	b.w	800b032 <__retarget_lock_acquire_recursive>
 800aec2:	bf00      	nop
 800aec4:	20000888 	.word	0x20000888

0800aec8 <__sfp_lock_release>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__sfp_lock_release+0x8>)
 800aeca:	f000 b8b3 	b.w	800b034 <__retarget_lock_release_recursive>
 800aece:	bf00      	nop
 800aed0:	20000888 	.word	0x20000888

0800aed4 <__sinit_lock_acquire>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__sinit_lock_acquire+0x8>)
 800aed6:	f000 b8ac 	b.w	800b032 <__retarget_lock_acquire_recursive>
 800aeda:	bf00      	nop
 800aedc:	20000883 	.word	0x20000883

0800aee0 <__sinit_lock_release>:
 800aee0:	4801      	ldr	r0, [pc, #4]	; (800aee8 <__sinit_lock_release+0x8>)
 800aee2:	f000 b8a7 	b.w	800b034 <__retarget_lock_release_recursive>
 800aee6:	bf00      	nop
 800aee8:	20000883 	.word	0x20000883

0800aeec <__sinit>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4604      	mov	r4, r0
 800aef0:	f7ff fff0 	bl	800aed4 <__sinit_lock_acquire>
 800aef4:	69a3      	ldr	r3, [r4, #24]
 800aef6:	b11b      	cbz	r3, 800af00 <__sinit+0x14>
 800aef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aefc:	f7ff bff0 	b.w	800aee0 <__sinit_lock_release>
 800af00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af04:	6523      	str	r3, [r4, #80]	; 0x50
 800af06:	4b13      	ldr	r3, [pc, #76]	; (800af54 <__sinit+0x68>)
 800af08:	4a13      	ldr	r2, [pc, #76]	; (800af58 <__sinit+0x6c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800af0e:	42a3      	cmp	r3, r4
 800af10:	bf04      	itt	eq
 800af12:	2301      	moveq	r3, #1
 800af14:	61a3      	streq	r3, [r4, #24]
 800af16:	4620      	mov	r0, r4
 800af18:	f000 f820 	bl	800af5c <__sfp>
 800af1c:	6060      	str	r0, [r4, #4]
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f81c 	bl	800af5c <__sfp>
 800af24:	60a0      	str	r0, [r4, #8]
 800af26:	4620      	mov	r0, r4
 800af28:	f000 f818 	bl	800af5c <__sfp>
 800af2c:	2200      	movs	r2, #0
 800af2e:	60e0      	str	r0, [r4, #12]
 800af30:	2104      	movs	r1, #4
 800af32:	6860      	ldr	r0, [r4, #4]
 800af34:	f7ff ff82 	bl	800ae3c <std>
 800af38:	68a0      	ldr	r0, [r4, #8]
 800af3a:	2201      	movs	r2, #1
 800af3c:	2109      	movs	r1, #9
 800af3e:	f7ff ff7d 	bl	800ae3c <std>
 800af42:	68e0      	ldr	r0, [r4, #12]
 800af44:	2202      	movs	r2, #2
 800af46:	2112      	movs	r1, #18
 800af48:	f7ff ff78 	bl	800ae3c <std>
 800af4c:	2301      	movs	r3, #1
 800af4e:	61a3      	str	r3, [r4, #24]
 800af50:	e7d2      	b.n	800aef8 <__sinit+0xc>
 800af52:	bf00      	nop
 800af54:	0800ea74 	.word	0x0800ea74
 800af58:	0800ae85 	.word	0x0800ae85

0800af5c <__sfp>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	4607      	mov	r7, r0
 800af60:	f7ff ffac 	bl	800aebc <__sfp_lock_acquire>
 800af64:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <__sfp+0x84>)
 800af66:	681e      	ldr	r6, [r3, #0]
 800af68:	69b3      	ldr	r3, [r6, #24]
 800af6a:	b913      	cbnz	r3, 800af72 <__sfp+0x16>
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff ffbd 	bl	800aeec <__sinit>
 800af72:	3648      	adds	r6, #72	; 0x48
 800af74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af78:	3b01      	subs	r3, #1
 800af7a:	d503      	bpl.n	800af84 <__sfp+0x28>
 800af7c:	6833      	ldr	r3, [r6, #0]
 800af7e:	b30b      	cbz	r3, 800afc4 <__sfp+0x68>
 800af80:	6836      	ldr	r6, [r6, #0]
 800af82:	e7f7      	b.n	800af74 <__sfp+0x18>
 800af84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af88:	b9d5      	cbnz	r5, 800afc0 <__sfp+0x64>
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <__sfp+0x88>)
 800af8c:	60e3      	str	r3, [r4, #12]
 800af8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af92:	6665      	str	r5, [r4, #100]	; 0x64
 800af94:	f000 f84c 	bl	800b030 <__retarget_lock_init_recursive>
 800af98:	f7ff ff96 	bl	800aec8 <__sfp_lock_release>
 800af9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afa4:	6025      	str	r5, [r4, #0]
 800afa6:	61a5      	str	r5, [r4, #24]
 800afa8:	2208      	movs	r2, #8
 800afaa:	4629      	mov	r1, r5
 800afac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afb0:	f7fe fad8 	bl	8009564 <memset>
 800afb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afbc:	4620      	mov	r0, r4
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	3468      	adds	r4, #104	; 0x68
 800afc2:	e7d9      	b.n	800af78 <__sfp+0x1c>
 800afc4:	2104      	movs	r1, #4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff ff62 	bl	800ae90 <__sfmoreglue>
 800afcc:	4604      	mov	r4, r0
 800afce:	6030      	str	r0, [r6, #0]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1d5      	bne.n	800af80 <__sfp+0x24>
 800afd4:	f7ff ff78 	bl	800aec8 <__sfp_lock_release>
 800afd8:	230c      	movs	r3, #12
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	e7ee      	b.n	800afbc <__sfp+0x60>
 800afde:	bf00      	nop
 800afe0:	0800ea74 	.word	0x0800ea74
 800afe4:	ffff0001 	.word	0xffff0001

0800afe8 <_fwalk_reent>:
 800afe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afec:	4606      	mov	r6, r0
 800afee:	4688      	mov	r8, r1
 800aff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aff4:	2700      	movs	r7, #0
 800aff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800affa:	f1b9 0901 	subs.w	r9, r9, #1
 800affe:	d505      	bpl.n	800b00c <_fwalk_reent+0x24>
 800b000:	6824      	ldr	r4, [r4, #0]
 800b002:	2c00      	cmp	r4, #0
 800b004:	d1f7      	bne.n	800aff6 <_fwalk_reent+0xe>
 800b006:	4638      	mov	r0, r7
 800b008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00c:	89ab      	ldrh	r3, [r5, #12]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d907      	bls.n	800b022 <_fwalk_reent+0x3a>
 800b012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b016:	3301      	adds	r3, #1
 800b018:	d003      	beq.n	800b022 <_fwalk_reent+0x3a>
 800b01a:	4629      	mov	r1, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	47c0      	blx	r8
 800b020:	4307      	orrs	r7, r0
 800b022:	3568      	adds	r5, #104	; 0x68
 800b024:	e7e9      	b.n	800affa <_fwalk_reent+0x12>
	...

0800b028 <_localeconv_r>:
 800b028:	4800      	ldr	r0, [pc, #0]	; (800b02c <_localeconv_r+0x4>)
 800b02a:	4770      	bx	lr
 800b02c:	200001b8 	.word	0x200001b8

0800b030 <__retarget_lock_init_recursive>:
 800b030:	4770      	bx	lr

0800b032 <__retarget_lock_acquire_recursive>:
 800b032:	4770      	bx	lr

0800b034 <__retarget_lock_release_recursive>:
 800b034:	4770      	bx	lr

0800b036 <__swhatbuf_r>:
 800b036:	b570      	push	{r4, r5, r6, lr}
 800b038:	460e      	mov	r6, r1
 800b03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03e:	2900      	cmp	r1, #0
 800b040:	b096      	sub	sp, #88	; 0x58
 800b042:	4614      	mov	r4, r2
 800b044:	461d      	mov	r5, r3
 800b046:	da07      	bge.n	800b058 <__swhatbuf_r+0x22>
 800b048:	2300      	movs	r3, #0
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	89b3      	ldrh	r3, [r6, #12]
 800b04e:	061a      	lsls	r2, r3, #24
 800b050:	d410      	bmi.n	800b074 <__swhatbuf_r+0x3e>
 800b052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b056:	e00e      	b.n	800b076 <__swhatbuf_r+0x40>
 800b058:	466a      	mov	r2, sp
 800b05a:	f000 fd37 	bl	800bacc <_fstat_r>
 800b05e:	2800      	cmp	r0, #0
 800b060:	dbf2      	blt.n	800b048 <__swhatbuf_r+0x12>
 800b062:	9a01      	ldr	r2, [sp, #4]
 800b064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b06c:	425a      	negs	r2, r3
 800b06e:	415a      	adcs	r2, r3
 800b070:	602a      	str	r2, [r5, #0]
 800b072:	e7ee      	b.n	800b052 <__swhatbuf_r+0x1c>
 800b074:	2340      	movs	r3, #64	; 0x40
 800b076:	2000      	movs	r0, #0
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	b016      	add	sp, #88	; 0x58
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b080 <__smakebuf_r>:
 800b080:	898b      	ldrh	r3, [r1, #12]
 800b082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b084:	079d      	lsls	r5, r3, #30
 800b086:	4606      	mov	r6, r0
 800b088:	460c      	mov	r4, r1
 800b08a:	d507      	bpl.n	800b09c <__smakebuf_r+0x1c>
 800b08c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	2301      	movs	r3, #1
 800b096:	6163      	str	r3, [r4, #20]
 800b098:	b002      	add	sp, #8
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	ab01      	add	r3, sp, #4
 800b09e:	466a      	mov	r2, sp
 800b0a0:	f7ff ffc9 	bl	800b036 <__swhatbuf_r>
 800b0a4:	9900      	ldr	r1, [sp, #0]
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 fc0f 	bl	800b8cc <_malloc_r>
 800b0ae:	b948      	cbnz	r0, 800b0c4 <__smakebuf_r+0x44>
 800b0b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b4:	059a      	lsls	r2, r3, #22
 800b0b6:	d4ef      	bmi.n	800b098 <__smakebuf_r+0x18>
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
 800b0bc:	f043 0302 	orr.w	r3, r3, #2
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	e7e3      	b.n	800b08c <__smakebuf_r+0xc>
 800b0c4:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <__smakebuf_r+0x7c>)
 800b0c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	6020      	str	r0, [r4, #0]
 800b0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	9b00      	ldr	r3, [sp, #0]
 800b0d4:	6163      	str	r3, [r4, #20]
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	6120      	str	r0, [r4, #16]
 800b0da:	b15b      	cbz	r3, 800b0f4 <__smakebuf_r+0x74>
 800b0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f000 fd05 	bl	800baf0 <_isatty_r>
 800b0e6:	b128      	cbz	r0, 800b0f4 <__smakebuf_r+0x74>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	f023 0303 	bic.w	r3, r3, #3
 800b0ee:	f043 0301 	orr.w	r3, r3, #1
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	89a0      	ldrh	r0, [r4, #12]
 800b0f6:	4305      	orrs	r5, r0
 800b0f8:	81a5      	strh	r5, [r4, #12]
 800b0fa:	e7cd      	b.n	800b098 <__smakebuf_r+0x18>
 800b0fc:	0800ae85 	.word	0x0800ae85

0800b100 <malloc>:
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <malloc+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f000 bbe1 	b.w	800b8cc <_malloc_r>
 800b10a:	bf00      	nop
 800b10c:	20000064 	.word	0x20000064

0800b110 <_Balloc>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b114:	4604      	mov	r4, r0
 800b116:	460d      	mov	r5, r1
 800b118:	b976      	cbnz	r6, 800b138 <_Balloc+0x28>
 800b11a:	2010      	movs	r0, #16
 800b11c:	f7ff fff0 	bl	800b100 <malloc>
 800b120:	4602      	mov	r2, r0
 800b122:	6260      	str	r0, [r4, #36]	; 0x24
 800b124:	b920      	cbnz	r0, 800b130 <_Balloc+0x20>
 800b126:	4b18      	ldr	r3, [pc, #96]	; (800b188 <_Balloc+0x78>)
 800b128:	4818      	ldr	r0, [pc, #96]	; (800b18c <_Balloc+0x7c>)
 800b12a:	2166      	movs	r1, #102	; 0x66
 800b12c:	f000 fc8e 	bl	800ba4c <__assert_func>
 800b130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b134:	6006      	str	r6, [r0, #0]
 800b136:	60c6      	str	r6, [r0, #12]
 800b138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b13a:	68f3      	ldr	r3, [r6, #12]
 800b13c:	b183      	cbz	r3, 800b160 <_Balloc+0x50>
 800b13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b146:	b9b8      	cbnz	r0, 800b178 <_Balloc+0x68>
 800b148:	2101      	movs	r1, #1
 800b14a:	fa01 f605 	lsl.w	r6, r1, r5
 800b14e:	1d72      	adds	r2, r6, #5
 800b150:	0092      	lsls	r2, r2, #2
 800b152:	4620      	mov	r0, r4
 800b154:	f000 fb5a 	bl	800b80c <_calloc_r>
 800b158:	b160      	cbz	r0, 800b174 <_Balloc+0x64>
 800b15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b15e:	e00e      	b.n	800b17e <_Balloc+0x6e>
 800b160:	2221      	movs	r2, #33	; 0x21
 800b162:	2104      	movs	r1, #4
 800b164:	4620      	mov	r0, r4
 800b166:	f000 fb51 	bl	800b80c <_calloc_r>
 800b16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b16c:	60f0      	str	r0, [r6, #12]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e4      	bne.n	800b13e <_Balloc+0x2e>
 800b174:	2000      	movs	r0, #0
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	6802      	ldr	r2, [r0, #0]
 800b17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b17e:	2300      	movs	r3, #0
 800b180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b184:	e7f7      	b.n	800b176 <_Balloc+0x66>
 800b186:	bf00      	nop
 800b188:	0800eab9 	.word	0x0800eab9
 800b18c:	0800eba0 	.word	0x0800eba0

0800b190 <_Bfree>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b976      	cbnz	r6, 800b1b8 <_Bfree+0x28>
 800b19a:	2010      	movs	r0, #16
 800b19c:	f7ff ffb0 	bl	800b100 <malloc>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b1a4:	b920      	cbnz	r0, 800b1b0 <_Bfree+0x20>
 800b1a6:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <_Bfree+0x3c>)
 800b1a8:	4809      	ldr	r0, [pc, #36]	; (800b1d0 <_Bfree+0x40>)
 800b1aa:	218a      	movs	r1, #138	; 0x8a
 800b1ac:	f000 fc4e 	bl	800ba4c <__assert_func>
 800b1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b4:	6006      	str	r6, [r0, #0]
 800b1b6:	60c6      	str	r6, [r0, #12]
 800b1b8:	b13c      	cbz	r4, 800b1ca <_Bfree+0x3a>
 800b1ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1bc:	6862      	ldr	r2, [r4, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1c4:	6021      	str	r1, [r4, #0]
 800b1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	0800eab9 	.word	0x0800eab9
 800b1d0:	0800eba0 	.word	0x0800eba0

0800b1d4 <__multadd>:
 800b1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d8:	690e      	ldr	r6, [r1, #16]
 800b1da:	4607      	mov	r7, r0
 800b1dc:	4698      	mov	r8, r3
 800b1de:	460c      	mov	r4, r1
 800b1e0:	f101 0014 	add.w	r0, r1, #20
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6805      	ldr	r5, [r0, #0]
 800b1e8:	b2a9      	uxth	r1, r5
 800b1ea:	fb02 8101 	mla	r1, r2, r1, r8
 800b1ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b1f2:	0c2d      	lsrs	r5, r5, #16
 800b1f4:	fb02 c505 	mla	r5, r2, r5, ip
 800b1f8:	b289      	uxth	r1, r1
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b200:	429e      	cmp	r6, r3
 800b202:	f840 1b04 	str.w	r1, [r0], #4
 800b206:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b20a:	dcec      	bgt.n	800b1e6 <__multadd+0x12>
 800b20c:	f1b8 0f00 	cmp.w	r8, #0
 800b210:	d022      	beq.n	800b258 <__multadd+0x84>
 800b212:	68a3      	ldr	r3, [r4, #8]
 800b214:	42b3      	cmp	r3, r6
 800b216:	dc19      	bgt.n	800b24c <__multadd+0x78>
 800b218:	6861      	ldr	r1, [r4, #4]
 800b21a:	4638      	mov	r0, r7
 800b21c:	3101      	adds	r1, #1
 800b21e:	f7ff ff77 	bl	800b110 <_Balloc>
 800b222:	4605      	mov	r5, r0
 800b224:	b928      	cbnz	r0, 800b232 <__multadd+0x5e>
 800b226:	4602      	mov	r2, r0
 800b228:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <__multadd+0x8c>)
 800b22a:	480e      	ldr	r0, [pc, #56]	; (800b264 <__multadd+0x90>)
 800b22c:	21b5      	movs	r1, #181	; 0xb5
 800b22e:	f000 fc0d 	bl	800ba4c <__assert_func>
 800b232:	6922      	ldr	r2, [r4, #16]
 800b234:	3202      	adds	r2, #2
 800b236:	f104 010c 	add.w	r1, r4, #12
 800b23a:	0092      	lsls	r2, r2, #2
 800b23c:	300c      	adds	r0, #12
 800b23e:	f7fe f983 	bl	8009548 <memcpy>
 800b242:	4621      	mov	r1, r4
 800b244:	4638      	mov	r0, r7
 800b246:	f7ff ffa3 	bl	800b190 <_Bfree>
 800b24a:	462c      	mov	r4, r5
 800b24c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b250:	3601      	adds	r6, #1
 800b252:	f8c3 8014 	str.w	r8, [r3, #20]
 800b256:	6126      	str	r6, [r4, #16]
 800b258:	4620      	mov	r0, r4
 800b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25e:	bf00      	nop
 800b260:	0800eb2f 	.word	0x0800eb2f
 800b264:	0800eba0 	.word	0x0800eba0

0800b268 <__hi0bits>:
 800b268:	0c03      	lsrs	r3, r0, #16
 800b26a:	041b      	lsls	r3, r3, #16
 800b26c:	b9d3      	cbnz	r3, 800b2a4 <__hi0bits+0x3c>
 800b26e:	0400      	lsls	r0, r0, #16
 800b270:	2310      	movs	r3, #16
 800b272:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b276:	bf04      	itt	eq
 800b278:	0200      	lsleq	r0, r0, #8
 800b27a:	3308      	addeq	r3, #8
 800b27c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b280:	bf04      	itt	eq
 800b282:	0100      	lsleq	r0, r0, #4
 800b284:	3304      	addeq	r3, #4
 800b286:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b28a:	bf04      	itt	eq
 800b28c:	0080      	lsleq	r0, r0, #2
 800b28e:	3302      	addeq	r3, #2
 800b290:	2800      	cmp	r0, #0
 800b292:	db05      	blt.n	800b2a0 <__hi0bits+0x38>
 800b294:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b298:	f103 0301 	add.w	r3, r3, #1
 800b29c:	bf08      	it	eq
 800b29e:	2320      	moveq	r3, #32
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	4770      	bx	lr
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e7e4      	b.n	800b272 <__hi0bits+0xa>

0800b2a8 <__lo0bits>:
 800b2a8:	6803      	ldr	r3, [r0, #0]
 800b2aa:	f013 0207 	ands.w	r2, r3, #7
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	d00b      	beq.n	800b2ca <__lo0bits+0x22>
 800b2b2:	07da      	lsls	r2, r3, #31
 800b2b4:	d424      	bmi.n	800b300 <__lo0bits+0x58>
 800b2b6:	0798      	lsls	r0, r3, #30
 800b2b8:	bf49      	itett	mi
 800b2ba:	085b      	lsrmi	r3, r3, #1
 800b2bc:	089b      	lsrpl	r3, r3, #2
 800b2be:	2001      	movmi	r0, #1
 800b2c0:	600b      	strmi	r3, [r1, #0]
 800b2c2:	bf5c      	itt	pl
 800b2c4:	600b      	strpl	r3, [r1, #0]
 800b2c6:	2002      	movpl	r0, #2
 800b2c8:	4770      	bx	lr
 800b2ca:	b298      	uxth	r0, r3
 800b2cc:	b9b0      	cbnz	r0, 800b2fc <__lo0bits+0x54>
 800b2ce:	0c1b      	lsrs	r3, r3, #16
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b2d6:	bf04      	itt	eq
 800b2d8:	0a1b      	lsreq	r3, r3, #8
 800b2da:	3008      	addeq	r0, #8
 800b2dc:	071a      	lsls	r2, r3, #28
 800b2de:	bf04      	itt	eq
 800b2e0:	091b      	lsreq	r3, r3, #4
 800b2e2:	3004      	addeq	r0, #4
 800b2e4:	079a      	lsls	r2, r3, #30
 800b2e6:	bf04      	itt	eq
 800b2e8:	089b      	lsreq	r3, r3, #2
 800b2ea:	3002      	addeq	r0, #2
 800b2ec:	07da      	lsls	r2, r3, #31
 800b2ee:	d403      	bmi.n	800b2f8 <__lo0bits+0x50>
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	f100 0001 	add.w	r0, r0, #1
 800b2f6:	d005      	beq.n	800b304 <__lo0bits+0x5c>
 800b2f8:	600b      	str	r3, [r1, #0]
 800b2fa:	4770      	bx	lr
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	e7e8      	b.n	800b2d2 <__lo0bits+0x2a>
 800b300:	2000      	movs	r0, #0
 800b302:	4770      	bx	lr
 800b304:	2020      	movs	r0, #32
 800b306:	4770      	bx	lr

0800b308 <__i2b>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	460c      	mov	r4, r1
 800b30c:	2101      	movs	r1, #1
 800b30e:	f7ff feff 	bl	800b110 <_Balloc>
 800b312:	4602      	mov	r2, r0
 800b314:	b928      	cbnz	r0, 800b322 <__i2b+0x1a>
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <__i2b+0x24>)
 800b318:	4805      	ldr	r0, [pc, #20]	; (800b330 <__i2b+0x28>)
 800b31a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b31e:	f000 fb95 	bl	800ba4c <__assert_func>
 800b322:	2301      	movs	r3, #1
 800b324:	6144      	str	r4, [r0, #20]
 800b326:	6103      	str	r3, [r0, #16]
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	bf00      	nop
 800b32c:	0800eb2f 	.word	0x0800eb2f
 800b330:	0800eba0 	.word	0x0800eba0

0800b334 <__multiply>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4614      	mov	r4, r2
 800b33a:	690a      	ldr	r2, [r1, #16]
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	429a      	cmp	r2, r3
 800b340:	bfb8      	it	lt
 800b342:	460b      	movlt	r3, r1
 800b344:	460d      	mov	r5, r1
 800b346:	bfbc      	itt	lt
 800b348:	4625      	movlt	r5, r4
 800b34a:	461c      	movlt	r4, r3
 800b34c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b350:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b354:	68ab      	ldr	r3, [r5, #8]
 800b356:	6869      	ldr	r1, [r5, #4]
 800b358:	eb0a 0709 	add.w	r7, sl, r9
 800b35c:	42bb      	cmp	r3, r7
 800b35e:	b085      	sub	sp, #20
 800b360:	bfb8      	it	lt
 800b362:	3101      	addlt	r1, #1
 800b364:	f7ff fed4 	bl	800b110 <_Balloc>
 800b368:	b930      	cbnz	r0, 800b378 <__multiply+0x44>
 800b36a:	4602      	mov	r2, r0
 800b36c:	4b42      	ldr	r3, [pc, #264]	; (800b478 <__multiply+0x144>)
 800b36e:	4843      	ldr	r0, [pc, #268]	; (800b47c <__multiply+0x148>)
 800b370:	f240 115d 	movw	r1, #349	; 0x15d
 800b374:	f000 fb6a 	bl	800ba4c <__assert_func>
 800b378:	f100 0614 	add.w	r6, r0, #20
 800b37c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b380:	4633      	mov	r3, r6
 800b382:	2200      	movs	r2, #0
 800b384:	4543      	cmp	r3, r8
 800b386:	d31e      	bcc.n	800b3c6 <__multiply+0x92>
 800b388:	f105 0c14 	add.w	ip, r5, #20
 800b38c:	f104 0314 	add.w	r3, r4, #20
 800b390:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b394:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b398:	9202      	str	r2, [sp, #8]
 800b39a:	ebac 0205 	sub.w	r2, ip, r5
 800b39e:	3a15      	subs	r2, #21
 800b3a0:	f022 0203 	bic.w	r2, r2, #3
 800b3a4:	3204      	adds	r2, #4
 800b3a6:	f105 0115 	add.w	r1, r5, #21
 800b3aa:	458c      	cmp	ip, r1
 800b3ac:	bf38      	it	cc
 800b3ae:	2204      	movcc	r2, #4
 800b3b0:	9201      	str	r2, [sp, #4]
 800b3b2:	9a02      	ldr	r2, [sp, #8]
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d808      	bhi.n	800b3cc <__multiply+0x98>
 800b3ba:	2f00      	cmp	r7, #0
 800b3bc:	dc55      	bgt.n	800b46a <__multiply+0x136>
 800b3be:	6107      	str	r7, [r0, #16]
 800b3c0:	b005      	add	sp, #20
 800b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c6:	f843 2b04 	str.w	r2, [r3], #4
 800b3ca:	e7db      	b.n	800b384 <__multiply+0x50>
 800b3cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3d0:	f1ba 0f00 	cmp.w	sl, #0
 800b3d4:	d020      	beq.n	800b418 <__multiply+0xe4>
 800b3d6:	f105 0e14 	add.w	lr, r5, #20
 800b3da:	46b1      	mov	r9, r6
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b3e2:	f8d9 b000 	ldr.w	fp, [r9]
 800b3e6:	b2a1      	uxth	r1, r4
 800b3e8:	fa1f fb8b 	uxth.w	fp, fp
 800b3ec:	fb0a b101 	mla	r1, sl, r1, fp
 800b3f0:	4411      	add	r1, r2
 800b3f2:	f8d9 2000 	ldr.w	r2, [r9]
 800b3f6:	0c24      	lsrs	r4, r4, #16
 800b3f8:	0c12      	lsrs	r2, r2, #16
 800b3fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b3fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b402:	b289      	uxth	r1, r1
 800b404:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b408:	45f4      	cmp	ip, lr
 800b40a:	f849 1b04 	str.w	r1, [r9], #4
 800b40e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b412:	d8e4      	bhi.n	800b3de <__multiply+0xaa>
 800b414:	9901      	ldr	r1, [sp, #4]
 800b416:	5072      	str	r2, [r6, r1]
 800b418:	9a03      	ldr	r2, [sp, #12]
 800b41a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b41e:	3304      	adds	r3, #4
 800b420:	f1b9 0f00 	cmp.w	r9, #0
 800b424:	d01f      	beq.n	800b466 <__multiply+0x132>
 800b426:	6834      	ldr	r4, [r6, #0]
 800b428:	f105 0114 	add.w	r1, r5, #20
 800b42c:	46b6      	mov	lr, r6
 800b42e:	f04f 0a00 	mov.w	sl, #0
 800b432:	880a      	ldrh	r2, [r1, #0]
 800b434:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b438:	fb09 b202 	mla	r2, r9, r2, fp
 800b43c:	4492      	add	sl, r2
 800b43e:	b2a4      	uxth	r4, r4
 800b440:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b444:	f84e 4b04 	str.w	r4, [lr], #4
 800b448:	f851 4b04 	ldr.w	r4, [r1], #4
 800b44c:	f8be 2000 	ldrh.w	r2, [lr]
 800b450:	0c24      	lsrs	r4, r4, #16
 800b452:	fb09 2404 	mla	r4, r9, r4, r2
 800b456:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b45a:	458c      	cmp	ip, r1
 800b45c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b460:	d8e7      	bhi.n	800b432 <__multiply+0xfe>
 800b462:	9a01      	ldr	r2, [sp, #4]
 800b464:	50b4      	str	r4, [r6, r2]
 800b466:	3604      	adds	r6, #4
 800b468:	e7a3      	b.n	800b3b2 <__multiply+0x7e>
 800b46a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1a5      	bne.n	800b3be <__multiply+0x8a>
 800b472:	3f01      	subs	r7, #1
 800b474:	e7a1      	b.n	800b3ba <__multiply+0x86>
 800b476:	bf00      	nop
 800b478:	0800eb2f 	.word	0x0800eb2f
 800b47c:	0800eba0 	.word	0x0800eba0

0800b480 <__pow5mult>:
 800b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b484:	4615      	mov	r5, r2
 800b486:	f012 0203 	ands.w	r2, r2, #3
 800b48a:	4606      	mov	r6, r0
 800b48c:	460f      	mov	r7, r1
 800b48e:	d007      	beq.n	800b4a0 <__pow5mult+0x20>
 800b490:	4c25      	ldr	r4, [pc, #148]	; (800b528 <__pow5mult+0xa8>)
 800b492:	3a01      	subs	r2, #1
 800b494:	2300      	movs	r3, #0
 800b496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b49a:	f7ff fe9b 	bl	800b1d4 <__multadd>
 800b49e:	4607      	mov	r7, r0
 800b4a0:	10ad      	asrs	r5, r5, #2
 800b4a2:	d03d      	beq.n	800b520 <__pow5mult+0xa0>
 800b4a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4a6:	b97c      	cbnz	r4, 800b4c8 <__pow5mult+0x48>
 800b4a8:	2010      	movs	r0, #16
 800b4aa:	f7ff fe29 	bl	800b100 <malloc>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	6270      	str	r0, [r6, #36]	; 0x24
 800b4b2:	b928      	cbnz	r0, 800b4c0 <__pow5mult+0x40>
 800b4b4:	4b1d      	ldr	r3, [pc, #116]	; (800b52c <__pow5mult+0xac>)
 800b4b6:	481e      	ldr	r0, [pc, #120]	; (800b530 <__pow5mult+0xb0>)
 800b4b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4bc:	f000 fac6 	bl	800ba4c <__assert_func>
 800b4c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4c4:	6004      	str	r4, [r0, #0]
 800b4c6:	60c4      	str	r4, [r0, #12]
 800b4c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4d0:	b94c      	cbnz	r4, 800b4e6 <__pow5mult+0x66>
 800b4d2:	f240 2171 	movw	r1, #625	; 0x271
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	f7ff ff16 	bl	800b308 <__i2b>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	f04f 0900 	mov.w	r9, #0
 800b4ea:	07eb      	lsls	r3, r5, #31
 800b4ec:	d50a      	bpl.n	800b504 <__pow5mult+0x84>
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f7ff ff1e 	bl	800b334 <__multiply>
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7ff fe47 	bl	800b190 <_Bfree>
 800b502:	4647      	mov	r7, r8
 800b504:	106d      	asrs	r5, r5, #1
 800b506:	d00b      	beq.n	800b520 <__pow5mult+0xa0>
 800b508:	6820      	ldr	r0, [r4, #0]
 800b50a:	b938      	cbnz	r0, 800b51c <__pow5mult+0x9c>
 800b50c:	4622      	mov	r2, r4
 800b50e:	4621      	mov	r1, r4
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff ff0f 	bl	800b334 <__multiply>
 800b516:	6020      	str	r0, [r4, #0]
 800b518:	f8c0 9000 	str.w	r9, [r0]
 800b51c:	4604      	mov	r4, r0
 800b51e:	e7e4      	b.n	800b4ea <__pow5mult+0x6a>
 800b520:	4638      	mov	r0, r7
 800b522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b526:	bf00      	nop
 800b528:	0800ecf0 	.word	0x0800ecf0
 800b52c:	0800eab9 	.word	0x0800eab9
 800b530:	0800eba0 	.word	0x0800eba0

0800b534 <__lshift>:
 800b534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b538:	460c      	mov	r4, r1
 800b53a:	6849      	ldr	r1, [r1, #4]
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	4607      	mov	r7, r0
 800b546:	4691      	mov	r9, r2
 800b548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b54c:	f108 0601 	add.w	r6, r8, #1
 800b550:	42b3      	cmp	r3, r6
 800b552:	db0b      	blt.n	800b56c <__lshift+0x38>
 800b554:	4638      	mov	r0, r7
 800b556:	f7ff fddb 	bl	800b110 <_Balloc>
 800b55a:	4605      	mov	r5, r0
 800b55c:	b948      	cbnz	r0, 800b572 <__lshift+0x3e>
 800b55e:	4602      	mov	r2, r0
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <__lshift+0xd0>)
 800b562:	4829      	ldr	r0, [pc, #164]	; (800b608 <__lshift+0xd4>)
 800b564:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b568:	f000 fa70 	bl	800ba4c <__assert_func>
 800b56c:	3101      	adds	r1, #1
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	e7ee      	b.n	800b550 <__lshift+0x1c>
 800b572:	2300      	movs	r3, #0
 800b574:	f100 0114 	add.w	r1, r0, #20
 800b578:	f100 0210 	add.w	r2, r0, #16
 800b57c:	4618      	mov	r0, r3
 800b57e:	4553      	cmp	r3, sl
 800b580:	db33      	blt.n	800b5ea <__lshift+0xb6>
 800b582:	6920      	ldr	r0, [r4, #16]
 800b584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b588:	f104 0314 	add.w	r3, r4, #20
 800b58c:	f019 091f 	ands.w	r9, r9, #31
 800b590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b598:	d02b      	beq.n	800b5f2 <__lshift+0xbe>
 800b59a:	f1c9 0e20 	rsb	lr, r9, #32
 800b59e:	468a      	mov	sl, r1
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b5a8:	4302      	orrs	r2, r0
 800b5aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b2:	459c      	cmp	ip, r3
 800b5b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5b8:	d8f3      	bhi.n	800b5a2 <__lshift+0x6e>
 800b5ba:	ebac 0304 	sub.w	r3, ip, r4
 800b5be:	3b15      	subs	r3, #21
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	f104 0015 	add.w	r0, r4, #21
 800b5ca:	4584      	cmp	ip, r0
 800b5cc:	bf38      	it	cc
 800b5ce:	2304      	movcc	r3, #4
 800b5d0:	50ca      	str	r2, [r1, r3]
 800b5d2:	b10a      	cbz	r2, 800b5d8 <__lshift+0xa4>
 800b5d4:	f108 0602 	add.w	r6, r8, #2
 800b5d8:	3e01      	subs	r6, #1
 800b5da:	4638      	mov	r0, r7
 800b5dc:	612e      	str	r6, [r5, #16]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	f7ff fdd6 	bl	800b190 <_Bfree>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	e7c5      	b.n	800b57e <__lshift+0x4a>
 800b5f2:	3904      	subs	r1, #4
 800b5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5fc:	459c      	cmp	ip, r3
 800b5fe:	d8f9      	bhi.n	800b5f4 <__lshift+0xc0>
 800b600:	e7ea      	b.n	800b5d8 <__lshift+0xa4>
 800b602:	bf00      	nop
 800b604:	0800eb2f 	.word	0x0800eb2f
 800b608:	0800eba0 	.word	0x0800eba0

0800b60c <__mcmp>:
 800b60c:	b530      	push	{r4, r5, lr}
 800b60e:	6902      	ldr	r2, [r0, #16]
 800b610:	690c      	ldr	r4, [r1, #16]
 800b612:	1b12      	subs	r2, r2, r4
 800b614:	d10e      	bne.n	800b634 <__mcmp+0x28>
 800b616:	f100 0314 	add.w	r3, r0, #20
 800b61a:	3114      	adds	r1, #20
 800b61c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b62c:	42a5      	cmp	r5, r4
 800b62e:	d003      	beq.n	800b638 <__mcmp+0x2c>
 800b630:	d305      	bcc.n	800b63e <__mcmp+0x32>
 800b632:	2201      	movs	r2, #1
 800b634:	4610      	mov	r0, r2
 800b636:	bd30      	pop	{r4, r5, pc}
 800b638:	4283      	cmp	r3, r0
 800b63a:	d3f3      	bcc.n	800b624 <__mcmp+0x18>
 800b63c:	e7fa      	b.n	800b634 <__mcmp+0x28>
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295
 800b642:	e7f7      	b.n	800b634 <__mcmp+0x28>

0800b644 <__mdiff>:
 800b644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	460c      	mov	r4, r1
 800b64a:	4606      	mov	r6, r0
 800b64c:	4611      	mov	r1, r2
 800b64e:	4620      	mov	r0, r4
 800b650:	4617      	mov	r7, r2
 800b652:	f7ff ffdb 	bl	800b60c <__mcmp>
 800b656:	1e05      	subs	r5, r0, #0
 800b658:	d110      	bne.n	800b67c <__mdiff+0x38>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff fd57 	bl	800b110 <_Balloc>
 800b662:	b930      	cbnz	r0, 800b672 <__mdiff+0x2e>
 800b664:	4b39      	ldr	r3, [pc, #228]	; (800b74c <__mdiff+0x108>)
 800b666:	4602      	mov	r2, r0
 800b668:	f240 2132 	movw	r1, #562	; 0x232
 800b66c:	4838      	ldr	r0, [pc, #224]	; (800b750 <__mdiff+0x10c>)
 800b66e:	f000 f9ed 	bl	800ba4c <__assert_func>
 800b672:	2301      	movs	r3, #1
 800b674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	bfa4      	itt	ge
 800b67e:	463b      	movge	r3, r7
 800b680:	4627      	movge	r7, r4
 800b682:	4630      	mov	r0, r6
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	bfa6      	itte	ge
 800b688:	461c      	movge	r4, r3
 800b68a:	2500      	movge	r5, #0
 800b68c:	2501      	movlt	r5, #1
 800b68e:	f7ff fd3f 	bl	800b110 <_Balloc>
 800b692:	b920      	cbnz	r0, 800b69e <__mdiff+0x5a>
 800b694:	4b2d      	ldr	r3, [pc, #180]	; (800b74c <__mdiff+0x108>)
 800b696:	4602      	mov	r2, r0
 800b698:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b69c:	e7e6      	b.n	800b66c <__mdiff+0x28>
 800b69e:	693e      	ldr	r6, [r7, #16]
 800b6a0:	60c5      	str	r5, [r0, #12]
 800b6a2:	6925      	ldr	r5, [r4, #16]
 800b6a4:	f107 0114 	add.w	r1, r7, #20
 800b6a8:	f104 0914 	add.w	r9, r4, #20
 800b6ac:	f100 0e14 	add.w	lr, r0, #20
 800b6b0:	f107 0210 	add.w	r2, r7, #16
 800b6b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b6b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b6bc:	46f2      	mov	sl, lr
 800b6be:	2700      	movs	r7, #0
 800b6c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6c8:	fa1f f883 	uxth.w	r8, r3
 800b6cc:	fa17 f78b 	uxtah	r7, r7, fp
 800b6d0:	0c1b      	lsrs	r3, r3, #16
 800b6d2:	eba7 0808 	sub.w	r8, r7, r8
 800b6d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6de:	fa1f f888 	uxth.w	r8, r8
 800b6e2:	141f      	asrs	r7, r3, #16
 800b6e4:	454d      	cmp	r5, r9
 800b6e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6ea:	f84a 3b04 	str.w	r3, [sl], #4
 800b6ee:	d8e7      	bhi.n	800b6c0 <__mdiff+0x7c>
 800b6f0:	1b2b      	subs	r3, r5, r4
 800b6f2:	3b15      	subs	r3, #21
 800b6f4:	f023 0303 	bic.w	r3, r3, #3
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	3415      	adds	r4, #21
 800b6fc:	42a5      	cmp	r5, r4
 800b6fe:	bf38      	it	cc
 800b700:	2304      	movcc	r3, #4
 800b702:	4419      	add	r1, r3
 800b704:	4473      	add	r3, lr
 800b706:	469e      	mov	lr, r3
 800b708:	460d      	mov	r5, r1
 800b70a:	4565      	cmp	r5, ip
 800b70c:	d30e      	bcc.n	800b72c <__mdiff+0xe8>
 800b70e:	f10c 0203 	add.w	r2, ip, #3
 800b712:	1a52      	subs	r2, r2, r1
 800b714:	f022 0203 	bic.w	r2, r2, #3
 800b718:	3903      	subs	r1, #3
 800b71a:	458c      	cmp	ip, r1
 800b71c:	bf38      	it	cc
 800b71e:	2200      	movcc	r2, #0
 800b720:	441a      	add	r2, r3
 800b722:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b726:	b17b      	cbz	r3, 800b748 <__mdiff+0x104>
 800b728:	6106      	str	r6, [r0, #16]
 800b72a:	e7a5      	b.n	800b678 <__mdiff+0x34>
 800b72c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b730:	fa17 f488 	uxtah	r4, r7, r8
 800b734:	1422      	asrs	r2, r4, #16
 800b736:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b73a:	b2a4      	uxth	r4, r4
 800b73c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b740:	f84e 4b04 	str.w	r4, [lr], #4
 800b744:	1417      	asrs	r7, r2, #16
 800b746:	e7e0      	b.n	800b70a <__mdiff+0xc6>
 800b748:	3e01      	subs	r6, #1
 800b74a:	e7ea      	b.n	800b722 <__mdiff+0xde>
 800b74c:	0800eb2f 	.word	0x0800eb2f
 800b750:	0800eba0 	.word	0x0800eba0

0800b754 <__d2b>:
 800b754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b758:	4689      	mov	r9, r1
 800b75a:	2101      	movs	r1, #1
 800b75c:	ec57 6b10 	vmov	r6, r7, d0
 800b760:	4690      	mov	r8, r2
 800b762:	f7ff fcd5 	bl	800b110 <_Balloc>
 800b766:	4604      	mov	r4, r0
 800b768:	b930      	cbnz	r0, 800b778 <__d2b+0x24>
 800b76a:	4602      	mov	r2, r0
 800b76c:	4b25      	ldr	r3, [pc, #148]	; (800b804 <__d2b+0xb0>)
 800b76e:	4826      	ldr	r0, [pc, #152]	; (800b808 <__d2b+0xb4>)
 800b770:	f240 310a 	movw	r1, #778	; 0x30a
 800b774:	f000 f96a 	bl	800ba4c <__assert_func>
 800b778:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b77c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b780:	bb35      	cbnz	r5, 800b7d0 <__d2b+0x7c>
 800b782:	2e00      	cmp	r6, #0
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	d028      	beq.n	800b7da <__d2b+0x86>
 800b788:	4668      	mov	r0, sp
 800b78a:	9600      	str	r6, [sp, #0]
 800b78c:	f7ff fd8c 	bl	800b2a8 <__lo0bits>
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	b300      	cbz	r0, 800b7d6 <__d2b+0x82>
 800b794:	9a01      	ldr	r2, [sp, #4]
 800b796:	f1c0 0320 	rsb	r3, r0, #32
 800b79a:	fa02 f303 	lsl.w	r3, r2, r3
 800b79e:	430b      	orrs	r3, r1
 800b7a0:	40c2      	lsrs	r2, r0
 800b7a2:	6163      	str	r3, [r4, #20]
 800b7a4:	9201      	str	r2, [sp, #4]
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	61a3      	str	r3, [r4, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bf14      	ite	ne
 800b7ae:	2202      	movne	r2, #2
 800b7b0:	2201      	moveq	r2, #1
 800b7b2:	6122      	str	r2, [r4, #16]
 800b7b4:	b1d5      	cbz	r5, 800b7ec <__d2b+0x98>
 800b7b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7ba:	4405      	add	r5, r0
 800b7bc:	f8c9 5000 	str.w	r5, [r9]
 800b7c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7c4:	f8c8 0000 	str.w	r0, [r8]
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	b003      	add	sp, #12
 800b7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7d4:	e7d5      	b.n	800b782 <__d2b+0x2e>
 800b7d6:	6161      	str	r1, [r4, #20]
 800b7d8:	e7e5      	b.n	800b7a6 <__d2b+0x52>
 800b7da:	a801      	add	r0, sp, #4
 800b7dc:	f7ff fd64 	bl	800b2a8 <__lo0bits>
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	6163      	str	r3, [r4, #20]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	6122      	str	r2, [r4, #16]
 800b7e8:	3020      	adds	r0, #32
 800b7ea:	e7e3      	b.n	800b7b4 <__d2b+0x60>
 800b7ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7f4:	f8c9 0000 	str.w	r0, [r9]
 800b7f8:	6918      	ldr	r0, [r3, #16]
 800b7fa:	f7ff fd35 	bl	800b268 <__hi0bits>
 800b7fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b802:	e7df      	b.n	800b7c4 <__d2b+0x70>
 800b804:	0800eb2f 	.word	0x0800eb2f
 800b808:	0800eba0 	.word	0x0800eba0

0800b80c <_calloc_r>:
 800b80c:	b513      	push	{r0, r1, r4, lr}
 800b80e:	434a      	muls	r2, r1
 800b810:	4611      	mov	r1, r2
 800b812:	9201      	str	r2, [sp, #4]
 800b814:	f000 f85a 	bl	800b8cc <_malloc_r>
 800b818:	4604      	mov	r4, r0
 800b81a:	b118      	cbz	r0, 800b824 <_calloc_r+0x18>
 800b81c:	9a01      	ldr	r2, [sp, #4]
 800b81e:	2100      	movs	r1, #0
 800b820:	f7fd fea0 	bl	8009564 <memset>
 800b824:	4620      	mov	r0, r4
 800b826:	b002      	add	sp, #8
 800b828:	bd10      	pop	{r4, pc}
	...

0800b82c <_free_r>:
 800b82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b82e:	2900      	cmp	r1, #0
 800b830:	d048      	beq.n	800b8c4 <_free_r+0x98>
 800b832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b836:	9001      	str	r0, [sp, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f1a1 0404 	sub.w	r4, r1, #4
 800b83e:	bfb8      	it	lt
 800b840:	18e4      	addlt	r4, r4, r3
 800b842:	f000 f989 	bl	800bb58 <__malloc_lock>
 800b846:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <_free_r+0x9c>)
 800b848:	9801      	ldr	r0, [sp, #4]
 800b84a:	6813      	ldr	r3, [r2, #0]
 800b84c:	4615      	mov	r5, r2
 800b84e:	b933      	cbnz	r3, 800b85e <_free_r+0x32>
 800b850:	6063      	str	r3, [r4, #4]
 800b852:	6014      	str	r4, [r2, #0]
 800b854:	b003      	add	sp, #12
 800b856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b85a:	f000 b983 	b.w	800bb64 <__malloc_unlock>
 800b85e:	42a3      	cmp	r3, r4
 800b860:	d90b      	bls.n	800b87a <_free_r+0x4e>
 800b862:	6821      	ldr	r1, [r4, #0]
 800b864:	1862      	adds	r2, r4, r1
 800b866:	4293      	cmp	r3, r2
 800b868:	bf04      	itt	eq
 800b86a:	681a      	ldreq	r2, [r3, #0]
 800b86c:	685b      	ldreq	r3, [r3, #4]
 800b86e:	6063      	str	r3, [r4, #4]
 800b870:	bf04      	itt	eq
 800b872:	1852      	addeq	r2, r2, r1
 800b874:	6022      	streq	r2, [r4, #0]
 800b876:	602c      	str	r4, [r5, #0]
 800b878:	e7ec      	b.n	800b854 <_free_r+0x28>
 800b87a:	461a      	mov	r2, r3
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	b10b      	cbz	r3, 800b884 <_free_r+0x58>
 800b880:	42a3      	cmp	r3, r4
 800b882:	d9fa      	bls.n	800b87a <_free_r+0x4e>
 800b884:	6811      	ldr	r1, [r2, #0]
 800b886:	1855      	adds	r5, r2, r1
 800b888:	42a5      	cmp	r5, r4
 800b88a:	d10b      	bne.n	800b8a4 <_free_r+0x78>
 800b88c:	6824      	ldr	r4, [r4, #0]
 800b88e:	4421      	add	r1, r4
 800b890:	1854      	adds	r4, r2, r1
 800b892:	42a3      	cmp	r3, r4
 800b894:	6011      	str	r1, [r2, #0]
 800b896:	d1dd      	bne.n	800b854 <_free_r+0x28>
 800b898:	681c      	ldr	r4, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	6053      	str	r3, [r2, #4]
 800b89e:	4421      	add	r1, r4
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	e7d7      	b.n	800b854 <_free_r+0x28>
 800b8a4:	d902      	bls.n	800b8ac <_free_r+0x80>
 800b8a6:	230c      	movs	r3, #12
 800b8a8:	6003      	str	r3, [r0, #0]
 800b8aa:	e7d3      	b.n	800b854 <_free_r+0x28>
 800b8ac:	6825      	ldr	r5, [r4, #0]
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	428b      	cmp	r3, r1
 800b8b2:	bf04      	itt	eq
 800b8b4:	6819      	ldreq	r1, [r3, #0]
 800b8b6:	685b      	ldreq	r3, [r3, #4]
 800b8b8:	6063      	str	r3, [r4, #4]
 800b8ba:	bf04      	itt	eq
 800b8bc:	1949      	addeq	r1, r1, r5
 800b8be:	6021      	streq	r1, [r4, #0]
 800b8c0:	6054      	str	r4, [r2, #4]
 800b8c2:	e7c7      	b.n	800b854 <_free_r+0x28>
 800b8c4:	b003      	add	sp, #12
 800b8c6:	bd30      	pop	{r4, r5, pc}
 800b8c8:	200004bc 	.word	0x200004bc

0800b8cc <_malloc_r>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	1ccd      	adds	r5, r1, #3
 800b8d0:	f025 0503 	bic.w	r5, r5, #3
 800b8d4:	3508      	adds	r5, #8
 800b8d6:	2d0c      	cmp	r5, #12
 800b8d8:	bf38      	it	cc
 800b8da:	250c      	movcc	r5, #12
 800b8dc:	2d00      	cmp	r5, #0
 800b8de:	4606      	mov	r6, r0
 800b8e0:	db01      	blt.n	800b8e6 <_malloc_r+0x1a>
 800b8e2:	42a9      	cmp	r1, r5
 800b8e4:	d903      	bls.n	800b8ee <_malloc_r+0x22>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	6033      	str	r3, [r6, #0]
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ee:	f000 f933 	bl	800bb58 <__malloc_lock>
 800b8f2:	4921      	ldr	r1, [pc, #132]	; (800b978 <_malloc_r+0xac>)
 800b8f4:	680a      	ldr	r2, [r1, #0]
 800b8f6:	4614      	mov	r4, r2
 800b8f8:	b99c      	cbnz	r4, 800b922 <_malloc_r+0x56>
 800b8fa:	4f20      	ldr	r7, [pc, #128]	; (800b97c <_malloc_r+0xb0>)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	b923      	cbnz	r3, 800b90a <_malloc_r+0x3e>
 800b900:	4621      	mov	r1, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f000 f83c 	bl	800b980 <_sbrk_r>
 800b908:	6038      	str	r0, [r7, #0]
 800b90a:	4629      	mov	r1, r5
 800b90c:	4630      	mov	r0, r6
 800b90e:	f000 f837 	bl	800b980 <_sbrk_r>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	d123      	bne.n	800b95e <_malloc_r+0x92>
 800b916:	230c      	movs	r3, #12
 800b918:	6033      	str	r3, [r6, #0]
 800b91a:	4630      	mov	r0, r6
 800b91c:	f000 f922 	bl	800bb64 <__malloc_unlock>
 800b920:	e7e3      	b.n	800b8ea <_malloc_r+0x1e>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	1b5b      	subs	r3, r3, r5
 800b926:	d417      	bmi.n	800b958 <_malloc_r+0x8c>
 800b928:	2b0b      	cmp	r3, #11
 800b92a:	d903      	bls.n	800b934 <_malloc_r+0x68>
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	441c      	add	r4, r3
 800b930:	6025      	str	r5, [r4, #0]
 800b932:	e004      	b.n	800b93e <_malloc_r+0x72>
 800b934:	6863      	ldr	r3, [r4, #4]
 800b936:	42a2      	cmp	r2, r4
 800b938:	bf0c      	ite	eq
 800b93a:	600b      	streq	r3, [r1, #0]
 800b93c:	6053      	strne	r3, [r2, #4]
 800b93e:	4630      	mov	r0, r6
 800b940:	f000 f910 	bl	800bb64 <__malloc_unlock>
 800b944:	f104 000b 	add.w	r0, r4, #11
 800b948:	1d23      	adds	r3, r4, #4
 800b94a:	f020 0007 	bic.w	r0, r0, #7
 800b94e:	1ac2      	subs	r2, r0, r3
 800b950:	d0cc      	beq.n	800b8ec <_malloc_r+0x20>
 800b952:	1a1b      	subs	r3, r3, r0
 800b954:	50a3      	str	r3, [r4, r2]
 800b956:	e7c9      	b.n	800b8ec <_malloc_r+0x20>
 800b958:	4622      	mov	r2, r4
 800b95a:	6864      	ldr	r4, [r4, #4]
 800b95c:	e7cc      	b.n	800b8f8 <_malloc_r+0x2c>
 800b95e:	1cc4      	adds	r4, r0, #3
 800b960:	f024 0403 	bic.w	r4, r4, #3
 800b964:	42a0      	cmp	r0, r4
 800b966:	d0e3      	beq.n	800b930 <_malloc_r+0x64>
 800b968:	1a21      	subs	r1, r4, r0
 800b96a:	4630      	mov	r0, r6
 800b96c:	f000 f808 	bl	800b980 <_sbrk_r>
 800b970:	3001      	adds	r0, #1
 800b972:	d1dd      	bne.n	800b930 <_malloc_r+0x64>
 800b974:	e7cf      	b.n	800b916 <_malloc_r+0x4a>
 800b976:	bf00      	nop
 800b978:	200004bc 	.word	0x200004bc
 800b97c:	200004c0 	.word	0x200004c0

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f6 faec 	bl	8001f68 <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	2000088c 	.word	0x2000088c

0800b9a0 <__sread>:
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a8:	f000 fa3c 	bl	800be24 <_read_r>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	bfab      	itete	ge
 800b9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9b4:	181b      	addge	r3, r3, r0
 800b9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ba:	bfac      	ite	ge
 800b9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9be:	81a3      	strhlt	r3, [r4, #12]
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <__swrite>:
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	461f      	mov	r7, r3
 800b9c8:	898b      	ldrh	r3, [r1, #12]
 800b9ca:	05db      	lsls	r3, r3, #23
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	d505      	bpl.n	800b9e0 <__swrite+0x1e>
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	2302      	movs	r3, #2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f000 f898 	bl	800bb10 <_lseek_r>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	f000 b817 	b.w	800ba28 <_write_r>

0800b9fa <__sseek>:
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba02:	f000 f885 	bl	800bb10 <_lseek_r>
 800ba06:	1c43      	adds	r3, r0, #1
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	bf15      	itete	ne
 800ba0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba16:	81a3      	strheq	r3, [r4, #12]
 800ba18:	bf18      	it	ne
 800ba1a:	81a3      	strhne	r3, [r4, #12]
 800ba1c:	bd10      	pop	{r4, pc}

0800ba1e <__sclose>:
 800ba1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba22:	f000 b831 	b.w	800ba88 <_close_r>
	...

0800ba28 <_write_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d07      	ldr	r5, [pc, #28]	; (800ba48 <_write_r+0x20>)
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	4608      	mov	r0, r1
 800ba30:	4611      	mov	r1, r2
 800ba32:	2200      	movs	r2, #0
 800ba34:	602a      	str	r2, [r5, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	f7f6 fa45 	bl	8001ec6 <_write>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_write_r+0x1e>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_write_r+0x1e>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	2000088c 	.word	0x2000088c

0800ba4c <__assert_func>:
 800ba4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba4e:	4614      	mov	r4, r2
 800ba50:	461a      	mov	r2, r3
 800ba52:	4b09      	ldr	r3, [pc, #36]	; (800ba78 <__assert_func+0x2c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4605      	mov	r5, r0
 800ba58:	68d8      	ldr	r0, [r3, #12]
 800ba5a:	b14c      	cbz	r4, 800ba70 <__assert_func+0x24>
 800ba5c:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <__assert_func+0x30>)
 800ba5e:	9100      	str	r1, [sp, #0]
 800ba60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba64:	4906      	ldr	r1, [pc, #24]	; (800ba80 <__assert_func+0x34>)
 800ba66:	462b      	mov	r3, r5
 800ba68:	f000 f81e 	bl	800baa8 <fiprintf>
 800ba6c:	f000 f9f9 	bl	800be62 <abort>
 800ba70:	4b04      	ldr	r3, [pc, #16]	; (800ba84 <__assert_func+0x38>)
 800ba72:	461c      	mov	r4, r3
 800ba74:	e7f3      	b.n	800ba5e <__assert_func+0x12>
 800ba76:	bf00      	nop
 800ba78:	20000064 	.word	0x20000064
 800ba7c:	0800ecfc 	.word	0x0800ecfc
 800ba80:	0800ed09 	.word	0x0800ed09
 800ba84:	0800ed37 	.word	0x0800ed37

0800ba88 <_close_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d06      	ldr	r5, [pc, #24]	; (800baa4 <_close_r+0x1c>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f6 fa33 	bl	8001efe <_close>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_close_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_close_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	2000088c 	.word	0x2000088c

0800baa8 <fiprintf>:
 800baa8:	b40e      	push	{r1, r2, r3}
 800baaa:	b503      	push	{r0, r1, lr}
 800baac:	4601      	mov	r1, r0
 800baae:	ab03      	add	r3, sp, #12
 800bab0:	4805      	ldr	r0, [pc, #20]	; (800bac8 <fiprintf+0x20>)
 800bab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab6:	6800      	ldr	r0, [r0, #0]
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	f000 f883 	bl	800bbc4 <_vfiprintf_r>
 800babe:	b002      	add	sp, #8
 800bac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac4:	b003      	add	sp, #12
 800bac6:	4770      	bx	lr
 800bac8:	20000064 	.word	0x20000064

0800bacc <_fstat_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	; (800baec <_fstat_r+0x20>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	4611      	mov	r1, r2
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	f7f6 fa1c 	bl	8001f16 <_fstat>
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	d102      	bne.n	800bae8 <_fstat_r+0x1c>
 800bae2:	682b      	ldr	r3, [r5, #0]
 800bae4:	b103      	cbz	r3, 800bae8 <_fstat_r+0x1c>
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	bd38      	pop	{r3, r4, r5, pc}
 800baea:	bf00      	nop
 800baec:	2000088c 	.word	0x2000088c

0800baf0 <_isatty_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	; (800bb0c <_isatty_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f6 fa1b 	bl	8001f36 <_isatty>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_isatty_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_isatty_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	2000088c 	.word	0x2000088c

0800bb10 <_lseek_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d07      	ldr	r5, [pc, #28]	; (800bb30 <_lseek_r+0x20>)
 800bb14:	4604      	mov	r4, r0
 800bb16:	4608      	mov	r0, r1
 800bb18:	4611      	mov	r1, r2
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	602a      	str	r2, [r5, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f7f6 fa14 	bl	8001f4c <_lseek>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_lseek_r+0x1e>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_lseek_r+0x1e>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	2000088c 	.word	0x2000088c

0800bb34 <__ascii_mbtowc>:
 800bb34:	b082      	sub	sp, #8
 800bb36:	b901      	cbnz	r1, 800bb3a <__ascii_mbtowc+0x6>
 800bb38:	a901      	add	r1, sp, #4
 800bb3a:	b142      	cbz	r2, 800bb4e <__ascii_mbtowc+0x1a>
 800bb3c:	b14b      	cbz	r3, 800bb52 <__ascii_mbtowc+0x1e>
 800bb3e:	7813      	ldrb	r3, [r2, #0]
 800bb40:	600b      	str	r3, [r1, #0]
 800bb42:	7812      	ldrb	r2, [r2, #0]
 800bb44:	1e10      	subs	r0, r2, #0
 800bb46:	bf18      	it	ne
 800bb48:	2001      	movne	r0, #1
 800bb4a:	b002      	add	sp, #8
 800bb4c:	4770      	bx	lr
 800bb4e:	4610      	mov	r0, r2
 800bb50:	e7fb      	b.n	800bb4a <__ascii_mbtowc+0x16>
 800bb52:	f06f 0001 	mvn.w	r0, #1
 800bb56:	e7f8      	b.n	800bb4a <__ascii_mbtowc+0x16>

0800bb58 <__malloc_lock>:
 800bb58:	4801      	ldr	r0, [pc, #4]	; (800bb60 <__malloc_lock+0x8>)
 800bb5a:	f7ff ba6a 	b.w	800b032 <__retarget_lock_acquire_recursive>
 800bb5e:	bf00      	nop
 800bb60:	20000884 	.word	0x20000884

0800bb64 <__malloc_unlock>:
 800bb64:	4801      	ldr	r0, [pc, #4]	; (800bb6c <__malloc_unlock+0x8>)
 800bb66:	f7ff ba65 	b.w	800b034 <__retarget_lock_release_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	20000884 	.word	0x20000884

0800bb70 <__sfputc_r>:
 800bb70:	6893      	ldr	r3, [r2, #8]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	b410      	push	{r4}
 800bb78:	6093      	str	r3, [r2, #8]
 800bb7a:	da08      	bge.n	800bb8e <__sfputc_r+0x1e>
 800bb7c:	6994      	ldr	r4, [r2, #24]
 800bb7e:	42a3      	cmp	r3, r4
 800bb80:	db01      	blt.n	800bb86 <__sfputc_r+0x16>
 800bb82:	290a      	cmp	r1, #10
 800bb84:	d103      	bne.n	800bb8e <__sfputc_r+0x1e>
 800bb86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb8a:	f7fe b95d 	b.w	8009e48 <__swbuf_r>
 800bb8e:	6813      	ldr	r3, [r2, #0]
 800bb90:	1c58      	adds	r0, r3, #1
 800bb92:	6010      	str	r0, [r2, #0]
 800bb94:	7019      	strb	r1, [r3, #0]
 800bb96:	4608      	mov	r0, r1
 800bb98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <__sfputs_r>:
 800bb9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba0:	4606      	mov	r6, r0
 800bba2:	460f      	mov	r7, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	18d5      	adds	r5, r2, r3
 800bba8:	42ac      	cmp	r4, r5
 800bbaa:	d101      	bne.n	800bbb0 <__sfputs_r+0x12>
 800bbac:	2000      	movs	r0, #0
 800bbae:	e007      	b.n	800bbc0 <__sfputs_r+0x22>
 800bbb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb4:	463a      	mov	r2, r7
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f7ff ffda 	bl	800bb70 <__sfputc_r>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d1f3      	bne.n	800bba8 <__sfputs_r+0xa>
 800bbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbc4 <_vfiprintf_r>:
 800bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	460d      	mov	r5, r1
 800bbca:	b09d      	sub	sp, #116	; 0x74
 800bbcc:	4614      	mov	r4, r2
 800bbce:	4698      	mov	r8, r3
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	b118      	cbz	r0, 800bbdc <_vfiprintf_r+0x18>
 800bbd4:	6983      	ldr	r3, [r0, #24]
 800bbd6:	b90b      	cbnz	r3, 800bbdc <_vfiprintf_r+0x18>
 800bbd8:	f7ff f988 	bl	800aeec <__sinit>
 800bbdc:	4b89      	ldr	r3, [pc, #548]	; (800be04 <_vfiprintf_r+0x240>)
 800bbde:	429d      	cmp	r5, r3
 800bbe0:	d11b      	bne.n	800bc1a <_vfiprintf_r+0x56>
 800bbe2:	6875      	ldr	r5, [r6, #4]
 800bbe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe6:	07d9      	lsls	r1, r3, #31
 800bbe8:	d405      	bmi.n	800bbf6 <_vfiprintf_r+0x32>
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	059a      	lsls	r2, r3, #22
 800bbee:	d402      	bmi.n	800bbf6 <_vfiprintf_r+0x32>
 800bbf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf2:	f7ff fa1e 	bl	800b032 <__retarget_lock_acquire_recursive>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	071b      	lsls	r3, r3, #28
 800bbfa:	d501      	bpl.n	800bc00 <_vfiprintf_r+0x3c>
 800bbfc:	692b      	ldr	r3, [r5, #16]
 800bbfe:	b9eb      	cbnz	r3, 800bc3c <_vfiprintf_r+0x78>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7fe f972 	bl	8009eec <__swsetup_r>
 800bc08:	b1c0      	cbz	r0, 800bc3c <_vfiprintf_r+0x78>
 800bc0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc0c:	07dc      	lsls	r4, r3, #31
 800bc0e:	d50e      	bpl.n	800bc2e <_vfiprintf_r+0x6a>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	b01d      	add	sp, #116	; 0x74
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	4b7b      	ldr	r3, [pc, #492]	; (800be08 <_vfiprintf_r+0x244>)
 800bc1c:	429d      	cmp	r5, r3
 800bc1e:	d101      	bne.n	800bc24 <_vfiprintf_r+0x60>
 800bc20:	68b5      	ldr	r5, [r6, #8]
 800bc22:	e7df      	b.n	800bbe4 <_vfiprintf_r+0x20>
 800bc24:	4b79      	ldr	r3, [pc, #484]	; (800be0c <_vfiprintf_r+0x248>)
 800bc26:	429d      	cmp	r5, r3
 800bc28:	bf08      	it	eq
 800bc2a:	68f5      	ldreq	r5, [r6, #12]
 800bc2c:	e7da      	b.n	800bbe4 <_vfiprintf_r+0x20>
 800bc2e:	89ab      	ldrh	r3, [r5, #12]
 800bc30:	0598      	lsls	r0, r3, #22
 800bc32:	d4ed      	bmi.n	800bc10 <_vfiprintf_r+0x4c>
 800bc34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc36:	f7ff f9fd 	bl	800b034 <__retarget_lock_release_recursive>
 800bc3a:	e7e9      	b.n	800bc10 <_vfiprintf_r+0x4c>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc40:	2320      	movs	r3, #32
 800bc42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc4a:	2330      	movs	r3, #48	; 0x30
 800bc4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be10 <_vfiprintf_r+0x24c>
 800bc50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc54:	f04f 0901 	mov.w	r9, #1
 800bc58:	4623      	mov	r3, r4
 800bc5a:	469a      	mov	sl, r3
 800bc5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc60:	b10a      	cbz	r2, 800bc66 <_vfiprintf_r+0xa2>
 800bc62:	2a25      	cmp	r2, #37	; 0x25
 800bc64:	d1f9      	bne.n	800bc5a <_vfiprintf_r+0x96>
 800bc66:	ebba 0b04 	subs.w	fp, sl, r4
 800bc6a:	d00b      	beq.n	800bc84 <_vfiprintf_r+0xc0>
 800bc6c:	465b      	mov	r3, fp
 800bc6e:	4622      	mov	r2, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ff93 	bl	800bb9e <__sfputs_r>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f000 80aa 	beq.w	800bdd2 <_vfiprintf_r+0x20e>
 800bc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc80:	445a      	add	r2, fp
 800bc82:	9209      	str	r2, [sp, #36]	; 0x24
 800bc84:	f89a 3000 	ldrb.w	r3, [sl]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 80a2 	beq.w	800bdd2 <_vfiprintf_r+0x20e>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f04f 32ff 	mov.w	r2, #4294967295
 800bc94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc98:	f10a 0a01 	add.w	sl, sl, #1
 800bc9c:	9304      	str	r3, [sp, #16]
 800bc9e:	9307      	str	r3, [sp, #28]
 800bca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bca4:	931a      	str	r3, [sp, #104]	; 0x68
 800bca6:	4654      	mov	r4, sl
 800bca8:	2205      	movs	r2, #5
 800bcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcae:	4858      	ldr	r0, [pc, #352]	; (800be10 <_vfiprintf_r+0x24c>)
 800bcb0:	f7f4 faa6 	bl	8000200 <memchr>
 800bcb4:	9a04      	ldr	r2, [sp, #16]
 800bcb6:	b9d8      	cbnz	r0, 800bcf0 <_vfiprintf_r+0x12c>
 800bcb8:	06d1      	lsls	r1, r2, #27
 800bcba:	bf44      	itt	mi
 800bcbc:	2320      	movmi	r3, #32
 800bcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcc2:	0713      	lsls	r3, r2, #28
 800bcc4:	bf44      	itt	mi
 800bcc6:	232b      	movmi	r3, #43	; 0x2b
 800bcc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bccc:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd0:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd2:	d015      	beq.n	800bd00 <_vfiprintf_r+0x13c>
 800bcd4:	9a07      	ldr	r2, [sp, #28]
 800bcd6:	4654      	mov	r4, sl
 800bcd8:	2000      	movs	r0, #0
 800bcda:	f04f 0c0a 	mov.w	ip, #10
 800bcde:	4621      	mov	r1, r4
 800bce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bce4:	3b30      	subs	r3, #48	; 0x30
 800bce6:	2b09      	cmp	r3, #9
 800bce8:	d94e      	bls.n	800bd88 <_vfiprintf_r+0x1c4>
 800bcea:	b1b0      	cbz	r0, 800bd1a <_vfiprintf_r+0x156>
 800bcec:	9207      	str	r2, [sp, #28]
 800bcee:	e014      	b.n	800bd1a <_vfiprintf_r+0x156>
 800bcf0:	eba0 0308 	sub.w	r3, r0, r8
 800bcf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	46a2      	mov	sl, r4
 800bcfe:	e7d2      	b.n	800bca6 <_vfiprintf_r+0xe2>
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	1d19      	adds	r1, r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	9103      	str	r1, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfbb      	ittet	lt
 800bd0c:	425b      	neglt	r3, r3
 800bd0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd12:	9307      	strge	r3, [sp, #28]
 800bd14:	9307      	strlt	r3, [sp, #28]
 800bd16:	bfb8      	it	lt
 800bd18:	9204      	strlt	r2, [sp, #16]
 800bd1a:	7823      	ldrb	r3, [r4, #0]
 800bd1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd1e:	d10c      	bne.n	800bd3a <_vfiprintf_r+0x176>
 800bd20:	7863      	ldrb	r3, [r4, #1]
 800bd22:	2b2a      	cmp	r3, #42	; 0x2a
 800bd24:	d135      	bne.n	800bd92 <_vfiprintf_r+0x1ce>
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	1d1a      	adds	r2, r3, #4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	9203      	str	r2, [sp, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	bfb8      	it	lt
 800bd32:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd36:	3402      	adds	r4, #2
 800bd38:	9305      	str	r3, [sp, #20]
 800bd3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be20 <_vfiprintf_r+0x25c>
 800bd3e:	7821      	ldrb	r1, [r4, #0]
 800bd40:	2203      	movs	r2, #3
 800bd42:	4650      	mov	r0, sl
 800bd44:	f7f4 fa5c 	bl	8000200 <memchr>
 800bd48:	b140      	cbz	r0, 800bd5c <_vfiprintf_r+0x198>
 800bd4a:	2340      	movs	r3, #64	; 0x40
 800bd4c:	eba0 000a 	sub.w	r0, r0, sl
 800bd50:	fa03 f000 	lsl.w	r0, r3, r0
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	4303      	orrs	r3, r0
 800bd58:	3401      	adds	r4, #1
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd60:	482c      	ldr	r0, [pc, #176]	; (800be14 <_vfiprintf_r+0x250>)
 800bd62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd66:	2206      	movs	r2, #6
 800bd68:	f7f4 fa4a 	bl	8000200 <memchr>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d03f      	beq.n	800bdf0 <_vfiprintf_r+0x22c>
 800bd70:	4b29      	ldr	r3, [pc, #164]	; (800be18 <_vfiprintf_r+0x254>)
 800bd72:	bb1b      	cbnz	r3, 800bdbc <_vfiprintf_r+0x1f8>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	3307      	adds	r3, #7
 800bd78:	f023 0307 	bic.w	r3, r3, #7
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd82:	443b      	add	r3, r7
 800bd84:	9309      	str	r3, [sp, #36]	; 0x24
 800bd86:	e767      	b.n	800bc58 <_vfiprintf_r+0x94>
 800bd88:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	2001      	movs	r0, #1
 800bd90:	e7a5      	b.n	800bcde <_vfiprintf_r+0x11a>
 800bd92:	2300      	movs	r3, #0
 800bd94:	3401      	adds	r4, #1
 800bd96:	9305      	str	r3, [sp, #20]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f04f 0c0a 	mov.w	ip, #10
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bda4:	3a30      	subs	r2, #48	; 0x30
 800bda6:	2a09      	cmp	r2, #9
 800bda8:	d903      	bls.n	800bdb2 <_vfiprintf_r+0x1ee>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0c5      	beq.n	800bd3a <_vfiprintf_r+0x176>
 800bdae:	9105      	str	r1, [sp, #20]
 800bdb0:	e7c3      	b.n	800bd3a <_vfiprintf_r+0x176>
 800bdb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e7f0      	b.n	800bd9e <_vfiprintf_r+0x1da>
 800bdbc:	ab03      	add	r3, sp, #12
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	462a      	mov	r2, r5
 800bdc2:	4b16      	ldr	r3, [pc, #88]	; (800be1c <_vfiprintf_r+0x258>)
 800bdc4:	a904      	add	r1, sp, #16
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7fd fc74 	bl	80096b4 <_printf_float>
 800bdcc:	4607      	mov	r7, r0
 800bdce:	1c78      	adds	r0, r7, #1
 800bdd0:	d1d6      	bne.n	800bd80 <_vfiprintf_r+0x1bc>
 800bdd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdd4:	07d9      	lsls	r1, r3, #31
 800bdd6:	d405      	bmi.n	800bde4 <_vfiprintf_r+0x220>
 800bdd8:	89ab      	ldrh	r3, [r5, #12]
 800bdda:	059a      	lsls	r2, r3, #22
 800bddc:	d402      	bmi.n	800bde4 <_vfiprintf_r+0x220>
 800bdde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bde0:	f7ff f928 	bl	800b034 <__retarget_lock_release_recursive>
 800bde4:	89ab      	ldrh	r3, [r5, #12]
 800bde6:	065b      	lsls	r3, r3, #25
 800bde8:	f53f af12 	bmi.w	800bc10 <_vfiprintf_r+0x4c>
 800bdec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdee:	e711      	b.n	800bc14 <_vfiprintf_r+0x50>
 800bdf0:	ab03      	add	r3, sp, #12
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	4b09      	ldr	r3, [pc, #36]	; (800be1c <_vfiprintf_r+0x258>)
 800bdf8:	a904      	add	r1, sp, #16
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7fd fefe 	bl	8009bfc <_printf_i>
 800be00:	e7e4      	b.n	800bdcc <_vfiprintf_r+0x208>
 800be02:	bf00      	nop
 800be04:	0800eb60 	.word	0x0800eb60
 800be08:	0800eb80 	.word	0x0800eb80
 800be0c:	0800eb40 	.word	0x0800eb40
 800be10:	0800ed42 	.word	0x0800ed42
 800be14:	0800ed4c 	.word	0x0800ed4c
 800be18:	080096b5 	.word	0x080096b5
 800be1c:	0800bb9f 	.word	0x0800bb9f
 800be20:	0800ed48 	.word	0x0800ed48

0800be24 <_read_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4d07      	ldr	r5, [pc, #28]	; (800be44 <_read_r+0x20>)
 800be28:	4604      	mov	r4, r0
 800be2a:	4608      	mov	r0, r1
 800be2c:	4611      	mov	r1, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	602a      	str	r2, [r5, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	f7f6 f82a 	bl	8001e8c <_read>
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	d102      	bne.n	800be42 <_read_r+0x1e>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	b103      	cbz	r3, 800be42 <_read_r+0x1e>
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	bd38      	pop	{r3, r4, r5, pc}
 800be44:	2000088c 	.word	0x2000088c

0800be48 <__ascii_wctomb>:
 800be48:	b149      	cbz	r1, 800be5e <__ascii_wctomb+0x16>
 800be4a:	2aff      	cmp	r2, #255	; 0xff
 800be4c:	bf85      	ittet	hi
 800be4e:	238a      	movhi	r3, #138	; 0x8a
 800be50:	6003      	strhi	r3, [r0, #0]
 800be52:	700a      	strbls	r2, [r1, #0]
 800be54:	f04f 30ff 	movhi.w	r0, #4294967295
 800be58:	bf98      	it	ls
 800be5a:	2001      	movls	r0, #1
 800be5c:	4770      	bx	lr
 800be5e:	4608      	mov	r0, r1
 800be60:	4770      	bx	lr

0800be62 <abort>:
 800be62:	b508      	push	{r3, lr}
 800be64:	2006      	movs	r0, #6
 800be66:	f000 f82b 	bl	800bec0 <raise>
 800be6a:	2001      	movs	r0, #1
 800be6c:	f7f6 f804 	bl	8001e78 <_exit>

0800be70 <_raise_r>:
 800be70:	291f      	cmp	r1, #31
 800be72:	b538      	push	{r3, r4, r5, lr}
 800be74:	4604      	mov	r4, r0
 800be76:	460d      	mov	r5, r1
 800be78:	d904      	bls.n	800be84 <_raise_r+0x14>
 800be7a:	2316      	movs	r3, #22
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	f04f 30ff 	mov.w	r0, #4294967295
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be86:	b112      	cbz	r2, 800be8e <_raise_r+0x1e>
 800be88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be8c:	b94b      	cbnz	r3, 800bea2 <_raise_r+0x32>
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 f830 	bl	800bef4 <_getpid_r>
 800be94:	462a      	mov	r2, r5
 800be96:	4601      	mov	r1, r0
 800be98:	4620      	mov	r0, r4
 800be9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9e:	f000 b817 	b.w	800bed0 <_kill_r>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d00a      	beq.n	800bebc <_raise_r+0x4c>
 800bea6:	1c59      	adds	r1, r3, #1
 800bea8:	d103      	bne.n	800beb2 <_raise_r+0x42>
 800beaa:	2316      	movs	r3, #22
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	2001      	movs	r0, #1
 800beb0:	e7e7      	b.n	800be82 <_raise_r+0x12>
 800beb2:	2400      	movs	r4, #0
 800beb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beb8:	4628      	mov	r0, r5
 800beba:	4798      	blx	r3
 800bebc:	2000      	movs	r0, #0
 800bebe:	e7e0      	b.n	800be82 <_raise_r+0x12>

0800bec0 <raise>:
 800bec0:	4b02      	ldr	r3, [pc, #8]	; (800becc <raise+0xc>)
 800bec2:	4601      	mov	r1, r0
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	f7ff bfd3 	b.w	800be70 <_raise_r>
 800beca:	bf00      	nop
 800becc:	20000064 	.word	0x20000064

0800bed0 <_kill_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d07      	ldr	r5, [pc, #28]	; (800bef0 <_kill_r+0x20>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	4611      	mov	r1, r2
 800bedc:	602b      	str	r3, [r5, #0]
 800bede:	f7f5 ffbb 	bl	8001e58 <_kill>
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	d102      	bne.n	800beec <_kill_r+0x1c>
 800bee6:	682b      	ldr	r3, [r5, #0]
 800bee8:	b103      	cbz	r3, 800beec <_kill_r+0x1c>
 800beea:	6023      	str	r3, [r4, #0]
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	bf00      	nop
 800bef0:	2000088c 	.word	0x2000088c

0800bef4 <_getpid_r>:
 800bef4:	f7f5 bfa8 	b.w	8001e48 <_getpid>

0800bef8 <_init>:
 800bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befa:	bf00      	nop
 800befc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befe:	bc08      	pop	{r3}
 800bf00:	469e      	mov	lr, r3
 800bf02:	4770      	bx	lr

0800bf04 <_fini>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	bf00      	nop
 800bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0a:	bc08      	pop	{r3}
 800bf0c:	469e      	mov	lr, r3
 800bf0e:	4770      	bx	lr
