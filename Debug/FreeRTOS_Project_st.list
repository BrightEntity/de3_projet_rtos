
FreeRTOS_Project_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d208  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000303c  0800d3b8  0800d3b8  0001d3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103f4  080103f4  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  080103f4  080103f4  000203f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103fc  080103fc  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103fc  080103fc  000203fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010400  08010400  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08010404  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000234  08010638  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  08010638  00030890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a763  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000572c  00000000  00000000  0005a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  000600f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c18  00000000  00000000  00061f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000495db  00000000  00000000  00063b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259b3  00000000  00000000  000ad173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3d14  00000000  00000000  000d2b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c683a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ec0  00000000  00000000  001c6890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000234 	.word	0x20000234
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d3a0 	.word	0x0800d3a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000238 	.word	0x20000238
 80001ec:	0800d3a0 	.word	0x0800d3a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA2D_Init+0x60>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000ef6:	f003 f8a1 	bl	800403c <HAL_DMA2D_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f00:	f000 ff9a 	bl	8001e38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_DMA2D_Init+0x5c>)
 8000f08:	f003 fb06 	bl	8004518 <HAL_DMA2D_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 ff91 	bl	8001e38 <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200004c4 	.word	0x200004c4
 8000f20:	4002b000 	.word	0x4002b000

08000f24 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_DMA2D_MspInit+0x48>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f002 fe66 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f5c:	205a      	movs	r0, #90	; 0x5a
 8000f5e:	f002 fe7f 	bl	8003c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4002b000 	.word	0x4002b000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_FMC_Init+0x98>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_FMC_Init+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_FMC_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_FMC_Init+0x98>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_FMC_Init+0x98>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_FMC_Init+0x98>)
 8000fac:	2240      	movs	r2, #64	; 0x40
 8000fae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_FMC_Init+0x98>)
 8000fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000fb6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_FMC_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_FMC_Init+0x98>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_FMC_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_FMC_Init+0x98>)
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_FMC_Init+0x98>)
 8000ff6:	f006 fa35 	bl	8007464 <HAL_SDRAM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001000:	f000 ff1a 	bl	8001e38 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000504 	.word	0x20000504
 8001010:	a0000140 	.word	0xa0000140

08001014 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_FMC_MspInit+0x104>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d16f      	bne.n	8001110 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_FMC_MspInit+0x104>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_FMC_MspInit+0x108>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_FMC_MspInit+0x10c>)
 800106e:	f003 fb81 	bl	8004774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_FMC_MspInit+0x110>)
 800108c:	f003 fb72 	bl	8004774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001090:	f248 1333 	movw	r3, #33075	; 0x8133
 8001094:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <HAL_FMC_MspInit+0x114>)
 80010ac:	f003 fb62 	bl	8004774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_FMC_MspInit+0x118>)
 80010cc:	f003 fb52 	bl	8004774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_FMC_MspInit+0x11c>)
 80010ec:	f003 fb42 	bl	8004774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <HAL_FMC_MspInit+0x120>)
 800110a:	f003 fb33 	bl	8004774 <HAL_GPIO_Init>
 800110e:	e000      	b.n	8001112 <HAL_FMC_MspInit+0xfe>
    return;
 8001110:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000250 	.word	0x20000250
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400
 8001124:	40020800 	.word	0x40020800
 8001128:	40021800 	.word	0x40021800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001140:	f7ff ff68 	bl	8001014 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	4b89      	ldr	r3, [pc, #548]	; (800138c <MX_GPIO_Init+0x240>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a88      	ldr	r2, [pc, #544]	; (800138c <MX_GPIO_Init+0x240>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b86      	ldr	r3, [pc, #536]	; (800138c <MX_GPIO_Init+0x240>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	4b82      	ldr	r3, [pc, #520]	; (800138c <MX_GPIO_Init+0x240>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a81      	ldr	r2, [pc, #516]	; (800138c <MX_GPIO_Init+0x240>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b7f      	ldr	r3, [pc, #508]	; (800138c <MX_GPIO_Init+0x240>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	4b7b      	ldr	r3, [pc, #492]	; (800138c <MX_GPIO_Init+0x240>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a7a      	ldr	r2, [pc, #488]	; (800138c <MX_GPIO_Init+0x240>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b78      	ldr	r3, [pc, #480]	; (800138c <MX_GPIO_Init+0x240>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <MX_GPIO_Init+0x240>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a73      	ldr	r2, [pc, #460]	; (800138c <MX_GPIO_Init+0x240>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b71      	ldr	r3, [pc, #452]	; (800138c <MX_GPIO_Init+0x240>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <MX_GPIO_Init+0x240>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a6c      	ldr	r2, [pc, #432]	; (800138c <MX_GPIO_Init+0x240>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b6a      	ldr	r3, [pc, #424]	; (800138c <MX_GPIO_Init+0x240>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <MX_GPIO_Init+0x240>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <MX_GPIO_Init+0x240>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <MX_GPIO_Init+0x240>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <MX_GPIO_Init+0x240>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a5e      	ldr	r2, [pc, #376]	; (800138c <MX_GPIO_Init+0x240>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <MX_GPIO_Init+0x240>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <MX_GPIO_Init+0x240>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a57      	ldr	r2, [pc, #348]	; (800138c <MX_GPIO_Init+0x240>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <MX_GPIO_Init+0x240>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2116      	movs	r1, #22
 8001246:	4852      	ldr	r0, [pc, #328]	; (8001390 <MX_GPIO_Init+0x244>)
 8001248:	f003 fd4c 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4850      	ldr	r0, [pc, #320]	; (8001394 <MX_GPIO_Init+0x248>)
 8001252:	f003 fd47 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800125c:	484e      	ldr	r0, [pc, #312]	; (8001398 <MX_GPIO_Init+0x24c>)
 800125e:	f003 fd41 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001268:	484c      	ldr	r0, [pc, #304]	; (800139c <MX_GPIO_Init+0x250>)
 800126a:	f003 fd3b 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800126e:	2316      	movs	r3, #22
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4842      	ldr	r0, [pc, #264]	; (8001390 <MX_GPIO_Init+0x244>)
 8001286:	f003 fa75 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800128a:	f248 0307 	movw	r3, #32775	; 0x8007
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <MX_GPIO_Init+0x254>)
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	483d      	ldr	r0, [pc, #244]	; (8001394 <MX_GPIO_Init+0x248>)
 80012a0:	f003 fa68 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4836      	ldr	r0, [pc, #216]	; (8001394 <MX_GPIO_Init+0x248>)
 80012bc:	f003 fa5a 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012c0:	2320      	movs	r3, #32
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <MX_GPIO_Init+0x254>)
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <MX_GPIO_Init+0x244>)
 80012d4:	f003 fa4e 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	482e      	ldr	r0, [pc, #184]	; (80013a4 <MX_GPIO_Init+0x258>)
 80012ec:	f003 fa42 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80012f0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001302:	230c      	movs	r3, #12
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4825      	ldr	r0, [pc, #148]	; (80013a4 <MX_GPIO_Init+0x258>)
 800130e:	f003 fa31 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <MX_GPIO_Init+0x258>)
 8001328:	f003 fa24 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800132c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4815      	ldr	r0, [pc, #84]	; (8001398 <MX_GPIO_Init+0x24c>)
 8001342:	f003 fa17 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001346:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_GPIO_Init+0x24c>)
 8001360:	f003 fa08 	bl	8004774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001364:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_GPIO_Init+0x250>)
 800137e:	f003 f9f9 	bl	8004774 <HAL_GPIO_Init>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	; 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40020800 	.word	0x40020800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021800 	.word	0x40021800
 80013a0:	10120000 	.word	0x10120000
 80013a4:	40020400 	.word	0x40020400

080013a8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_I2C3_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_I2C3_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_I2C3_Init+0x74>)
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <MX_I2C3_Init+0x7c>)
 80013b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_I2C3_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_I2C3_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_I2C3_Init+0x74>)
 80013c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_I2C3_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C3_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_I2C3_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C3_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_I2C3_Init+0x74>)
 80013e6:	f003 fc97 	bl	8004d18 <HAL_I2C_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013f0:	f000 fd22 	bl	8001e38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <MX_I2C3_Init+0x74>)
 80013f8:	f004 fd7b 	bl	8005ef2 <HAL_I2CEx_ConfigAnalogFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fd19 	bl	8001e38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C3_Init+0x74>)
 800140a:	f004 fdae 	bl	8005f6a <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fd10 	bl	8001e38 <Error_Handler>
  }

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000538 	.word	0x20000538
 8001420:	40005c00 	.word	0x40005c00
 8001424:	000186a0 	.word	0x000186a0

08001428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_I2C_MspInit+0xc4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d14b      	bne.n	80014e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <HAL_I2C_MspInit+0xcc>)
 80014a0:	f003 f968 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014aa:	2312      	movs	r3, #18
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014b6:	2304      	movs	r3, #4
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <HAL_I2C_MspInit+0xd0>)
 80014c2:	f003 f957 	bl	8004774 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 80014d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_I2C_MspInit+0xc8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40005c00 	.word	0x40005c00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000

080014fc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2234      	movs	r2, #52	; 0x34
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f009 fa65 	bl	800a9d8 <memset>

  hltdc.Instance = LTDC;
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001510:	4a39      	ldr	r2, [pc, #228]	; (80015f8 <MX_LTDC_Init+0xfc>)
 8001512:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800152e:	2209      	movs	r2, #9
 8001530:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001534:	2201      	movs	r2, #1
 8001536:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800153a:	221d      	movs	r2, #29
 800153c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001540:	2203      	movs	r2, #3
 8001542:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001546:	f240 120d 	movw	r2, #269	; 0x10d
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800154e:	f240 1243 	movw	r2, #323	; 0x143
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001556:	f240 1217 	movw	r2, #279	; 0x117
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800155e:	f240 1247 	movw	r2, #327	; 0x147
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_LTDC_Init+0xf8>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <MX_LTDC_Init+0xf8>)
 800157e:	f004 fd33 	bl	8005fe8 <HAL_LTDC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001588:	f000 fc56 	bl	8001e38 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001590:	23f0      	movs	r3, #240	; 0xf0
 8001592:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001598:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800159c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015a2:	23ff      	movs	r3, #255	; 0xff
 80015a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015b0:	2307      	movs	r3, #7
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80015b4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80015ba:	23f0      	movs	r3, #240	; 0xf0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80015be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_LTDC_Init+0xf8>)
 80015de:	f004 fe95 	bl	800630c <HAL_LTDC_ConfigLayer>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80015e8:	f000 fc26 	bl	8001e38 <Error_Handler>
  }

}
 80015ec:	bf00      	nop
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000058c 	.word	0x2000058c
 80015f8:	40016800 	.word	0x40016800

080015fc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a7b      	ldr	r2, [pc, #492]	; (8001808 <HAL_LTDC_MspInit+0x20c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80f0 	bne.w	8001800 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a78      	ldr	r2, [pc, #480]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800162a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	4b72      	ldr	r3, [pc, #456]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a71      	ldr	r2, [pc, #452]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_LTDC_MspInit+0x210>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a5c      	ldr	r2, [pc, #368]	; (800180c <HAL_LTDC_MspInit+0x210>)
 800169a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a55      	ldr	r2, [pc, #340]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_LTDC_MspInit+0x210>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80016e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016f6:	230e      	movs	r3, #14
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4843      	ldr	r0, [pc, #268]	; (8001810 <HAL_LTDC_MspInit+0x214>)
 8001702:	f003 f837 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001706:	f641 0358 	movw	r3, #6232	; 0x1858
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001718:	230e      	movs	r3, #14
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	483c      	ldr	r0, [pc, #240]	; (8001814 <HAL_LTDC_MspInit+0x218>)
 8001724:	f003 f826 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001728:	2303      	movs	r3, #3
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001738:	2309      	movs	r3, #9
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4835      	ldr	r0, [pc, #212]	; (8001818 <HAL_LTDC_MspInit+0x21c>)
 8001744:	f003 f816 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001748:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175a:	230e      	movs	r3, #14
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	482c      	ldr	r0, [pc, #176]	; (8001818 <HAL_LTDC_MspInit+0x21c>)
 8001766:	f003 f805 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800176a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800177c:	230e      	movs	r3, #14
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4825      	ldr	r0, [pc, #148]	; (800181c <HAL_LTDC_MspInit+0x220>)
 8001788:	f002 fff4 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800178c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800179e:	230e      	movs	r3, #14
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	481d      	ldr	r0, [pc, #116]	; (8001820 <HAL_LTDC_MspInit+0x224>)
 80017aa:	f002 ffe3 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80017ae:	2348      	movs	r3, #72	; 0x48
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017be:	230e      	movs	r3, #14
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <HAL_LTDC_MspInit+0x228>)
 80017ca:	f002 ffd3 	bl	8004774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80017ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017e0:	2309      	movs	r3, #9
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <HAL_LTDC_MspInit+0x220>)
 80017ec:	f002 ffc2 	bl	8004774 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2105      	movs	r1, #5
 80017f4:	2058      	movs	r0, #88	; 0x58
 80017f6:	f002 fa17 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017fa:	2058      	movs	r0, #88	; 0x58
 80017fc:	f002 fa30 	bl	8003c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40016800 	.word	0x40016800
 800180c:	40023800 	.word	0x40023800
 8001810:	40021400 	.word	0x40021400
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	40021800 	.word	0x40021800
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00

08001828 <Calib_G>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RTOS_RunTimeCounter;

void Calib_G(I2C_HandleTypeDef* hi2c3, double* p_g) {
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b091      	sub	sp, #68	; 0x44
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	p_g[0] = 0;
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9c1 2300 	strd	r2, r3, [r1]
	p_g[1] = 0;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f103 0108 	add.w	r1, r3, #8
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9c1 2300 	strd	r2, r3, [r1]
	p_g[2] = 0;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f103 0110 	add.w	r1, r3, #16
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c1 2300 	strd	r2, r3, [r1]

	double p_bias_zero[3];
	p_bias_zero[0] = 0;
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	p_bias_zero[1] = 0;
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	p_bias_zero[2] = 0;
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double p_g_item[3];

	for (int i = 0; i < 100; ++i) {
 8001888:	2300      	movs	r3, #0
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800188c:	e035      	b.n	80018fa <Calib_G+0xd2>
		Measure_G(hi2c3, p_g_item, p_bias_zero);
 800188e:	f107 0220 	add.w	r2, r7, #32
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f008 fef9 	bl	800a690 <Measure_G>
		p_g[0] = p_g[0] + p_g_item[0];
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a8:	f7fe fd00 	bl	80002ac <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	e9c1 2300 	strd	r2, r3, [r1]
		p_g[1] = p_g[1] + p_g_item[1];
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3308      	adds	r3, #8
 80018ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c2:	683c      	ldr	r4, [r7, #0]
 80018c4:	3408      	adds	r4, #8
 80018c6:	f7fe fcf1 	bl	80002ac <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	e9c4 2300 	strd	r2, r3, [r4]
		p_g[2] = p_g[2] +  p_g_item[2];
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3310      	adds	r3, #16
 80018d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018de:	683c      	ldr	r4, [r7, #0]
 80018e0:	3410      	adds	r4, #16
 80018e2:	f7fe fce3 	bl	80002ac <__adddf3>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	e9c4 2300 	strd	r2, r3, [r4]
		HAL_Delay(10);
 80018ee:	200a      	movs	r0, #10
 80018f0:	f002 f8be 	bl	8003a70 <HAL_Delay>
	for (int i = 0; i < 100; ++i) {
 80018f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f6:	3301      	adds	r3, #1
 80018f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fc:	2b63      	cmp	r3, #99	; 0x63
 80018fe:	ddc6      	ble.n	800188e <Calib_G+0x66>
	}

	p_g[0] /= 100;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <Calib_G+0x13c>)
 800190c:	f7fe ffae 	bl	800086c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	e9c1 2300 	strd	r2, r3, [r1]
	p_g[1] /= 100;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3308      	adds	r3, #8
 800191e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f103 0408 	add.w	r4, r3, #8
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <Calib_G+0x13c>)
 800192e:	f7fe ff9d 	bl	800086c <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	e9c4 2300 	strd	r2, r3, [r4]
	p_g[2] /= 100;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3310      	adds	r3, #16
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f103 0410 	add.w	r4, r3, #16
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <Calib_G+0x13c>)
 800194e:	f7fe ff8d 	bl	800086c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9c4 2300 	strd	r2, r3, [r4]
}
 800195a:	bf00      	nop
 800195c:	3744      	adds	r7, #68	; 0x44
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	40590000 	.word	0x40590000

08001968 <RTOS_AppGetRuntimeCounterValueFromISR>:
  RTOS_RunTimeCounter = 0;
  HAL_TIM_Base_Start_IT(&htim7);
}

uint32_t RTOS_AppGetRuntimeCounterValueFromISR(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return RTOS_RunTimeCounter;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <RTOS_AppGetRuntimeCounterValueFromISR+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000634 	.word	0x20000634

08001980 <__io_putchar>:

/*Redirecting printf to USART1*/
int __io_putchar(int ch)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	2201      	movs	r2, #1
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <__io_putchar+0x20>)
 8001992:	f006 ffcc 	bl	800892e <HAL_UART_Transmit>
	return ch;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200006d0 	.word	0x200006d0

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b0be      	sub	sp, #248	; 0xf8
 80019aa:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ac:	f002 f81e 	bl	80039ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b0:	f000 f9a6 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b4:	f7ff fbca 	bl	800114c <MX_GPIO_Init>
  MX_DMA2D_Init();
 80019b8:	f7ff fa82 	bl	8000ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80019bc:	f7ff fada 	bl	8000f74 <MX_FMC_Init>
  MX_I2C3_Init();
 80019c0:	f7ff fcf2 	bl	80013a8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80019c4:	f7ff fd9a 	bl	80014fc <MX_LTDC_Init>
  MX_SPI5_Init();
 80019c8:	f000 fa3e 	bl	8001e48 <MX_SPI5_Init>
  MX_TIM1_Init();
 80019cc:	f000 fc96 	bl	80022fc <MX_TIM1_Init>
  MX_TIM7_Init();
 80019d0:	f000 fd32 	bl	8002438 <MX_TIM7_Init>
  MX_TIM5_Init();
 80019d4:	f000 fce2 	bl	800239c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80019d8:	f000 fdc0 	bl	800255c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*LEDs turned on*/
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e2:	48b7      	ldr	r0, [pc, #732]	; (8001cc0 <main+0x31c>)
 80019e4:	f003 f97e 	bl	8004ce4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ee:	48b4      	ldr	r0, [pc, #720]	; (8001cc0 <main+0x31c>)
 80019f0:	f003 f978 	bl	8004ce4 <HAL_GPIO_WritePin>

 /*LCD screen initialization and test*/
	BSP_LCD_Init();
 80019f4:	f001 f9b0 	bl	8002d58 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 80019f8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80019fc:	2000      	movs	r0, #0
 80019fe:	f001 fa2d 	bl	8002e5c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8001a02:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001a06:	2001      	movs	r0, #1
 8001a08:	f001 fa28 	bl	8002e5c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f001 fa89 	bl	8002f24 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001a12:	f001 fc23 	bl	800325c <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a16:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1a:	f001 faf5 	bl	8003008 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 8001a1e:	48a9      	ldr	r0, [pc, #676]	; (8001cc4 <main+0x320>)
 8001a20:	f001 fac2 	bl	8002fa8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f001 faa4 	bl	8002f74 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 8001a2c:	48a6      	ldr	r0, [pc, #664]	; (8001cc8 <main+0x324>)
 8001a2e:	f001 fa89 	bl	8002f44 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"PROJET", CENTER_MODE);
 8001a32:	f001 fad3 	bl	8002fdc <BSP_LCD_GetFont>
 8001a36:	4603      	mov	r3, r0
 8001a38:	88d9      	ldrh	r1, [r3, #6]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4aa3      	ldr	r2, [pc, #652]	; (8001ccc <main+0x328>)
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f001 fb4e 	bl	80030e0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"SYSTEMES", CENTER_MODE);
 8001a44:	f001 faca 	bl	8002fdc <BSP_LCD_GetFont>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	88db      	ldrh	r3, [r3, #6]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	2301      	movs	r3, #1
 8001a52:	4a9f      	ldr	r2, [pc, #636]	; (8001cd0 <main+0x32c>)
 8001a54:	2000      	movs	r0, #0
 8001a56:	f001 fb43 	bl	80030e0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"TEMPS REEL", CENTER_MODE);
 8001a5a:	f001 fabf 	bl	8002fdc <BSP_LCD_GetFont>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	88db      	ldrh	r3, [r3, #6]
 8001a62:	461a      	mov	r2, r3
 8001a64:	0052      	lsls	r2, r2, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4a99      	ldr	r2, [pc, #612]	; (8001cd4 <main+0x330>)
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f001 fb36 	bl	80030e0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_G_TELECOM);
 8001a74:	4898      	ldr	r0, [pc, #608]	; (8001cd8 <main+0x334>)
 8001a76:	f001 fa65 	bl	8002f44 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"2020/2021", CENTER_MODE);
 8001a7a:	f001 faaf 	bl	8002fdc <BSP_LCD_GetFont>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	88db      	ldrh	r3, [r3, #6]
 8001a82:	461a      	mov	r2, r3
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	4a93      	ldr	r2, [pc, #588]	; (8001cdc <main+0x338>)
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f001 fb26 	bl	80030e0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_R_TELECOM);
 8001a94:	4892      	ldr	r0, [pc, #584]	; (8001ce0 <main+0x33c>)
 8001a96:	f001 fa55 	bl	8002f44 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"TELECOM STE", CENTER_MODE);
 8001a9a:	f001 fa9f 	bl	8002fdc <BSP_LCD_GetFont>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	88db      	ldrh	r3, [r3, #6]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	00d2      	lsls	r2, r2, #3
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4a8d      	ldr	r2, [pc, #564]	; (8001ce4 <main+0x340>)
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f001 fb16 	bl	80030e0 <BSP_LCD_DisplayStringAt>


	HAL_Delay(2000);
 8001ab4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ab8:	f001 ffda 	bl	8003a70 <HAL_Delay>
	BSP_LCD_SetFont(&Font12);
 8001abc:	488a      	ldr	r0, [pc, #552]	; (8001ce8 <main+0x344>)
 8001abe:	f001 fa73 	bl	8002fa8 <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac6:	f001 fa9f 	bl	8003008 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001aca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ace:	f001 fa39 	bl	8002f44 <BSP_LCD_SetTextColor>

/*LEDs turned off*/
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad8:	4879      	ldr	r0, [pc, #484]	; (8001cc0 <main+0x31c>)
 8001ada:	f003 f903 	bl	8004ce4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae4:	4876      	ldr	r0, [pc, #472]	; (8001cc0 <main+0x31c>)
 8001ae6:	f003 f8fd 	bl	8004ce4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

	char adresse[10];
	I2C_Scan(&hi2c3, adresse);
 8001aea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aee:	4619      	mov	r1, r3
 8001af0:	487e      	ldr	r0, [pc, #504]	; (8001cec <main+0x348>)
 8001af2:	f008 f92b 	bl	8009d4c <I2C_Scan>
	Init_BMP280(&hi2c3);
 8001af6:	487d      	ldr	r0, [pc, #500]	; (8001cec <main+0x348>)
 8001af8:	f008 f951 	bl	8009d9e <Init_BMP280>
	Init_MPU9250_AK8963(&hi2c3);
 8001afc:	487b      	ldr	r0, [pc, #492]	; (8001cec <main+0x348>)
 8001afe:	f008 f981 	bl	8009e04 <Init_MPU9250_AK8963>
	BSP_LCD_SetFont(&Font16);
 8001b02:	4870      	ldr	r0, [pc, #448]	; (8001cc4 <main+0x320>)
 8001b04:	f001 fa50 	bl	8002fa8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f001 fa32 	bl	8002f74 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_B_TELECOM);
 8001b10:	486d      	ldr	r0, [pc, #436]	; (8001cc8 <main+0x324>)
 8001b12:	f001 fa17 	bl	8002f44 <BSP_LCD_SetTextColor>
	I2C_Scan(&hi2c3, adresse); // On fait un deuxième scan pour détecter l'activation du magnétomètre
 8001b16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4873      	ldr	r0, [pc, #460]	; (8001cec <main+0x348>)
 8001b1e:	f008 f915 	bl	8009d4c <I2C_Scan>
	uint8_t hal_mem = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	double p_acc[3], p_mag[3], p_gyro[3], p_bias[3], p_scale[3], p_theta, p_press;
	long signed int p_Tfine;
	p_bias[0] = 0;
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	p_bias[1] = 0;
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	p_bias[2] = 0;
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	p_scale[0] = 1;
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <main+0x34c>)
 8001b52:	e9c7 2308 	strd	r2, r3, [r7, #32]
	p_scale[0] = 1;
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <main+0x34c>)
 8001b5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	p_scale[0] = 1;
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <main+0x34c>)
 8001b66:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(HAL_I2C_Mem_Read(&hi2c3, MPU_ADD, WHO_AM_I_MPU9250, sizeof(char), &hal_mem, sizeof(uint8_t), 1000) == HAL_ERROR) {
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	2301      	movs	r3, #1
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	2275      	movs	r2, #117	; 0x75
 8001b7e:	21d0      	movs	r1, #208	; 0xd0
 8001b80:	485a      	ldr	r0, [pc, #360]	; (8001cec <main+0x348>)
 8001b82:	f003 fb07 	bl	8005194 <HAL_I2C_Mem_Read>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <main+0x1ec>
		Error_Handler();
 8001b8c:	f000 f954 	bl	8001e38 <Error_Handler>

  /* Call init function for freertos objects (in freertos.c) */
 // MX_FREERTOS_Init();
  /* Start scheduler */
 // osKernelStart();
	Measure_G(&hi2c3, p_gyro, p_bias);
 8001b90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4854      	ldr	r0, [pc, #336]	; (8001cec <main+0x348>)
 8001b9c:	f008 fd78 	bl	800a690 <Measure_G>
	printf("Vitesse angulaire avant calibration : Omega(%.2f, %.2f, %.2f)\r\n", p_gyro[0], p_gyro[1], p_gyro[2]);
 8001ba0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ba4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ba8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001bb0:	e9cd 2300 	strd	r2, r3, [sp]
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	484e      	ldr	r0, [pc, #312]	; (8001cf4 <main+0x350>)
 8001bba:	f009 fb7f 	bl	800b2bc <iprintf>
	Calib_G(&hi2c3, p_bias);
 8001bbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4849      	ldr	r0, [pc, #292]	; (8001cec <main+0x348>)
 8001bc6:	f7ff fe2f 	bl	8001828 <Calib_G>
	Measure_G(&hi2c3, p_gyro, p_bias);
 8001bca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4845      	ldr	r0, [pc, #276]	; (8001cec <main+0x348>)
 8001bd6:	f008 fd5b 	bl	800a690 <Measure_G>
	printf("Vitesse angulaire après calibration : Omega(%.2f, %.2f, %.2f)\r\n", p_gyro[0], p_gyro[1], p_gyro[2]);
 8001bda:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001be2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001bea:	e9cd 2300 	strd	r2, r3, [sp]
 8001bee:	4622      	mov	r2, r4
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	4841      	ldr	r0, [pc, #260]	; (8001cf8 <main+0x354>)
 8001bf4:	f009 fb62 	bl	800b2bc <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_A(&hi2c3, p_acc);
 8001bf8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	483b      	ldr	r0, [pc, #236]	; (8001cec <main+0x348>)
 8001c00:	f008 fcb6 	bl	800a570 <Measure_A>
	  Measure_G(&hi2c3, p_gyro, p_bias);
 8001c04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4837      	ldr	r0, [pc, #220]	; (8001cec <main+0x348>)
 8001c10:	f008 fd3e 	bl	800a690 <Measure_G>
	  Measure_M(&hi2c3, p_mag, p_bias, p_scale);
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c1c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001c20:	4832      	ldr	r0, [pc, #200]	; (8001cec <main+0x348>)
 8001c22:	f008 fde1 	bl	800a7e8 <Measure_M>
	  Measure_T_BMP280(&hi2c3, &p_theta, &p_Tfine);
 8001c26:	f107 020c 	add.w	r2, r7, #12
 8001c2a:	f107 0318 	add.w	r3, r7, #24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	482e      	ldr	r0, [pc, #184]	; (8001cec <main+0x348>)
 8001c32:	f008 f943 	bl	8009ebc <Measure_T_BMP280>
	  Measure_T(&hi2c3, &p_theta);
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	482b      	ldr	r0, [pc, #172]	; (8001cec <main+0x348>)
 8001c3e:	f008 fa2b 	bl	800a098 <Measure_T>
	  Measure_P(&hi2c3, &p_press, &p_Tfine);
 8001c42:	f107 020c 	add.w	r2, r7, #12
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4827      	ldr	r0, [pc, #156]	; (8001cec <main+0x348>)
 8001c4e:	f008 fa67 	bl	800a120 <Measure_P>

	  printf("A(%.2f; %.2f; %.2f) | Omega(%.2f; %.2f; %.2f) | B(%.2f; %.2f; %.2f) | Temperature : %.2f | Pression : %.2f  \r\n", p_acc[0], p_acc[1], p_acc[2], p_gyro[0], p_gyro[1], p_gyro[2], p_mag[0], p_mag[1], p_mag[2], p_theta, p_press);
 8001c52:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001c56:	ed87 7b00 	vstr	d7, [r7]
 8001c5a:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 8001c5e:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8001c62:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001c66:	ed97 5b16 	vldr	d5, [r7, #88]	; 0x58
 8001c6a:	ed97 4b18 	vldr	d4, [r7, #96]	; 0x60
 8001c6e:	ed97 3b1a 	vldr	d3, [r7, #104]	; 0x68
 8001c72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001c76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c82:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001c86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001c8a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001c8e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001c92:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
 8001c96:	ed8d 4b08 	vstr	d4, [sp, #32]
 8001c9a:	ed8d 5b06 	vstr	d5, [sp, #24]
 8001c9e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001ca2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001ca6:	e9cd ab00 	strd	sl, fp, [sp]
 8001caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cae:	4813      	ldr	r0, [pc, #76]	; (8001cfc <main+0x358>)
 8001cb0:	f009 fb04 	bl	800b2bc <iprintf>

	  HAL_Delay(1000);
 8001cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb8:	f001 feda 	bl	8003a70 <HAL_Delay>
	  Measure_A(&hi2c3, p_acc);
 8001cbc:	e79c      	b.n	8001bf8 <main+0x254>
 8001cbe:	bf00      	nop
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	20000048 	.word	0x20000048
 8001cc8:	ff065784 	.word	0xff065784
 8001ccc:	0800d3b8 	.word	0x0800d3b8
 8001cd0:	0800d3c0 	.word	0x0800d3c0
 8001cd4:	0800d3cc 	.word	0x0800d3cc
 8001cd8:	ff81b835 	.word	0xff81b835
 8001cdc:	0800d3d8 	.word	0x0800d3d8
 8001ce0:	ff813c2f 	.word	0xff813c2f
 8001ce4:	0800d3e4 	.word	0x0800d3e4
 8001ce8:	20000050 	.word	0x20000050
 8001cec:	20000538 	.word	0x20000538
 8001cf0:	3ff00000 	.word	0x3ff00000
 8001cf4:	0800d3f0 	.word	0x0800d3f0
 8001cf8:	0800d430 	.word	0x0800d430
 8001cfc:	0800d474 	.word	0x0800d474

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a0      	sub	sp, #128	; 0x80
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d0a:	2230      	movs	r2, #48	; 0x30
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f008 fe62 	bl	800a9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	2230      	movs	r2, #48	; 0x30
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 fe53 	bl	800a9d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <SystemClock_Config+0x10c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <SystemClock_Config+0x10c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <SystemClock_Config+0x10c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <SystemClock_Config+0x110>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <SystemClock_Config+0x110>)
 8001d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <SystemClock_Config+0x110>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d74:	2302      	movs	r3, #2
 8001d76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d82:	23b4      	movs	r3, #180	; 0xb4
 8001d84:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fd0a 	bl	80067ac <HAL_RCC_OscConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001d9e:	f000 f84b 	bl	8001e38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001da2:	f004 fcb3 	bl	800670c <HAL_PWREx_EnableOverDrive>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001dac:	f000 f844 	bl	8001e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db0:	230f      	movs	r3, #15
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db4:	2302      	movs	r3, #2
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dcc:	2105      	movs	r1, #5
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 ff5c 	bl	8006c8c <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001dda:	f000 f82d 	bl	8001e38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dde:	2308      	movs	r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001de2:	233c      	movs	r3, #60	; 0x3c
 8001de4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001de6:	2305      	movs	r3, #5
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 f977 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001e00:	f000 f81a 	bl	8001e38 <Error_Handler>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3780      	adds	r7, #128	; 0x80
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e26:	f001 fe03 	bl	8003a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40001000 	.word	0x40001000

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <MX_SPI5_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e58:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e7c:	2218      	movs	r2, #24
 8001e7e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e94:	220a      	movs	r2, #10
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <MX_SPI5_Init+0x64>)
 8001e9a:	f005 fb62 	bl	8007562 <HAL_SPI_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ea4:	f7ff ffc8 	bl	8001e38 <Error_Handler>
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000638 	.word	0x20000638
 8001eb0:	40015000 	.word	0x40015000

08001eb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_SPI_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_SPI_MspInit+0x88>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_SPI_MspInit+0x88>)
 8001ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_SPI_MspInit+0x88>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_SPI_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_SPI_MspInit+0x88>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_SPI_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f0e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f20:	2305      	movs	r3, #5
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_SPI_MspInit+0x8c>)
 8001f2c:	f002 fc22 	bl	8004774 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40015000 	.word	0x40015000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40021400 	.word	0x40021400

08001f44 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_SPI_MspDeInit+0x30>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10a      	bne.n	8001f6c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_SPI_MspDeInit+0x34>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_SPI_MspDeInit+0x34>)
 8001f5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001f62:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_SPI_MspDeInit+0x38>)
 8001f68:	f002 fdb0 	bl	8004acc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40015000 	.word	0x40015000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40021400 	.word	0x40021400

08001f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_MspInit+0x54>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_MspInit+0x54>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_MspInit+0x54>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_MspInit+0x54>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_MspInit+0x54>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_MspInit+0x54>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	f06f 0001 	mvn.w	r0, #1
 8001fc6:	f001 fe2f 	bl	8003c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2036      	movs	r0, #54	; 0x36
 8001fee:	f001 fe1b 	bl	8003c28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ff2:	2036      	movs	r0, #54	; 0x36
 8001ff4:	f001 fe34 	bl	8003c60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_InitTick+0xa4>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_InitTick+0xa4>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_InitTick+0xa4>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002014:	f107 0210 	add.w	r2, r7, #16
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f005 f830 	bl	8007084 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002024:	f005 f806 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 8002028:	4603      	mov	r3, r0
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_InitTick+0xa8>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	3b01      	subs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_InitTick+0xac>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_InitTick+0xb0>)
 8002040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_InitTick+0xac>)
 8002044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002048:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_InitTick+0xac>)
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_InitTick+0xac>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_InitTick+0xac>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_InitTick+0xac>)
 800205e:	f006 f80b 	bl	8008078 <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <HAL_InitTick+0xac>)
 800206a:	f006 f830 	bl	80080ce <HAL_TIM_Base_Start_IT>
 800206e:	4603      	mov	r3, r0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3730      	adds	r7, #48	; 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	431bde83 	.word	0x431bde83
 8002084:	20000690 	.word	0x20000690
 8002088:	40001000 	.word	0x40001000

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <USART1_IRQHandler+0x10>)
 80020c6:	f006 fccb 	bl	8008a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200006d0 	.word	0x200006d0

080020d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <TIM5_IRQHandler+0x10>)
 80020da:	f006 f81c 	bl	8008116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000710 	.word	0x20000710

080020e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TIM6_DAC_IRQHandler+0x10>)
 80020ee:	f006 f812 	bl	8008116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000690 	.word	0x20000690

080020fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	RTOS_RunTimeCounter++;
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <TIM7_IRQHandler+0x18>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a03      	ldr	r2, [pc, #12]	; (8002114 <TIM7_IRQHandler+0x18>)
 8002108:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <TIM7_IRQHandler+0x1c>)
 800210c:	f006 f803 	bl	8008116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000634 	.word	0x20000634
 8002118:	20000790 	.word	0x20000790

0800211c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <LTDC_IRQHandler+0x10>)
 8002122:	f004 f831 	bl	8006188 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000058c 	.word	0x2000058c

08002130 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA2D_IRQHandler+0x10>)
 8002136:	f002 f8de 	bl	80042f6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004c4 	.word	0x200004c4

08002144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
	return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_kill>:

int _kill(int pid, int sig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800215e:	f008 fc03 	bl	800a968 <__errno>
 8002162:	4603      	mov	r3, r0
 8002164:	2216      	movs	r2, #22
 8002166:	601a      	str	r2, [r3, #0]
	return -1;
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_exit>:

void _exit (int status)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ffe7 	bl	8002154 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002186:	e7fe      	b.n	8002186 <_exit+0x12>

08002188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e00a      	b.n	80021b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800219a:	f3af 8000 	nop.w
 800219e:	4601      	mov	r1, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	b2ca      	uxtb	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf0      	blt.n	800219a <_read+0x12>
	}

return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e009      	b.n	80021e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	60ba      	str	r2, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fbcf 	bl	8001980 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbf1      	blt.n	80021d4 <_write+0x12>
	}
	return len;
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_close>:

int _close(int file)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return -1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002222:	605a      	str	r2, [r3, #4]
	return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_isatty>:

int _isatty(int file)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
	return 1;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002294:	f008 fb68 	bl	800a968 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20030000 	.word	0x20030000
 80022c4:	00000400 	.word	0x00000400
 80022c8:	20000254 	.word	0x20000254
 80022cc:	20000890 	.word	0x20000890

080022d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <SystemInit+0x28>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <SystemInit+0x28>)
 80022dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SystemInit+0x28>)
 80022e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ea:	609a      	str	r2, [r3, #8]
#endif
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002310:	463b      	mov	r3, r7
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <MX_TIM1_Init+0x98>)
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <MX_TIM1_Init+0x9c>)
 800231c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <MX_TIM1_Init+0x98>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <MX_TIM1_Init+0x98>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_TIM1_Init+0x98>)
 800232c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <MX_TIM1_Init+0x98>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_TIM1_Init+0x98>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <MX_TIM1_Init+0x98>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002344:	4813      	ldr	r0, [pc, #76]	; (8002394 <MX_TIM1_Init+0x98>)
 8002346:	f005 fe97 	bl	8008078 <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002350:	f7ff fd72 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	4619      	mov	r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <MX_TIM1_Init+0x98>)
 8002362:	f005 ffe0 	bl	8008326 <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800236c:	f7ff fd64 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002378:	463b      	mov	r3, r7
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_TIM1_Init+0x98>)
 800237e:	f006 f9f9 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002388:	f7ff fd56 	bl	8001e38 <Error_Handler>
  }

}
 800238c:	bf00      	nop
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000750 	.word	0x20000750
 8002398:	40010000 	.word	0x40010000

0800239c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	463b      	mov	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_TIM5_Init+0x94>)
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <MX_TIM5_Init+0x98>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <MX_TIM5_Init+0x94>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <MX_TIM5_Init+0x94>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <MX_TIM5_Init+0x94>)
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <MX_TIM5_Init+0x94>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_TIM5_Init+0x94>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023de:	4814      	ldr	r0, [pc, #80]	; (8002430 <MX_TIM5_Init+0x94>)
 80023e0:	f005 fe4a 	bl	8008078 <HAL_TIM_Base_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80023ea:	f7ff fd25 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <MX_TIM5_Init+0x94>)
 80023fc:	f005 ff93 	bl	8008326 <HAL_TIM_ConfigClockSource>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002406:	f7ff fd17 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002412:	463b      	mov	r3, r7
 8002414:	4619      	mov	r1, r3
 8002416:	4806      	ldr	r0, [pc, #24]	; (8002430 <MX_TIM5_Init+0x94>)
 8002418:	f006 f9ac 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002422:	f7ff fd09 	bl	8001e38 <Error_Handler>
  }

}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000710 	.word	0x20000710
 8002434:	40000c00 	.word	0x40000c00

08002438 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243e:	463b      	mov	r3, r7
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <MX_TIM7_Init+0x64>)
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <MX_TIM7_Init+0x68>)
 800244a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_TIM7_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <MX_TIM7_Init+0x64>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_TIM7_Init+0x64>)
 800245a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_TIM7_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_TIM7_Init+0x64>)
 8002468:	f005 fe06 	bl	8008078 <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002472:	f7ff fce1 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800247e:	463b      	mov	r3, r7
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <MX_TIM7_Init+0x64>)
 8002484:	f006 f976 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800248e:	f7ff fcd3 	bl	8001e38 <Error_Handler>
  }

}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000790 	.word	0x20000790
 80024a0:	40001400 	.word	0x40001400

080024a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_TIM_Base_MspInit+0xa8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80024d2:	e036      	b.n	8002542 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM5)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_TIM_Base_MspInit+0xb0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d116      	bne.n	800250c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2105      	movs	r1, #5
 80024fe:	2032      	movs	r0, #50	; 0x32
 8002500:	f001 fb92 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002504:	2032      	movs	r0, #50	; 0x32
 8002506:	f001 fbab 	bl	8003c60 <HAL_NVIC_EnableIRQ>
}
 800250a:	e01a      	b.n	8002542 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_TIM_Base_MspInit+0xb4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d115      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_TIM_Base_MspInit+0xac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2105      	movs	r1, #5
 8002536:	2037      	movs	r0, #55	; 0x37
 8002538:	f001 fb76 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800253c:	2037      	movs	r0, #55	; 0x37
 800253e:	f001 fb8f 	bl	8003c60 <HAL_NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40010000 	.word	0x40010000
 8002550:	40023800 	.word	0x40023800
 8002554:	40000c00 	.word	0x40000c00
 8002558:	40001400 	.word	0x40001400

0800255c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_USART1_UART_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002594:	f006 f97e 	bl	8008894 <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800259e:	f7ff fc4b 	bl	8001e38 <Error_Handler>
  }

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200006d0 	.word	0x200006d0
 80025ac:	40011000 	.word	0x40011000

080025b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_UART_MspInit+0x94>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d134      	bne.n	800263c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_UART_MspInit+0x98>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <HAL_UART_MspInit+0x98>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_UART_MspInit+0x98>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_UART_MspInit+0x98>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_UART_MspInit+0x98>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_UART_MspInit+0x98>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800260a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800261c:	2307      	movs	r3, #7
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <HAL_UART_MspInit+0x9c>)
 8002628:	f002 f8a4 	bl	8004774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2105      	movs	r1, #5
 8002630:	2025      	movs	r0, #37	; 0x25
 8002632:	f001 faf9 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002636:	2025      	movs	r0, #37	; 0x25
 8002638:	f001 fb12 	bl	8003c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40011000 	.word	0x40011000
 8002648:	40023800 	.word	0x40023800
 800264c:	40020000 	.word	0x40020000

08002650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002688 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002654:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002656:	e003      	b.n	8002660 <LoopCopyDataInit>

08002658 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800265a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800265c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800265e:	3104      	adds	r1, #4

08002660 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002660:	480b      	ldr	r0, [pc, #44]	; (8002690 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002664:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002666:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002668:	d3f6      	bcc.n	8002658 <CopyDataInit>
  ldr  r2, =_sbss
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800266c:	e002      	b.n	8002674 <LoopFillZerobss>

0800266e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800266e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002670:	f842 3b04 	str.w	r3, [r2], #4

08002674 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002676:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002678:	d3f9      	bcc.n	800266e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800267a:	f7ff fe29 	bl	80022d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f008 f979 	bl	800a974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002682:	f7ff f98f 	bl	80019a4 <main>
  bx  lr    
 8002686:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002688:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800268c:	08010404 	.word	0x08010404
  ldr  r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002694:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8002698:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 800269c:	20000890 	.word	0x20000890

080026a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC_IRQHandler>

080026a2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80026a6:	f000 fa5d 	bl	8002b64 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80026aa:	20ca      	movs	r0, #202	; 0xca
 80026ac:	f000 f95d 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80026b0:	20c3      	movs	r0, #195	; 0xc3
 80026b2:	f000 f967 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80026b6:	2008      	movs	r0, #8
 80026b8:	f000 f964 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80026bc:	2050      	movs	r0, #80	; 0x50
 80026be:	f000 f961 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80026c2:	20cf      	movs	r0, #207	; 0xcf
 80026c4:	f000 f951 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 f95b 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80026ce:	20c1      	movs	r0, #193	; 0xc1
 80026d0:	f000 f958 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80026d4:	2030      	movs	r0, #48	; 0x30
 80026d6:	f000 f955 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80026da:	20ed      	movs	r0, #237	; 0xed
 80026dc:	f000 f945 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80026e0:	2064      	movs	r0, #100	; 0x64
 80026e2:	f000 f94f 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80026e6:	2003      	movs	r0, #3
 80026e8:	f000 f94c 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80026ec:	2012      	movs	r0, #18
 80026ee:	f000 f949 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80026f2:	2081      	movs	r0, #129	; 0x81
 80026f4:	f000 f946 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80026f8:	20e8      	movs	r0, #232	; 0xe8
 80026fa:	f000 f936 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80026fe:	2085      	movs	r0, #133	; 0x85
 8002700:	f000 f940 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f000 f93d 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800270a:	2078      	movs	r0, #120	; 0x78
 800270c:	f000 f93a 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002710:	20cb      	movs	r0, #203	; 0xcb
 8002712:	f000 f92a 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002716:	2039      	movs	r0, #57	; 0x39
 8002718:	f000 f934 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800271c:	202c      	movs	r0, #44	; 0x2c
 800271e:	f000 f931 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f000 f92e 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002728:	2034      	movs	r0, #52	; 0x34
 800272a:	f000 f92b 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800272e:	2002      	movs	r0, #2
 8002730:	f000 f928 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002734:	20f7      	movs	r0, #247	; 0xf7
 8002736:	f000 f918 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800273a:	2020      	movs	r0, #32
 800273c:	f000 f922 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002740:	20ea      	movs	r0, #234	; 0xea
 8002742:	f000 f912 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f000 f91c 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f000 f919 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002752:	20b1      	movs	r0, #177	; 0xb1
 8002754:	f000 f909 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f000 f913 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800275e:	201b      	movs	r0, #27
 8002760:	f000 f910 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002764:	20b6      	movs	r0, #182	; 0xb6
 8002766:	f000 f900 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800276a:	200a      	movs	r0, #10
 800276c:	f000 f90a 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002770:	20a2      	movs	r0, #162	; 0xa2
 8002772:	f000 f907 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002776:	20c0      	movs	r0, #192	; 0xc0
 8002778:	f000 f8f7 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800277c:	2010      	movs	r0, #16
 800277e:	f000 f901 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002782:	20c1      	movs	r0, #193	; 0xc1
 8002784:	f000 f8f1 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002788:	2010      	movs	r0, #16
 800278a:	f000 f8fb 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800278e:	20c5      	movs	r0, #197	; 0xc5
 8002790:	f000 f8eb 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002794:	2045      	movs	r0, #69	; 0x45
 8002796:	f000 f8f5 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800279a:	2015      	movs	r0, #21
 800279c:	f000 f8f2 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80027a0:	20c7      	movs	r0, #199	; 0xc7
 80027a2:	f000 f8e2 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80027a6:	2090      	movs	r0, #144	; 0x90
 80027a8:	f000 f8ec 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80027ac:	2036      	movs	r0, #54	; 0x36
 80027ae:	f000 f8dc 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80027b2:	20c8      	movs	r0, #200	; 0xc8
 80027b4:	f000 f8e6 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80027b8:	20f2      	movs	r0, #242	; 0xf2
 80027ba:	f000 f8d6 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f8e0 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80027c4:	20b0      	movs	r0, #176	; 0xb0
 80027c6:	f000 f8d0 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80027ca:	20c2      	movs	r0, #194	; 0xc2
 80027cc:	f000 f8da 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80027d0:	20b6      	movs	r0, #182	; 0xb6
 80027d2:	f000 f8ca 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80027d6:	200a      	movs	r0, #10
 80027d8:	f000 f8d4 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80027dc:	20a7      	movs	r0, #167	; 0xa7
 80027de:	f000 f8d1 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80027e2:	2027      	movs	r0, #39	; 0x27
 80027e4:	f000 f8ce 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80027e8:	2004      	movs	r0, #4
 80027ea:	f000 f8cb 	bl	8002984 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80027ee:	202a      	movs	r0, #42	; 0x2a
 80027f0:	f000 f8bb 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f000 f8c5 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f8c2 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f000 f8bf 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002806:	20ef      	movs	r0, #239	; 0xef
 8002808:	f000 f8bc 	bl	8002984 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800280c:	202b      	movs	r0, #43	; 0x2b
 800280e:	f000 f8ac 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002812:	2000      	movs	r0, #0
 8002814:	f000 f8b6 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f000 f8b3 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800281e:	2001      	movs	r0, #1
 8002820:	f000 f8b0 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002824:	203f      	movs	r0, #63	; 0x3f
 8002826:	f000 f8ad 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800282a:	20f6      	movs	r0, #246	; 0xf6
 800282c:	f000 f89d 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002830:	2001      	movs	r0, #1
 8002832:	f000 f8a7 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f000 f8a4 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800283c:	2006      	movs	r0, #6
 800283e:	f000 f8a1 	bl	8002984 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002842:	202c      	movs	r0, #44	; 0x2c
 8002844:	f000 f891 	bl	800296a <ili9341_WriteReg>
  LCD_Delay(200);
 8002848:	20c8      	movs	r0, #200	; 0xc8
 800284a:	f000 fa79 	bl	8002d40 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800284e:	2026      	movs	r0, #38	; 0x26
 8002850:	f000 f88b 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f895 	bl	8002984 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800285a:	20e0      	movs	r0, #224	; 0xe0
 800285c:	f000 f885 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002860:	200f      	movs	r0, #15
 8002862:	f000 f88f 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002866:	2029      	movs	r0, #41	; 0x29
 8002868:	f000 f88c 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800286c:	2024      	movs	r0, #36	; 0x24
 800286e:	f000 f889 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002872:	200c      	movs	r0, #12
 8002874:	f000 f886 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002878:	200e      	movs	r0, #14
 800287a:	f000 f883 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800287e:	2009      	movs	r0, #9
 8002880:	f000 f880 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002884:	204e      	movs	r0, #78	; 0x4e
 8002886:	f000 f87d 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800288a:	2078      	movs	r0, #120	; 0x78
 800288c:	f000 f87a 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002890:	203c      	movs	r0, #60	; 0x3c
 8002892:	f000 f877 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002896:	2009      	movs	r0, #9
 8002898:	f000 f874 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800289c:	2013      	movs	r0, #19
 800289e:	f000 f871 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80028a2:	2005      	movs	r0, #5
 80028a4:	f000 f86e 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80028a8:	2017      	movs	r0, #23
 80028aa:	f000 f86b 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80028ae:	2011      	movs	r0, #17
 80028b0:	f000 f868 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f000 f865 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80028ba:	20e1      	movs	r0, #225	; 0xe1
 80028bc:	f000 f855 	bl	800296a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f000 f85f 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80028c6:	2016      	movs	r0, #22
 80028c8:	f000 f85c 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80028cc:	201b      	movs	r0, #27
 80028ce:	f000 f859 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80028d2:	2004      	movs	r0, #4
 80028d4:	f000 f856 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80028d8:	2011      	movs	r0, #17
 80028da:	f000 f853 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80028de:	2007      	movs	r0, #7
 80028e0:	f000 f850 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80028e4:	2031      	movs	r0, #49	; 0x31
 80028e6:	f000 f84d 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80028ea:	2033      	movs	r0, #51	; 0x33
 80028ec:	f000 f84a 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80028f0:	2042      	movs	r0, #66	; 0x42
 80028f2:	f000 f847 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80028f6:	2005      	movs	r0, #5
 80028f8:	f000 f844 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80028fc:	200c      	movs	r0, #12
 80028fe:	f000 f841 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002902:	200a      	movs	r0, #10
 8002904:	f000 f83e 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002908:	2028      	movs	r0, #40	; 0x28
 800290a:	f000 f83b 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800290e:	202f      	movs	r0, #47	; 0x2f
 8002910:	f000 f838 	bl	8002984 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002914:	200f      	movs	r0, #15
 8002916:	f000 f835 	bl	8002984 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800291a:	2011      	movs	r0, #17
 800291c:	f000 f825 	bl	800296a <ili9341_WriteReg>
  LCD_Delay(200);
 8002920:	20c8      	movs	r0, #200	; 0xc8
 8002922:	f000 fa0d 	bl	8002d40 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002926:	2029      	movs	r0, #41	; 0x29
 8002928:	f000 f81f 	bl	800296a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800292c:	202c      	movs	r0, #44	; 0x2c
 800292e:	f000 f81c 	bl	800296a <ili9341_WriteReg>
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800293a:	f000 f913 	bl	8002b64 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800293e:	2103      	movs	r1, #3
 8002940:	20d3      	movs	r0, #211	; 0xd3
 8002942:	f000 f82c 	bl	800299e <ili9341_ReadData>
 8002946:	4603      	mov	r3, r0
 8002948:	b29b      	uxth	r3, r3
}
 800294a:	4618      	mov	r0, r3
 800294c:	bd80      	pop	{r7, pc}

0800294e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002952:	2029      	movs	r0, #41	; 0x29
 8002954:	f000 f809 	bl	800296a <ili9341_WriteReg>
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002960:	2028      	movs	r0, #40	; 0x28
 8002962:	f000 f802 	bl	800296a <ili9341_WriteReg>
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}

0800296a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f98e 	bl	8002c98 <LCD_IO_WriteReg>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f95f 	bl	8002c54 <LCD_IO_WriteData>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	460a      	mov	r2, r1
 80029a8:	80fb      	strh	r3, [r7, #6]
 80029aa:	4613      	mov	r3, r2
 80029ac:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80029ae:	797a      	ldrb	r2, [r7, #5]
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f991 	bl	8002cdc <LCD_IO_ReadData>
 80029ba:	4603      	mov	r3, r0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80029c8:	23f0      	movs	r3, #240	; 0xf0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80029d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80029ec:	4819      	ldr	r0, [pc, #100]	; (8002a54 <SPIx_Init+0x6c>)
 80029ee:	f005 fa23 	bl	8007e38 <HAL_SPI_GetState>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d12b      	bne.n	8002a50 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <SPIx_Init+0x6c>)
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <SPIx_Init+0x70>)
 80029fc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <SPIx_Init+0x6c>)
 8002a00:	2218      	movs	r2, #24
 8002a02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <SPIx_Init+0x6c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <SPIx_Init+0x6c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <SPIx_Init+0x6c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <SPIx_Init+0x6c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <SPIx_Init+0x6c>)
 8002a1e:	2207      	movs	r2, #7
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <SPIx_Init+0x6c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <SPIx_Init+0x6c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <SPIx_Init+0x6c>)
 8002a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <SPIx_Init+0x6c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SPIx_Init+0x6c>)
 8002a3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a42:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002a44:	4803      	ldr	r0, [pc, #12]	; (8002a54 <SPIx_Init+0x6c>)
 8002a46:	f000 f853 	bl	8002af0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002a4a:	4802      	ldr	r0, [pc, #8]	; (8002a54 <SPIx_Init+0x6c>)
 8002a4c:	f004 fd89 	bl	8007562 <HAL_SPI_Init>
  } 
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000258 	.word	0x20000258
 8002a58:	40015000 	.word	0x40015000

08002a5c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <SPIx_Read+0x38>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f107 0108 	add.w	r1, r7, #8
 8002a76:	4808      	ldr	r0, [pc, #32]	; (8002a98 <SPIx_Read+0x3c>)
 8002a78:	f004 ff33 	bl	80078e2 <HAL_SPI_Receive>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002a86:	f000 f827 	bl	8002ad8 <SPIx_Error>
  }
  
  return readvalue;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000003c 	.word	0x2000003c
 8002a98:	20000258 	.word	0x20000258

08002a9c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <SPIx_Write+0x34>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1db9      	adds	r1, r7, #6
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4808      	ldr	r0, [pc, #32]	; (8002ad4 <SPIx_Write+0x38>)
 8002ab4:	f004 fde1 	bl	800767a <HAL_SPI_Transmit>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002ac2:	f000 f809 	bl	8002ad8 <SPIx_Error>
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000003c 	.word	0x2000003c
 8002ad4:	20000258 	.word	0x20000258

08002ad8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <SPIx_Error+0x14>)
 8002ade:	f004 fda4 	bl	800762a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002ae2:	f7ff ff81 	bl	80029e8 <SPIx_Init>
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000258 	.word	0x20000258

08002af0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <SPIx_MspInit+0x6c>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <SPIx_MspInit+0x6c>)
 8002b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b06:	6453      	str	r3, [r2, #68]	; 0x44
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <SPIx_MspInit+0x6c>)
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <SPIx_MspInit+0x6c>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <SPIx_MspInit+0x6c>)
 8002b1e:	f043 0320 	orr.w	r3, r3, #32
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <SPIx_MspInit+0x6c>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002b30:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002b42:	2305      	movs	r3, #5
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <SPIx_MspInit+0x70>)
 8002b4e:	f001 fe11 	bl	8004774 <HAL_GPIO_Init>
}
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	; 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40021400 	.word	0x40021400

08002b64 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002b6a:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <LCD_IO_Init+0xe0>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d164      	bne.n	8002c3c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <LCD_IO_Init+0xe0>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	4827      	ldr	r0, [pc, #156]	; (8002c4c <LCD_IO_Init+0xe8>)
 8002bae:	f001 fde1 	bl	8004774 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	4619      	mov	r1, r3
 8002be6:	4819      	ldr	r0, [pc, #100]	; (8002c4c <LCD_IO_Init+0xe8>)
 8002be8:	f001 fdc4 	bl	8004774 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c14:	2302      	movs	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480c      	ldr	r0, [pc, #48]	; (8002c50 <LCD_IO_Init+0xec>)
 8002c20:	f001 fda8 	bl	8004774 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002c24:	2200      	movs	r2, #0
 8002c26:	2104      	movs	r1, #4
 8002c28:	4809      	ldr	r0, [pc, #36]	; (8002c50 <LCD_IO_Init+0xec>)
 8002c2a:	f002 f85b 	bl	8004ce4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2104      	movs	r1, #4
 8002c32:	4807      	ldr	r0, [pc, #28]	; (8002c50 <LCD_IO_Init+0xec>)
 8002c34:	f002 f856 	bl	8004ce4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002c38:	f7ff fed6 	bl	80029e8 <SPIx_Init>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200002b0 	.word	0x200002b0
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40020800 	.word	0x40020800

08002c54 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c64:	480a      	ldr	r0, [pc, #40]	; (8002c90 <LCD_IO_WriteData+0x3c>)
 8002c66:	f002 f83d 	bl	8004ce4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	4809      	ldr	r0, [pc, #36]	; (8002c94 <LCD_IO_WriteData+0x40>)
 8002c70:	f002 f838 	bl	8004ce4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff10 	bl	8002a9c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2104      	movs	r1, #4
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <LCD_IO_WriteData+0x40>)
 8002c82:	f002 f82f 	bl	8004ce4 <HAL_GPIO_WritePin>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40020800 	.word	0x40020800

08002c98 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ca8:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <LCD_IO_WriteReg+0x3c>)
 8002caa:	f002 f81b 	bl	8004ce4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	4809      	ldr	r0, [pc, #36]	; (8002cd8 <LCD_IO_WriteReg+0x40>)
 8002cb4:	f002 f816 	bl	8004ce4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff feed 	bl	8002a9c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <LCD_IO_WriteReg+0x40>)
 8002cc8:	f002 f80c 	bl	8004ce4 <HAL_GPIO_WritePin>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	40020800 	.word	0x40020800

08002cdc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	80fb      	strh	r3, [r7, #6]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	4810      	ldr	r0, [pc, #64]	; (8002d38 <LCD_IO_ReadData+0x5c>)
 8002cf6:	f001 fff5 	bl	8004ce4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d00:	480e      	ldr	r0, [pc, #56]	; (8002d3c <LCD_IO_ReadData+0x60>)
 8002d02:	f001 ffef 	bl	8004ce4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fec7 	bl	8002a9c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002d0e:	797b      	ldrb	r3, [r7, #5]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fea3 	bl	8002a5c <SPIx_Read>
 8002d16:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <LCD_IO_ReadData+0x60>)
 8002d20:	f001 ffe0 	bl	8004ce4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d24:	2201      	movs	r2, #1
 8002d26:	2104      	movs	r1, #4
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <LCD_IO_ReadData+0x5c>)
 8002d2a:	f001 ffdb 	bl	8004ce4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	40020c00 	.word	0x40020c00

08002d40 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fe91 	bl	8003a70 <HAL_Delay>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d5e:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <BSP_LCD_Init+0xc0>)
 8002d60:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d64:	2209      	movs	r2, #9
 8002d66:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d70:	221d      	movs	r2, #29
 8002d72:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d76:	2203      	movs	r2, #3
 8002d78:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d7c:	f240 120d 	movw	r2, #269	; 0x10d
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d84:	f240 1243 	movw	r2, #323	; 0x143
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d8c:	f240 1217 	movw	r2, #279	; 0x117
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d94:	f240 1247 	movw	r2, #327	; 0x147
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <BSP_LCD_Init+0xc4>)
 8002db4:	2208      	movs	r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <BSP_LCD_Init+0xc4>)
 8002dba:	22c0      	movs	r2, #192	; 0xc0
 8002dbc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <BSP_LCD_Init+0xc4>)
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <BSP_LCD_Init+0xc4>)
 8002dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002dcc:	4813      	ldr	r0, [pc, #76]	; (8002e1c <BSP_LCD_Init+0xc4>)
 8002dce:	f004 f98b 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002dea:	f000 fa47 	bl	800327c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002dee:	4809      	ldr	r0, [pc, #36]	; (8002e14 <BSP_LCD_Init+0xbc>)
 8002df0:	f003 f8fa 	bl	8005fe8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <BSP_LCD_Init+0xc8>)
 8002df6:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <BSP_LCD_Init+0xcc>)
 8002df8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <BSP_LCD_Init+0xc8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002e02:	f000 fc29 	bl	8003658 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002e06:	4808      	ldr	r0, [pc, #32]	; (8002e28 <BSP_LCD_Init+0xd0>)
 8002e08:	f000 f8ce 	bl	8002fa8 <BSP_LCD_SetFont>

  return LCD_OK;
 8002e0c:	2300      	movs	r3, #0
}  
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200007d0 	.word	0x200007d0
 8002e18:	40016800 	.word	0x40016800
 8002e1c:	200002f4 	.word	0x200002f4
 8002e20:	20000878 	.word	0x20000878
 8002e24:	20000004 	.word	0x20000004
 8002e28:	20000040 	.word	0x20000040

08002e2c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <BSP_LCD_GetXSize+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	4798      	blx	r3
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000878 	.word	0x20000878

08002e44 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <BSP_LCD_GetYSize+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4798      	blx	r3
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000878 	.word	0x20000878

08002e5c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b090      	sub	sp, #64	; 0x40
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002e6c:	f7ff ffde 	bl	8002e2c <BSP_LCD_GetXSize>
 8002e70:	4603      	mov	r3, r0
 8002e72:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e78:	f7ff ffe4 	bl	8002e44 <BSP_LCD_GetYSize>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002e88:	23ff      	movs	r3, #255	; 0xff
 8002e8a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ea2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002eac:	f7ff ffbe 	bl	8002e2c <BSP_LCD_GetXSize>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002eb4:	f7ff ffc6 	bl	8002e44 <BSP_LCD_GetYSize>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	f107 030c 	add.w	r3, r7, #12
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4814      	ldr	r0, [pc, #80]	; (8002f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ec6:	f003 fa21 	bl	800630c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	4913      	ldr	r1, [pc, #76]	; (8002f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3304      	adds	r3, #4
 8002eda:	f04f 32ff 	mov.w	r2, #4294967295
 8002ede:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	490e      	ldr	r1, [pc, #56]	; (8002f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3308      	adds	r3, #8
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002ef2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	4909      	ldr	r1, [pc, #36]	; (8002f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002f06:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002f0a:	f003 fa3d 	bl	8006388 <HAL_LTDC_EnableDither>
}
 8002f0e:	bf00      	nop
 8002f10:	3740      	adds	r7, #64	; 0x40
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200007d0 	.word	0x200007d0
 8002f1c:	20000328 	.word	0x20000328
 8002f20:	20000040 	.word	0x20000040

08002f24 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <BSP_LCD_SelectLayer+0x1c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000324 	.word	0x20000324

08002f44 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <BSP_LCD_SetTextColor+0x28>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <BSP_LCD_SetTextColor+0x2c>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	20000324 	.word	0x20000324
 8002f70:	20000328 	.word	0x20000328

08002f74 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <BSP_LCD_SetBackColor+0x2c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <BSP_LCD_SetBackColor+0x30>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000324 	.word	0x20000324
 8002fa4:	20000328 	.word	0x20000328

08002fa8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <BSP_LCD_SetFont+0x2c>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <BSP_LCD_SetFont+0x30>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000324 	.word	0x20000324
 8002fd8:	20000328 	.word	0x20000328

08002fdc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <BSP_LCD_GetFont+0x24>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4907      	ldr	r1, [pc, #28]	; (8003004 <BSP_LCD_GetFont+0x28>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000324 	.word	0x20000324
 8003004:	20000328 	.word	0x20000328

08003008 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	af02      	add	r7, sp, #8
 800300e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <BSP_LCD_Clear+0x48>)
 8003012:	681c      	ldr	r4, [r3, #0]
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <BSP_LCD_Clear+0x48>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <BSP_LCD_Clear+0x4c>)
 800301a:	2134      	movs	r1, #52	; 0x34
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461e      	mov	r6, r3
 8003028:	f7ff ff00 	bl	8002e2c <BSP_LCD_GetXSize>
 800302c:	4605      	mov	r5, r0
 800302e:	f7ff ff09 	bl	8002e44 <BSP_LCD_GetYSize>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2300      	movs	r3, #0
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	462a      	mov	r2, r5
 8003040:	4631      	mov	r1, r6
 8003042:	4620      	mov	r0, r4
 8003044:	f000 fad0 	bl	80035e8 <FillBuffer>
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003050:	20000324 	.word	0x20000324
 8003054:	200007d0 	.word	0x200007d0

08003058 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
 8003062:	460b      	mov	r3, r1
 8003064:	80bb      	strh	r3, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <BSP_LCD_DisplayChar+0x80>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <BSP_LCD_DisplayChar+0x84>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	3308      	adds	r3, #8
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <BSP_LCD_DisplayChar+0x80>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4c14      	ldr	r4, [pc, #80]	; (80030dc <BSP_LCD_DisplayChar+0x84>)
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4423      	add	r3, r4
 8003096:	3308      	adds	r3, #8
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800309c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <BSP_LCD_DisplayChar+0x80>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4c0d      	ldr	r4, [pc, #52]	; (80030dc <BSP_LCD_DisplayChar+0x84>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4423      	add	r3, r4
 80030b0:	3308      	adds	r3, #8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	889b      	ldrh	r3, [r3, #4]
 80030b6:	3307      	adds	r3, #7
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da00      	bge.n	80030be <BSP_LCD_DisplayChar+0x66>
 80030bc:	3307      	adds	r3, #7
 80030be:	10db      	asrs	r3, r3, #3
 80030c0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80030c4:	18ca      	adds	r2, r1, r3
 80030c6:	88b9      	ldrh	r1, [r7, #4]
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f9d2 	bl	8003474 <DrawChar>
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}
 80030d8:	20000324 	.word	0x20000324
 80030dc:	20000328 	.word	0x20000328

080030e0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60ba      	str	r2, [r7, #8]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	81fb      	strh	r3, [r7, #14]
 80030ee:	460b      	mov	r3, r1
 80030f0:	81bb      	strh	r3, [r7, #12]
 80030f2:	4613      	mov	r3, r2
 80030f4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80030f6:	2301      	movs	r3, #1
 80030f8:	83fb      	strh	r3, [r7, #30]
 80030fa:	2300      	movs	r3, #0
 80030fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800310a:	e002      	b.n	8003112 <BSP_LCD_DisplayStringAt+0x32>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	3301      	adds	r3, #1
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	617a      	str	r2, [r7, #20]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f6      	bne.n	800310c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800311e:	f7ff fe85 	bl	8002e2c <BSP_LCD_GetXSize>
 8003122:	4601      	mov	r1, r0
 8003124:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <BSP_LCD_DisplayStringAt+0x174>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	484b      	ldr	r0, [pc, #300]	; (8003258 <BSP_LCD_DisplayStringAt+0x178>)
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	3308      	adds	r3, #8
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	889b      	ldrh	r3, [r3, #4]
 800313a:	fbb1 f3f3 	udiv	r3, r1, r3
 800313e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d01c      	beq.n	8003180 <BSP_LCD_DisplayStringAt+0xa0>
 8003146:	2b03      	cmp	r3, #3
 8003148:	dc33      	bgt.n	80031b2 <BSP_LCD_DisplayStringAt+0xd2>
 800314a:	2b01      	cmp	r3, #1
 800314c:	d002      	beq.n	8003154 <BSP_LCD_DisplayStringAt+0x74>
 800314e:	2b02      	cmp	r3, #2
 8003150:	d019      	beq.n	8003186 <BSP_LCD_DisplayStringAt+0xa6>
 8003152:	e02e      	b.n	80031b2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad1      	subs	r1, r2, r3
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <BSP_LCD_DisplayStringAt+0x174>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	483e      	ldr	r0, [pc, #248]	; (8003258 <BSP_LCD_DisplayStringAt+0x178>)
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4403      	add	r3, r0
 800316a:	3308      	adds	r3, #8
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	889b      	ldrh	r3, [r3, #4]
 8003170:	fb03 f301 	mul.w	r3, r3, r1
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	89fb      	ldrh	r3, [r7, #14]
 800317a:	4413      	add	r3, r2
 800317c:	83fb      	strh	r3, [r7, #30]
      break;
 800317e:	e01b      	b.n	80031b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	83fb      	strh	r3, [r7, #30]
      break;
 8003184:	e018      	b.n	80031b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	b299      	uxth	r1, r3
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <BSP_LCD_DisplayStringAt+0x174>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4831      	ldr	r0, [pc, #196]	; (8003258 <BSP_LCD_DisplayStringAt+0x178>)
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4403      	add	r3, r0
 800319e:	3308      	adds	r3, #8
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	889b      	ldrh	r3, [r3, #4]
 80031a4:	fb11 f303 	smulbb	r3, r1, r3
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	89fb      	ldrh	r3, [r7, #14]
 80031ac:	4413      	add	r3, r2
 80031ae:	83fb      	strh	r3, [r7, #30]
      break;
 80031b0:	e002      	b.n	80031b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80031b2:	89fb      	ldrh	r3, [r7, #14]
 80031b4:	83fb      	strh	r3, [r7, #30]
      break;
 80031b6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031b8:	e01a      	b.n	80031f0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	89b9      	ldrh	r1, [r7, #12]
 80031c0:	8bfb      	ldrh	r3, [r7, #30]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff48 	bl	8003058 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80031c8:	4b22      	ldr	r3, [pc, #136]	; (8003254 <BSP_LCD_DisplayStringAt+0x174>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4922      	ldr	r1, [pc, #136]	; (8003258 <BSP_LCD_DisplayStringAt+0x178>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3308      	adds	r3, #8
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	889a      	ldrh	r2, [r3, #4]
 80031de:	8bfb      	ldrh	r3, [r7, #30]
 80031e0:	4413      	add	r3, r2
 80031e2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
    i++;
 80031ea:	8bbb      	ldrh	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2dc      	uxtb	r4, r3
 80031fe:	f7ff fe15 	bl	8002e2c <BSP_LCD_GetXSize>
 8003202:	8bb9      	ldrh	r1, [r7, #28]
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <BSP_LCD_DisplayStringAt+0x174>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4d13      	ldr	r5, [pc, #76]	; (8003258 <BSP_LCD_DisplayStringAt+0x178>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	442b      	add	r3, r5
 8003214:	3308      	adds	r3, #8
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	889b      	ldrh	r3, [r3, #4]
 800321a:	fb03 f301 	mul.w	r3, r3, r1
 800321e:	1ac3      	subs	r3, r0, r3
 8003220:	b299      	uxth	r1, r3
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <BSP_LCD_DisplayStringAt+0x174>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <BSP_LCD_DisplayStringAt+0x178>)
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	3308      	adds	r3, #8
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	889b      	ldrh	r3, [r3, #4]
 8003238:	4299      	cmp	r1, r3
 800323a:	bf2c      	ite	cs
 800323c:	2301      	movcs	r3, #1
 800323e:	2300      	movcc	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4023      	ands	r3, r4
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1b7      	bne.n	80031ba <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bdb0      	pop	{r4, r5, r7, pc}
 8003254:	20000324 	.word	0x20000324
 8003258:	20000328 	.word	0x20000328

0800325c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <BSP_LCD_DisplayOn+0x1c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800326a:	4b03      	ldr	r3, [pc, #12]	; (8003278 <BSP_LCD_DisplayOn+0x1c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4798      	blx	r3
  }
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000878 	.word	0x20000878

0800327c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08e      	sub	sp, #56	; 0x38
 8003280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	4b61      	ldr	r3, [pc, #388]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a60      	ldr	r2, [pc, #384]	; (800340c <BSP_LCD_MspInit+0x190>)
 800328c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b5e      	ldr	r3, [pc, #376]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a59      	ldr	r2, [pc, #356]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b57      	ldr	r3, [pc, #348]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	4b53      	ldr	r3, [pc, #332]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a52      	ldr	r2, [pc, #328]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b50      	ldr	r3, [pc, #320]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	4b4c      	ldr	r3, [pc, #304]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a4b      	ldr	r2, [pc, #300]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b49      	ldr	r3, [pc, #292]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	4b45      	ldr	r3, [pc, #276]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a44      	ldr	r2, [pc, #272]	; (800340c <BSP_LCD_MspInit+0x190>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b42      	ldr	r3, [pc, #264]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a3d      	ldr	r2, [pc, #244]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a36      	ldr	r2, [pc, #216]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003334:	f043 0320 	orr.w	r3, r3, #32
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b34      	ldr	r3, [pc, #208]	; (800340c <BSP_LCD_MspInit+0x190>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	4b30      	ldr	r3, [pc, #192]	; (800340c <BSP_LCD_MspInit+0x190>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a2f      	ldr	r2, [pc, #188]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <BSP_LCD_MspInit+0x190>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003362:	f641 0358 	movw	r3, #6232	; 0x1858
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003370:	2302      	movs	r3, #2
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003374:	230e      	movs	r3, #14
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337c:	4619      	mov	r1, r3
 800337e:	4824      	ldr	r0, [pc, #144]	; (8003410 <BSP_LCD_MspInit+0x194>)
 8003380:	f001 f9f8 	bl	8004774 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003384:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338e:	4619      	mov	r1, r3
 8003390:	4820      	ldr	r0, [pc, #128]	; (8003414 <BSP_LCD_MspInit+0x198>)
 8003392:	f001 f9ef 	bl	8004774 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003396:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800339c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a0:	4619      	mov	r1, r3
 80033a2:	481d      	ldr	r0, [pc, #116]	; (8003418 <BSP_LCD_MspInit+0x19c>)
 80033a4:	f001 f9e6 	bl	8004774 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80033a8:	2348      	movs	r3, #72	; 0x48
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80033ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b0:	4619      	mov	r1, r3
 80033b2:	481a      	ldr	r0, [pc, #104]	; (800341c <BSP_LCD_MspInit+0x1a0>)
 80033b4:	f001 f9de 	bl	8004774 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80033b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	4816      	ldr	r0, [pc, #88]	; (8003420 <BSP_LCD_MspInit+0x1a4>)
 80033c6:	f001 f9d5 	bl	8004774 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80033ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	4619      	mov	r1, r3
 80033d6:	4813      	ldr	r0, [pc, #76]	; (8003424 <BSP_LCD_MspInit+0x1a8>)
 80033d8:	f001 f9cc 	bl	8004774 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80033dc:	2303      	movs	r3, #3
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80033e0:	2309      	movs	r3, #9
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	4619      	mov	r1, r3
 80033ea:	480a      	ldr	r0, [pc, #40]	; (8003414 <BSP_LCD_MspInit+0x198>)
 80033ec:	f001 f9c2 	bl	8004774 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80033f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <BSP_LCD_MspInit+0x1a8>)
 80033fe:	f001 f9b9 	bl	8004774 <HAL_GPIO_Init>
}
 8003402:	bf00      	nop
 8003404:	3738      	adds	r7, #56	; 0x38
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800

08003428 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	603a      	str	r2, [r7, #0]
 8003432:	80fb      	strh	r3, [r7, #6]
 8003434:	460b      	mov	r3, r1
 8003436:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <BSP_LCD_DrawPixel+0x44>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <BSP_LCD_DrawPixel+0x48>)
 800343e:	2134      	movs	r1, #52	; 0x34
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	335c      	adds	r3, #92	; 0x5c
 8003448:	681c      	ldr	r4, [r3, #0]
 800344a:	88bd      	ldrh	r5, [r7, #4]
 800344c:	f7ff fcee 	bl	8002e2c <BSP_LCD_GetXSize>
 8003450:	4603      	mov	r3, r0
 8003452:	fb03 f205 	mul.w	r2, r3, r5
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4423      	add	r3, r4
 800345e:	461a      	mov	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	20000324 	.word	0x20000324
 8003470:	200007d0 	.word	0x200007d0

08003474 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	603a      	str	r2, [r7, #0]
 800347e:	80fb      	strh	r3, [r7, #6]
 8003480:	460b      	mov	r3, r1
 8003482:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <DrawChar+0x16c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4953      	ldr	r1, [pc, #332]	; (80035e4 <DrawChar+0x170>)
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3308      	adds	r3, #8
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	88db      	ldrh	r3, [r3, #6]
 80034a6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034a8:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <DrawChar+0x16c>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <DrawChar+0x170>)
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3308      	adds	r3, #8
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	889b      	ldrh	r3, [r3, #4]
 80034be:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80034c0:	8a3b      	ldrh	r3, [r7, #16]
 80034c2:	3307      	adds	r3, #7
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da00      	bge.n	80034ca <DrawChar+0x56>
 80034c8:	3307      	adds	r3, #7
 80034ca:	10db      	asrs	r3, r3, #3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	8a3b      	ldrh	r3, [r7, #16]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	e076      	b.n	80035ce <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80034e0:	8a3b      	ldrh	r3, [r7, #16]
 80034e2:	3307      	adds	r3, #7
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da00      	bge.n	80034ea <DrawChar+0x76>
 80034e8:	3307      	adds	r3, #7
 80034ea:	10db      	asrs	r3, r3, #3
 80034ec:	461a      	mov	r2, r3
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fb03 f302 	mul.w	r3, r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80034fa:	8a3b      	ldrh	r3, [r7, #16]
 80034fc:	3307      	adds	r3, #7
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da00      	bge.n	8003504 <DrawChar+0x90>
 8003502:	3307      	adds	r3, #7
 8003504:	10db      	asrs	r3, r3, #3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d002      	beq.n	8003510 <DrawChar+0x9c>
 800350a:	2b02      	cmp	r3, #2
 800350c:	d004      	beq.n	8003518 <DrawChar+0xa4>
 800350e:	e00c      	b.n	800352a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	617b      	str	r3, [r7, #20]
      break;
 8003516:	e016      	b.n	8003546 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	3201      	adds	r2, #1
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
      break;
 8003528:	e00d      	b.n	8003546 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	041a      	lsls	r2, r3, #16
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	3301      	adds	r3, #1
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4313      	orrs	r3, r2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	3202      	adds	r2, #2
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
      break;
 8003544:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e036      	b.n	80035ba <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800354c:	8a3a      	ldrh	r2, [r7, #16]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad2      	subs	r2, r2, r3
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	4413      	add	r3, r2
 8003556:	3b01      	subs	r3, #1
 8003558:	2201      	movs	r2, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	461a      	mov	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	b29a      	uxth	r2, r3
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4413      	add	r3, r2
 8003570:	b298      	uxth	r0, r3
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <DrawChar+0x16c>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	491b      	ldr	r1, [pc, #108]	; (80035e4 <DrawChar+0x170>)
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	88bb      	ldrh	r3, [r7, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	f7ff ff4e 	bl	8003428 <BSP_LCD_DrawPixel>
 800358c:	e012      	b.n	80035b4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	b29a      	uxth	r2, r3
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	4413      	add	r3, r2
 8003596:	b298      	uxth	r0, r3
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <DrawChar+0x16c>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4911      	ldr	r1, [pc, #68]	; (80035e4 <DrawChar+0x170>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3304      	adds	r3, #4
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7ff ff3a 	bl	8003428 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	3301      	adds	r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	8a3b      	ldrh	r3, [r7, #16]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3c4      	bcc.n	800354c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80035c2:	88bb      	ldrh	r3, [r7, #4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	8a7b      	ldrh	r3, [r7, #18]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d384      	bcc.n	80034e0 <DrawChar+0x6c>
  }
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000324 	.word	0x20000324
 80035e4:	20000328 	.word	0x20000328

080035e8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <FillBuffer+0x68>)
 80035f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035fc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <FillBuffer+0x68>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <FillBuffer+0x68>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <FillBuffer+0x68>)
 800360c:	4a11      	ldr	r2, [pc, #68]	; (8003654 <FillBuffer+0x6c>)
 800360e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003610:	480f      	ldr	r0, [pc, #60]	; (8003650 <FillBuffer+0x68>)
 8003612:	f000 fd13 	bl	800403c <HAL_DMA2D_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d115      	bne.n	8003648 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800361c:	68f9      	ldr	r1, [r7, #12]
 800361e:	480c      	ldr	r0, [pc, #48]	; (8003650 <FillBuffer+0x68>)
 8003620:	f000 ff7a 	bl	8004518 <HAL_DMA2D_ConfigLayer>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10e      	bne.n	8003648 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69f9      	ldr	r1, [r7, #28]
 8003634:	4806      	ldr	r0, [pc, #24]	; (8003650 <FillBuffer+0x68>)
 8003636:	f000 fd4a 	bl	80040ce <HAL_DMA2D_Start>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003640:	210a      	movs	r1, #10
 8003642:	4803      	ldr	r0, [pc, #12]	; (8003650 <FillBuffer+0x68>)
 8003644:	f000 fd6e 	bl	8004124 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200002b4 	.word	0x200002b4
 8003654:	4002b000 	.word	0x4002b000

08003658 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <BSP_SDRAM_Init+0xac>)
 800365e:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <BSP_SDRAM_Init+0xb0>)
 8003660:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <BSP_SDRAM_Init+0xb4>)
 8003664:	2202      	movs	r2, #2
 8003666:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003668:	4b28      	ldr	r3, [pc, #160]	; (800370c <BSP_SDRAM_Init+0xb4>)
 800366a:	2207      	movs	r2, #7
 800366c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <BSP_SDRAM_Init+0xb4>)
 8003670:	2204      	movs	r2, #4
 8003672:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <BSP_SDRAM_Init+0xb4>)
 8003676:	2207      	movs	r2, #7
 8003678:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <BSP_SDRAM_Init+0xb4>)
 800367c:	2202      	movs	r2, #2
 800367e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <BSP_SDRAM_Init+0xb4>)
 8003682:	2202      	movs	r2, #2
 8003684:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <BSP_SDRAM_Init+0xb4>)
 8003688:	2202      	movs	r2, #2
 800368a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <BSP_SDRAM_Init+0xac>)
 800368e:	2201      	movs	r2, #1
 8003690:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <BSP_SDRAM_Init+0xac>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <BSP_SDRAM_Init+0xac>)
 800369a:	2204      	movs	r2, #4
 800369c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036a0:	2210      	movs	r2, #16
 80036a2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80036b0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036be:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80036ce:	2100      	movs	r1, #0
 80036d0:	480c      	ldr	r0, [pc, #48]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036d2:	f000 f87f 	bl	80037d4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80036d6:	490d      	ldr	r1, [pc, #52]	; (800370c <BSP_SDRAM_Init+0xb4>)
 80036d8:	480a      	ldr	r0, [pc, #40]	; (8003704 <BSP_SDRAM_Init+0xac>)
 80036da:	f003 fec3 	bl	8007464 <HAL_SDRAM_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <BSP_SDRAM_Init+0xb8>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <BSP_SDRAM_Init+0xb8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036f2:	f240 506a 	movw	r0, #1386	; 0x56a
 80036f6:	f000 f80d 	bl	8003714 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <BSP_SDRAM_Init+0xb8>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000340 	.word	0x20000340
 8003708:	a0000140 	.word	0xa0000140
 800370c:	20000374 	.word	0x20000374
 8003710:	20000058 	.word	0x20000058

08003714 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003728:	2208      	movs	r2, #8
 800372a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372e:	2201      	movs	r2, #1
 8003730:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373c:	4923      	ldr	r1, [pc, #140]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373e:	4824      	ldr	r0, [pc, #144]	; (80037d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003740:	f003 fec4 	bl	80074cc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003744:	2001      	movs	r0, #1
 8003746:	f000 f993 	bl	8003a70 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374c:	2202      	movs	r2, #2
 800374e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003750:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003752:	2208      	movs	r2, #8
 8003754:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003758:	2201      	movs	r2, #1
 800375a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003766:	4919      	ldr	r1, [pc, #100]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003768:	4819      	ldr	r0, [pc, #100]	; (80037d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800376a:	f003 feaf 	bl	80074cc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003770:	2203      	movs	r2, #3
 8003772:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003774:	4b15      	ldr	r3, [pc, #84]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	2208      	movs	r2, #8
 8003778:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377c:	2204      	movs	r2, #4
 800377e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800378a:	4910      	ldr	r1, [pc, #64]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378c:	4810      	ldr	r0, [pc, #64]	; (80037d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800378e:	f003 fe9d 	bl	80074cc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003792:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003796:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800379a:	2204      	movs	r2, #4
 800379c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a0:	2208      	movs	r2, #8
 80037a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b4:	4905      	ldr	r1, [pc, #20]	; (80037cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b6:	4806      	ldr	r0, [pc, #24]	; (80037d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037b8:	f003 fe88 	bl	80074cc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4804      	ldr	r0, [pc, #16]	; (80037d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037c0:	f003 feaf 	bl	8007522 <HAL_SDRAM_ProgramRefreshRate>
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000390 	.word	0x20000390
 80037d0:	20000340 	.word	0x20000340

080037d4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b090      	sub	sp, #64	; 0x40
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80ec 	beq.w	80039be <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ea:	4b77      	ldr	r3, [pc, #476]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4a76      	ldr	r2, [pc, #472]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6393      	str	r3, [r2, #56]	; 0x38
 80037f6:	4b74      	ldr	r3, [pc, #464]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a6f      	ldr	r2, [pc, #444]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 800380c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b6d      	ldr	r3, [pc, #436]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
 8003822:	4b69      	ldr	r3, [pc, #420]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a68      	ldr	r2, [pc, #416]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	4b62      	ldr	r3, [pc, #392]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a61      	ldr	r2, [pc, #388]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a5a      	ldr	r2, [pc, #360]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a53      	ldr	r2, [pc, #332]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 800387c:	f043 0310 	orr.w	r3, r3, #16
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a4c      	ldr	r2, [pc, #304]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a45      	ldr	r2, [pc, #276]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80038b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <BSP_SDRAM_MspInit+0x1f4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80038c6:	2302      	movs	r3, #2
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80038ca:	2302      	movs	r3, #2
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80038d2:	230c      	movs	r3, #12
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80038d6:	2360      	movs	r3, #96	; 0x60
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80038da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038de:	4619      	mov	r1, r3
 80038e0:	483a      	ldr	r0, [pc, #232]	; (80039cc <BSP_SDRAM_MspInit+0x1f8>)
 80038e2:	f000 ff47 	bl	8004774 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80038ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	4837      	ldr	r0, [pc, #220]	; (80039d0 <BSP_SDRAM_MspInit+0x1fc>)
 80038f2:	f000 ff3f 	bl	8004774 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80038f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80038fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003900:	4619      	mov	r1, r3
 8003902:	4834      	ldr	r0, [pc, #208]	; (80039d4 <BSP_SDRAM_MspInit+0x200>)
 8003904:	f000 ff36 	bl	8004774 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003908:	f64f 7383 	movw	r3, #65411	; 0xff83
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800390e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003912:	4619      	mov	r1, r3
 8003914:	4830      	ldr	r0, [pc, #192]	; (80039d8 <BSP_SDRAM_MspInit+0x204>)
 8003916:	f000 ff2d 	bl	8004774 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800391a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003924:	4619      	mov	r1, r3
 8003926:	482d      	ldr	r0, [pc, #180]	; (80039dc <BSP_SDRAM_MspInit+0x208>)
 8003928:	f000 ff24 	bl	8004774 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800392c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003936:	4619      	mov	r1, r3
 8003938:	4829      	ldr	r0, [pc, #164]	; (80039e0 <BSP_SDRAM_MspInit+0x20c>)
 800393a:	f000 ff1b 	bl	8004774 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800394c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003950:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003958:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800395c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003960:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003968:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003976:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800397a:	2200      	movs	r2, #0
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800397e:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003980:	2203      	movs	r2, #3
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003986:	2200      	movs	r2, #0
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003990:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 8003992:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <BSP_SDRAM_MspInit+0x214>)
 8003994:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
 800399c:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80039a2:	4810      	ldr	r0, [pc, #64]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 80039a4:	f000 fa18 	bl	8003dd8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80039a8:	480e      	ldr	r0, [pc, #56]	; (80039e4 <BSP_SDRAM_MspInit+0x210>)
 80039aa:	f000 f967 	bl	8003c7c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	210f      	movs	r1, #15
 80039b2:	2038      	movs	r0, #56	; 0x38
 80039b4:	f000 f938 	bl	8003c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80039b8:	2038      	movs	r0, #56	; 0x38
 80039ba:	f000 f951 	bl	8003c60 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80039be:	bf00      	nop
 80039c0:	3740      	adds	r7, #64	; 0x40
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40020800 	.word	0x40020800
 80039d4:	40020c00 	.word	0x40020c00
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40021400 	.word	0x40021400
 80039e0:	40021800 	.word	0x40021800
 80039e4:	200003a0 	.word	0x200003a0
 80039e8:	40026410 	.word	0x40026410

080039ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_Init+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_Init+0x40>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_Init+0x40>)
 8003a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_Init+0x40>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 f8fc 	bl	8003c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f7fe fadc 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a20:	f7fe faae 	bl	8001f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00

08003a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_IncTick+0x20>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_IncTick+0x24>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <HAL_IncTick+0x24>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000060 	.word	0x20000060
 8003a54:	2000087c 	.word	0x2000087c

08003a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_GetTick+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	2000087c 	.word	0x2000087c

08003a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff ffee 	bl	8003a58 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d005      	beq.n	8003a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_Delay+0x44>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a96:	bf00      	nop
 8003a98:	f7ff ffde 	bl	8003a58 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d8f7      	bhi.n	8003a98 <HAL_Delay+0x28>
  {
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000060 	.word	0x20000060

08003ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <__NVIC_GetPriorityGrouping+0x18>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0b      	blt.n	8003b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	; (8003b54 <__NVIC_EnableIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ff4c 	bl	8003ab8 <__NVIC_SetPriorityGrouping>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c3a:	f7ff ff61 	bl	8003b00 <__NVIC_GetPriorityGrouping>
 8003c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	6978      	ldr	r0, [r7, #20]
 8003c46:	f7ff ffb1 	bl	8003bac <NVIC_EncodePriority>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff80 	bl	8003b58 <__NVIC_SetPriority>
}
 8003c58:	bf00      	nop
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff54 	bl	8003b1c <__NVIC_EnableIRQ>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7ff fee6 	bl	8003a58 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e099      	b.n	8003dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb8:	e00f      	b.n	8003cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cba:	f7ff fecd 	bl	8003a58 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d908      	bls.n	8003cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e078      	b.n	8003dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e8      	bne.n	8003cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_DMA_Init+0x158>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d107      	bne.n	8003d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d117      	bne.n	8003d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8df 	bl	8003f44 <DMA_CheckFifoParam>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e016      	b.n	8003dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f896 	bl	8003ed8 <DMA_CalcBaseAndBitshift>
 8003dac:	4603      	mov	r3, r0
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	223f      	movs	r2, #63	; 0x3f
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	f010803f 	.word	0xf010803f

08003dd8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e050      	b.n	8003e8c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
 8003df8:	e048      	b.n	8003e8c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2221      	movs	r2, #33	; 0x21
 8003e38:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f84c 	bl	8003ed8 <DMA_CalcBaseAndBitshift>
 8003e40:	4603      	mov	r3, r0
 8003e42:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	223f      	movs	r2, #63	; 0x3f
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00c      	b.n	8003ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	3b10      	subs	r3, #16
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <DMA_CalcBaseAndBitshift+0x64>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <DMA_CalcBaseAndBitshift+0x68>)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d909      	bls.n	8003f1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	659a      	str	r2, [r3, #88]	; 0x58
 8003f18:	e007      	b.n	8003f2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	aaaaaaab 	.word	0xaaaaaaab
 8003f40:	08010008 	.word	0x08010008

08003f44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11f      	bne.n	8003f9e <DMA_CheckFifoParam+0x5a>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d856      	bhi.n	8004012 <DMA_CheckFifoParam+0xce>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <DMA_CheckFifoParam+0x28>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f8f 	.word	0x08003f8f
 8003f74:	08003f7d 	.word	0x08003f7d
 8003f78:	08004013 	.word	0x08004013
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d046      	beq.n	8004016 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f8c:	e043      	b.n	8004016 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f96:	d140      	bne.n	800401a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9c:	e03d      	b.n	800401a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa6:	d121      	bne.n	8003fec <DMA_CheckFifoParam+0xa8>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d837      	bhi.n	800401e <DMA_CheckFifoParam+0xda>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <DMA_CheckFifoParam+0x70>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fcb 	.word	0x08003fcb
 8003fbc:	08003fc5 	.word	0x08003fc5
 8003fc0:	08003fdd 	.word	0x08003fdd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	e030      	b.n	800402c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d025      	beq.n	8004022 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fda:	e022      	b.n	8004022 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fe4:	d11f      	bne.n	8004026 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fea:	e01c      	b.n	8004026 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d903      	bls.n	8003ffa <DMA_CheckFifoParam+0xb6>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d003      	beq.n	8004000 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ff8:	e018      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffe:	e015      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e00b      	b.n	800402a <DMA_CheckFifoParam+0xe6>
      break;
 8004012:	bf00      	nop
 8004014:	e00a      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      break;
 8004016:	bf00      	nop
 8004018:	e008      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      break;
 800401a:	bf00      	nop
 800401c:	e006      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      break;
 800401e:	bf00      	nop
 8004020:	e004      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      break;
 8004022:	bf00      	nop
 8004024:	e002      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      break;   
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <DMA_CheckFifoParam+0xe8>
      break;
 800402a:	bf00      	nop
    }
  } 
  
  return status; 
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop

0800403c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e03b      	b.n	80040c6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc ff5e 	bl	8000f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	f023 0107 	bic.w	r1, r3, #7
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68d1      	ldr	r1, [r2, #12]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	430b      	orrs	r3, r1
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af02      	add	r7, sp, #8
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_DMA2D_Start+0x1c>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e018      	b.n	800411c <HAL_DMA2D_Start+0x4e>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fa99 	bl	800463c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d056      	beq.n	80041ee <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004140:	f7ff fc8a 	bl	8003a58 <HAL_GetTick>
 8004144:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004146:	e04b      	b.n	80041e0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004156:	2b00      	cmp	r3, #0
 8004158:	d023      	beq.n	80041a2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	f043 0202 	orr.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2204      	movs	r2, #4
 8004192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e0a5      	b.n	80042ee <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d01a      	beq.n	80041e0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80041aa:	f7ff fc55 	bl	8003a58 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <HAL_DMA2D_PollForTransfer+0x9c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e086      	b.n	80042ee <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ac      	beq.n	8004148 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d061      	beq.n	80042d4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004210:	f7ff fc22 	bl	8003a58 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004216:	e056      	b.n	80042c6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02e      	beq.n	8004288 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	f043 0202 	orr.w	r2, r3, #2
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	f043 0201 	orr.w	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2229      	movs	r2, #41	; 0x29
 8004272:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e032      	b.n	80042ee <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d01a      	beq.n	80042c6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004290:	f7ff fbe2 	bl	8003a58 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d302      	bcc.n	80042a6 <HAL_DMA2D_PollForTransfer+0x182>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	f043 0220 	orr.w	r2, r3, #32
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e013      	b.n	80042ee <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0a1      	beq.n	8004218 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2212      	movs	r2, #18
 80042da:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d026      	beq.n	8004366 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004330:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2201      	movs	r2, #1
 8004344:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d026      	beq.n	80043be <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d021      	beq.n	80043be <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004388:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2220      	movs	r2, #32
 8004390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2204      	movs	r2, #4
 80043a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d026      	beq.n	8004416 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d021      	beq.n	8004416 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2208      	movs	r2, #8
 80043e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2204      	movs	r2, #4
 80043fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00e      	beq.n	8004448 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004438:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2204      	movs	r2, #4
 8004440:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f853 	bl	80044ee <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d024      	beq.n	800449c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01f      	beq.n	800449c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2202      	movs	r2, #2
 8004472:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01f      	beq.n	80044e6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044be:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2210      	movs	r2, #16
 80044c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f80e 	bl	8004502 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_DMA2D_ConfigLayer+0x20>
 8004534:	2302      	movs	r3, #2
 8004536:	e079      	b.n	800462c <HAL_DMA2D_ConfigLayer+0x114>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	3318      	adds	r3, #24
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004562:	4b35      	ldr	r3, [pc, #212]	; (8004638 <HAL_DMA2D_ConfigLayer+0x120>)
 8004564:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b0a      	cmp	r3, #10
 800456c:	d003      	beq.n	8004576 <HAL_DMA2D_ConfigLayer+0x5e>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b09      	cmp	r3, #9
 8004574:	d107      	bne.n	8004586 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e005      	b.n	8004592 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d120      	bne.n	80045da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	ea02 0103 	and.w	r1, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b0a      	cmp	r3, #10
 80045c0:	d003      	beq.n	80045ca <HAL_DMA2D_ConfigLayer+0xb2>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b09      	cmp	r3, #9
 80045c8:	d127      	bne.n	800461a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
 80045d8:	e01f      	b.n	800461a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	ea02 0103 	and.w	r1, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b0a      	cmp	r3, #10
 8004602:	d003      	beq.n	800460c <HAL_DMA2D_ConfigLayer+0xf4>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b09      	cmp	r3, #9
 800460a:	d106      	bne.n	800461a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004618:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	ff03000f 	.word	0xff03000f

0800463c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800463c:	b480      	push	{r7}
 800463e:	b08b      	sub	sp, #44	; 0x2c
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004650:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	041a      	lsls	r2, r3, #16
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	431a      	orrs	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004674:	d174      	bne.n	8004760 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800467c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004684:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800468c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d108      	bne.n	80046ae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	e053      	b.n	8004756 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d106      	bne.n	80046c4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	e048      	b.n	8004756 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d111      	bne.n	80046f0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	0cdb      	lsrs	r3, r3, #19
 80046d0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	0a9b      	lsrs	r3, r3, #10
 80046d6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	08db      	lsrs	r3, r3, #3
 80046dc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	02db      	lsls	r3, r3, #11
 80046e6:	4313      	orrs	r3, r2
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	e032      	b.n	8004756 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d117      	bne.n	8004728 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	0fdb      	lsrs	r3, r3, #31
 80046fc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	0cdb      	lsrs	r3, r3, #19
 8004702:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	0adb      	lsrs	r3, r3, #11
 8004708:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	431a      	orrs	r2, r3
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	03db      	lsls	r3, r3, #15
 800471e:	4313      	orrs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	e016      	b.n	8004756 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	0f1b      	lsrs	r3, r3, #28
 800472c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	0d1b      	lsrs	r3, r3, #20
 8004732:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	0b1b      	lsrs	r3, r3, #12
 8004738:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	011a      	lsls	r2, r3, #4
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	431a      	orrs	r2, r3
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	4313      	orrs	r3, r2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800475e:	e003      	b.n	8004768 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	60da      	str	r2, [r3, #12]
}
 8004768:	bf00      	nop
 800476a:	372c      	adds	r7, #44	; 0x2c
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	e177      	b.n	8004a80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004790:	2201      	movs	r2, #1
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	f040 8166 	bne.w	8004a7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d00b      	beq.n	80047ce <HAL_GPIO_Init+0x5a>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d007      	beq.n	80047ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047c2:	2b11      	cmp	r3, #17
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b12      	cmp	r3, #18
 80047cc:	d130      	bne.n	8004830 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2203      	movs	r2, #3
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004804:	2201      	movs	r2, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 0201 	and.w	r2, r3, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2203      	movs	r2, #3
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0xfc>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b12      	cmp	r3, #18
 800486e:	d123      	bne.n	80048b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	08da      	lsrs	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3208      	adds	r2, #8
 8004878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	220f      	movs	r2, #15
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	69b9      	ldr	r1, [r7, #24]
 80048b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2203      	movs	r2, #3
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0203 	and.w	r2, r3, #3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80c0 	beq.w	8004a7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b66      	ldr	r3, [pc, #408]	; (8004a98 <HAL_GPIO_Init+0x324>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	4a65      	ldr	r2, [pc, #404]	; (8004a98 <HAL_GPIO_Init+0x324>)
 8004904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004908:	6453      	str	r3, [r2, #68]	; 0x44
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_GPIO_Init+0x324>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004916:	4a61      	ldr	r2, [pc, #388]	; (8004a9c <HAL_GPIO_Init+0x328>)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	3302      	adds	r3, #2
 800491e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	220f      	movs	r2, #15
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a58      	ldr	r2, [pc, #352]	; (8004aa0 <HAL_GPIO_Init+0x32c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d037      	beq.n	80049b2 <HAL_GPIO_Init+0x23e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a57      	ldr	r2, [pc, #348]	; (8004aa4 <HAL_GPIO_Init+0x330>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d031      	beq.n	80049ae <HAL_GPIO_Init+0x23a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a56      	ldr	r2, [pc, #344]	; (8004aa8 <HAL_GPIO_Init+0x334>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d02b      	beq.n	80049aa <HAL_GPIO_Init+0x236>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a55      	ldr	r2, [pc, #340]	; (8004aac <HAL_GPIO_Init+0x338>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d025      	beq.n	80049a6 <HAL_GPIO_Init+0x232>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a54      	ldr	r2, [pc, #336]	; (8004ab0 <HAL_GPIO_Init+0x33c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01f      	beq.n	80049a2 <HAL_GPIO_Init+0x22e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a53      	ldr	r2, [pc, #332]	; (8004ab4 <HAL_GPIO_Init+0x340>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d019      	beq.n	800499e <HAL_GPIO_Init+0x22a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a52      	ldr	r2, [pc, #328]	; (8004ab8 <HAL_GPIO_Init+0x344>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_GPIO_Init+0x226>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a51      	ldr	r2, [pc, #324]	; (8004abc <HAL_GPIO_Init+0x348>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00d      	beq.n	8004996 <HAL_GPIO_Init+0x222>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a50      	ldr	r2, [pc, #320]	; (8004ac0 <HAL_GPIO_Init+0x34c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <HAL_GPIO_Init+0x21e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a4f      	ldr	r2, [pc, #316]	; (8004ac4 <HAL_GPIO_Init+0x350>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_GPIO_Init+0x21a>
 800498a:	2309      	movs	r3, #9
 800498c:	e012      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 800498e:	230a      	movs	r3, #10
 8004990:	e010      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 8004992:	2308      	movs	r3, #8
 8004994:	e00e      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 8004996:	2307      	movs	r3, #7
 8004998:	e00c      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 800499a:	2306      	movs	r3, #6
 800499c:	e00a      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 800499e:	2305      	movs	r3, #5
 80049a0:	e008      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 80049a2:	2304      	movs	r3, #4
 80049a4:	e006      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 80049a6:	2303      	movs	r3, #3
 80049a8:	e004      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e002      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_GPIO_Init+0x240>
 80049b2:	2300      	movs	r3, #0
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	f002 0203 	and.w	r2, r2, #3
 80049ba:	0092      	lsls	r2, r2, #2
 80049bc:	4093      	lsls	r3, r2
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049c4:	4935      	ldr	r1, [pc, #212]	; (8004a9c <HAL_GPIO_Init+0x328>)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	3302      	adds	r3, #2
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049d2:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049f6:	4a34      	ldr	r2, [pc, #208]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049fc:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a20:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a26:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a74:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <HAL_GPIO_Init+0x354>)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	f67f ae84 	bls.w	8004790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40013800 	.word	0x40013800
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	40020400 	.word	0x40020400
 8004aa8:	40020800 	.word	0x40020800
 8004aac:	40020c00 	.word	0x40020c00
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40021400 	.word	0x40021400
 8004ab8:	40021800 	.word	0x40021800
 8004abc:	40021c00 	.word	0x40021c00
 8004ac0:	40022000 	.word	0x40022000
 8004ac4:	40022400 	.word	0x40022400
 8004ac8:	40013c00 	.word	0x40013c00

08004acc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e0d9      	b.n	8004c9c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f040 80c9 	bne.w	8004c96 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b04:	4a6b      	ldr	r2, [pc, #428]	; (8004cb4 <HAL_GPIO_DeInit+0x1e8>)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a63      	ldr	r2, [pc, #396]	; (8004cb8 <HAL_GPIO_DeInit+0x1ec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d037      	beq.n	8004b9e <HAL_GPIO_DeInit+0xd2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a62      	ldr	r2, [pc, #392]	; (8004cbc <HAL_GPIO_DeInit+0x1f0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <HAL_GPIO_DeInit+0xce>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a61      	ldr	r2, [pc, #388]	; (8004cc0 <HAL_GPIO_DeInit+0x1f4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <HAL_GPIO_DeInit+0xca>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a60      	ldr	r2, [pc, #384]	; (8004cc4 <HAL_GPIO_DeInit+0x1f8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d025      	beq.n	8004b92 <HAL_GPIO_DeInit+0xc6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a5f      	ldr	r2, [pc, #380]	; (8004cc8 <HAL_GPIO_DeInit+0x1fc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <HAL_GPIO_DeInit+0xc2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a5e      	ldr	r2, [pc, #376]	; (8004ccc <HAL_GPIO_DeInit+0x200>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_GPIO_DeInit+0xbe>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a5d      	ldr	r2, [pc, #372]	; (8004cd0 <HAL_GPIO_DeInit+0x204>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_GPIO_DeInit+0xba>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	; (8004cd4 <HAL_GPIO_DeInit+0x208>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_GPIO_DeInit+0xb6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a5b      	ldr	r2, [pc, #364]	; (8004cd8 <HAL_GPIO_DeInit+0x20c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_GPIO_DeInit+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a5a      	ldr	r2, [pc, #360]	; (8004cdc <HAL_GPIO_DeInit+0x210>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_GPIO_DeInit+0xae>
 8004b76:	2309      	movs	r3, #9
 8004b78:	e012      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	e010      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	e00e      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b82:	2307      	movs	r3, #7
 8004b84:	e00c      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b86:	2306      	movs	r3, #6
 8004b88:	e00a      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b8a:	2305      	movs	r3, #5
 8004b8c:	e008      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	e006      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b92:	2303      	movs	r3, #3
 8004b94:	e004      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e002      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_GPIO_DeInit+0xd4>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	f002 0203 	and.w	r2, r2, #3
 8004ba6:	0092      	lsls	r2, r2, #2
 8004ba8:	4093      	lsls	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d132      	bne.n	8004c16 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bb0:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	4949      	ldr	r1, [pc, #292]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bbe:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	4946      	ldr	r1, [pc, #280]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bcc:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4942      	ldr	r1, [pc, #264]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	493f      	ldr	r1, [pc, #252]	; (8004ce0 <HAL_GPIO_DeInit+0x214>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004bf8:	4a2e      	ldr	r2, [pc, #184]	; (8004cb4 <HAL_GPIO_DeInit+0x1e8>)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	3302      	adds	r3, #2
 8004c00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	482a      	ldr	r0, [pc, #168]	; (8004cb4 <HAL_GPIO_DeInit+0x1e8>)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	400a      	ands	r2, r1
 8004c10:	3302      	adds	r3, #2
 8004c12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	2103      	movs	r1, #3
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	401a      	ands	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	08da      	lsrs	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3208      	adds	r2, #8
 8004c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	220f      	movs	r2, #15
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	08d2      	lsrs	r2, r2, #3
 8004c4c:	4019      	ands	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3208      	adds	r2, #8
 8004c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	2103      	movs	r1, #3
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	401a      	ands	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2101      	movs	r1, #1
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2103      	movs	r1, #3
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	401a      	ands	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	f67f af22 	bls.w	8004ae8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	40020000 	.word	0x40020000
 8004cbc:	40020400 	.word	0x40020400
 8004cc0:	40020800 	.word	0x40020800
 8004cc4:	40020c00 	.word	0x40020c00
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40021400 	.word	0x40021400
 8004cd0:	40021800 	.word	0x40021800
 8004cd4:	40021c00 	.word	0x40021c00
 8004cd8:	40022000 	.word	0x40022000
 8004cdc:	40022400 	.word	0x40022400
 8004ce0:	40013c00 	.word	0x40013c00

08004ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	807b      	strh	r3, [r7, #2]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cf4:	787b      	ldrb	r3, [r7, #1]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d00:	e003      	b.n	8004d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	041a      	lsls	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	619a      	str	r2, [r3, #24]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e12b      	b.n	8004f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc fb72 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	; 0x24
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f002 f95a 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4a81      	ldr	r2, [pc, #516]	; (8004f8c <HAL_I2C_Init+0x274>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d807      	bhi.n	8004d9c <HAL_I2C_Init+0x84>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a80      	ldr	r2, [pc, #512]	; (8004f90 <HAL_I2C_Init+0x278>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	bf94      	ite	ls
 8004d94:	2301      	movls	r3, #1
 8004d96:	2300      	movhi	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e006      	b.n	8004daa <HAL_I2C_Init+0x92>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a7d      	ldr	r2, [pc, #500]	; (8004f94 <HAL_I2C_Init+0x27c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bf94      	ite	ls
 8004da4:	2301      	movls	r3, #1
 8004da6:	2300      	movhi	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0e7      	b.n	8004f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a78      	ldr	r2, [pc, #480]	; (8004f98 <HAL_I2C_Init+0x280>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0c9b      	lsrs	r3, r3, #18
 8004dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a6a      	ldr	r2, [pc, #424]	; (8004f8c <HAL_I2C_Init+0x274>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d802      	bhi.n	8004dec <HAL_I2C_Init+0xd4>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3301      	adds	r3, #1
 8004dea:	e009      	b.n	8004e00 <HAL_I2C_Init+0xe8>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	4a69      	ldr	r2, [pc, #420]	; (8004f9c <HAL_I2C_Init+0x284>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	3301      	adds	r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	495c      	ldr	r1, [pc, #368]	; (8004f8c <HAL_I2C_Init+0x274>)
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d819      	bhi.n	8004e54 <HAL_I2C_Init+0x13c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1e59      	subs	r1, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e34:	400b      	ands	r3, r1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_I2C_Init+0x138>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1e59      	subs	r1, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4e:	e051      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004e50:	2304      	movs	r3, #4
 8004e52:	e04f      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d111      	bne.n	8004e80 <HAL_I2C_Init+0x168>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e58      	subs	r0, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e012      	b.n	8004ea6 <HAL_I2C_Init+0x18e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	0099      	lsls	r1, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Init+0x196>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e022      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_I2C_Init+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1e58      	subs	r0, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	440b      	add	r3, r1
 8004ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	e00f      	b.n	8004ef4 <HAL_I2C_Init+0x1dc>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1e58      	subs	r0, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	0099      	lsls	r1, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eea:	3301      	adds	r3, #1
 8004eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	6809      	ldr	r1, [r1, #0]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6911      	ldr	r1, [r2, #16]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68d2      	ldr	r2, [r2, #12]
 8004f2e:	4311      	orrs	r1, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	000186a0 	.word	0x000186a0
 8004f90:	001e847f 	.word	0x001e847f
 8004f94:	003d08ff 	.word	0x003d08ff
 8004f98:	431bde83 	.word	0x431bde83
 8004f9c:	10624dd3 	.word	0x10624dd3

08004fa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	813b      	strh	r3, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fba:	f7fe fd4d 	bl	8003a58 <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	f040 80d9 	bne.w	8005180 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2319      	movs	r3, #25
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	496d      	ldr	r1, [pc, #436]	; (800518c <HAL_I2C_Mem_Write+0x1ec>)
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fdad 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e0cc      	b.n	8005182 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0x56>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e0c5      	b.n	8005182 <HAL_I2C_Mem_Write+0x1e2>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d007      	beq.n	800501c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2221      	movs	r2, #33	; 0x21
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2240      	movs	r2, #64	; 0x40
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a4d      	ldr	r2, [pc, #308]	; (8005190 <HAL_I2C_Mem_Write+0x1f0>)
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800505e:	88f8      	ldrh	r0, [r7, #6]
 8005060:	893a      	ldrh	r2, [r7, #8]
 8005062:	8979      	ldrh	r1, [r7, #10]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	4603      	mov	r3, r0
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fbe4 	bl	800583c <I2C_RequestMemoryWrite>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d052      	beq.n	8005120 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e081      	b.n	8005182 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fe2e 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b04      	cmp	r3, #4
 8005094:	d107      	bne.n	80050a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06b      	b.n	8005182 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d11b      	bne.n	8005120 <HAL_I2C_Mem_Write+0x180>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1aa      	bne.n	800507e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fe1a 	bl	8005d66 <I2C_WaitOnBTFFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b04      	cmp	r3, #4
 800513e:	d107      	bne.n	8005150 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e016      	b.n	8005182 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	00100002 	.word	0x00100002
 8005190:	ffff0000 	.word	0xffff0000

08005194 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	; 0x30
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	817b      	strh	r3, [r7, #10]
 80051a6:	460b      	mov	r3, r1
 80051a8:	813b      	strh	r3, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051ae:	f7fe fc53 	bl	8003a58 <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	f040 8208 	bne.w	80055d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2319      	movs	r3, #25
 80051c8:	2201      	movs	r2, #1
 80051ca:	497b      	ldr	r1, [pc, #492]	; (80053b8 <HAL_I2C_Mem_Read+0x224>)
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fcb3 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
 80051da:	e1fb      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_I2C_Mem_Read+0x56>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e1f4      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d007      	beq.n	8005210 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2222      	movs	r2, #34	; 0x22
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a5b      	ldr	r2, [pc, #364]	; (80053bc <HAL_I2C_Mem_Read+0x228>)
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005252:	88f8      	ldrh	r0, [r7, #6]
 8005254:	893a      	ldrh	r2, [r7, #8]
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4603      	mov	r3, r0
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fb80 	bl	8005968 <I2C_RequestMemoryRead>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e1b0      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d113      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e184      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d11b      	bne.n	80052e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e164      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d11b      	bne.n	8005322 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	e144      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005338:	e138      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533e:	2b03      	cmp	r3, #3
 8005340:	f200 80f1 	bhi.w	8005526 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005348:	2b01      	cmp	r3, #1
 800534a:	d123      	bne.n	8005394 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fd49 	bl	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e139      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005392:	e10b      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005398:	2b02      	cmp	r3, #2
 800539a:	d14e      	bne.n	800543a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2200      	movs	r2, #0
 80053a4:	4906      	ldr	r1, [pc, #24]	; (80053c0 <HAL_I2C_Mem_Read+0x22c>)
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fbc6 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e10e      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
 80053b6:	bf00      	nop
 80053b8:	00100002 	.word	0x00100002
 80053bc:	ffff0000 	.word	0xffff0000
 80053c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005438:	e0b8      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2200      	movs	r2, #0
 8005442:	4966      	ldr	r1, [pc, #408]	; (80055dc <HAL_I2C_Mem_Read+0x448>)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fb77 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0bf      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2200      	movs	r2, #0
 800549e:	494f      	ldr	r1, [pc, #316]	; (80055dc <HAL_I2C_Mem_Read+0x448>)
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fb49 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e091      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005524:	e042      	b.n	80055ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fc5c 	bl	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e04c      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d118      	bne.n	80055ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f47f aec2 	bne.w	800533a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e000      	b.n	80055d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3728      	adds	r7, #40	; 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	00010004 	.word	0x00010004

080055e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	460b      	mov	r3, r1
 80055ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055f0:	f7fe fa32 	bl	8003a58 <HAL_GetTick>
 80055f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	f040 8111 	bne.w	800582a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2319      	movs	r3, #25
 800560e:	2201      	movs	r2, #1
 8005610:	4988      	ldr	r1, [pc, #544]	; (8005834 <HAL_I2C_IsDeviceReady+0x254>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fa90 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e104      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_I2C_IsDeviceReady+0x50>
 800562c:	2302      	movs	r3, #2
 800562e:	e0fd      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d007      	beq.n	8005656 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2224      	movs	r2, #36	; 0x24
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a70      	ldr	r2, [pc, #448]	; (8005838 <HAL_I2C_IsDeviceReady+0x258>)
 8005678:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005688:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2200      	movs	r2, #0
 8005692:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fa4e 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b0:	d103      	bne.n	80056ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e0b6      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fe f9c3 	bl	8003a58 <HAL_GetTick>
 80056d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005702:	e025      	b.n	8005750 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005704:	f7fe f9a8 	bl	8003a58 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <HAL_I2C_IsDeviceReady+0x13a>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	22a0      	movs	r2, #160	; 0xa0
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b02      	cmp	r3, #2
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2ba0      	cmp	r3, #160	; 0xa0
 800575a:	d005      	beq.n	8005768 <HAL_I2C_IsDeviceReady+0x188>
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <HAL_I2C_IsDeviceReady+0x188>
 8005762:	7dbb      	ldrb	r3, [r7, #22]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0cd      	beq.n	8005704 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d129      	bne.n	80057d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2319      	movs	r3, #25
 80057aa:	2201      	movs	r2, #1
 80057ac:	4921      	ldr	r1, [pc, #132]	; (8005834 <HAL_I2C_IsDeviceReady+0x254>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f9c2 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e036      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e02c      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2319      	movs	r3, #25
 80057f2:	2201      	movs	r2, #1
 80057f4:	490f      	ldr	r1, [pc, #60]	; (8005834 <HAL_I2C_IsDeviceReady+0x254>)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f99e 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e012      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3301      	adds	r3, #1
 800580a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	f4ff af32 	bcc.w	800567a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	00100002 	.word	0x00100002
 8005838:	ffff0000 	.word	0xffff0000

0800583c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	4608      	mov	r0, r1
 8005846:	4611      	mov	r1, r2
 8005848:	461a      	mov	r2, r3
 800584a:	4603      	mov	r3, r0
 800584c:	817b      	strh	r3, [r7, #10]
 800584e:	460b      	mov	r3, r1
 8005850:	813b      	strh	r3, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005864:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2200      	movs	r2, #0
 800586e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f960 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588c:	d103      	bne.n	8005896 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e05f      	b.n	800595a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	492d      	ldr	r1, [pc, #180]	; (8005964 <I2C_RequestMemoryWrite+0x128>)
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f998 	bl	8005be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04c      	b.n	800595a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d8:	6a39      	ldr	r1, [r7, #32]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fa02 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00d      	beq.n	8005902 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d107      	bne.n	80058fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e02b      	b.n	800595a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d105      	bne.n	8005914 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005908:	893b      	ldrh	r3, [r7, #8]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	611a      	str	r2, [r3, #16]
 8005912:	e021      	b.n	8005958 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005914:	893b      	ldrh	r3, [r7, #8]
 8005916:	0a1b      	lsrs	r3, r3, #8
 8005918:	b29b      	uxth	r3, r3
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	6a39      	ldr	r1, [r7, #32]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f9dc 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b04      	cmp	r3, #4
 8005938:	d107      	bne.n	800594a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e005      	b.n	800595a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800594e:	893b      	ldrh	r3, [r7, #8]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	00010002 	.word	0x00010002

08005968 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4603      	mov	r3, r0
 8005978:	817b      	strh	r3, [r7, #10]
 800597a:	460b      	mov	r3, r1
 800597c:	813b      	strh	r3, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005990:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f8c2 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00d      	beq.n	80059d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c8:	d103      	bne.n	80059d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0aa      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059d6:	897b      	ldrh	r3, [r7, #10]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	4952      	ldr	r1, [pc, #328]	; (8005b34 <I2C_RequestMemoryRead+0x1cc>)
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f8fa 	bl	8005be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e097      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a14:	6a39      	ldr	r1, [r7, #32]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f964 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d107      	bne.n	8005a3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e076      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d105      	bne.n	8005a50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a44:	893b      	ldrh	r3, [r7, #8]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	e021      	b.n	8005a94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a50:	893b      	ldrh	r3, [r7, #8]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	6a39      	ldr	r1, [r7, #32]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f93e 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d107      	bne.n	8005a86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e050      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a8a:	893b      	ldrh	r3, [r7, #8]
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	6a39      	ldr	r1, [r7, #32]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f923 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d107      	bne.n	8005abc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e035      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ace:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f82b 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00d      	beq.n	8005b04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af6:	d103      	bne.n	8005b00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e013      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b04:	897b      	ldrh	r3, [r7, #10]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	6a3a      	ldr	r2, [r7, #32]
 8005b18:	4906      	ldr	r1, [pc, #24]	; (8005b34 <I2C_RequestMemoryRead+0x1cc>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f863 	bl	8005be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	00010002 	.word	0x00010002

08005b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b48:	e025      	b.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d021      	beq.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fd ff81 	bl	8003a58 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d116      	bne.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e023      	b.n	8005bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10d      	bne.n	8005bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	e00c      	b.n	8005bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d0b6      	beq.n	8005b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bf4:	e051      	b.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c04:	d123      	bne.n	8005c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e046      	b.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d021      	beq.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c56:	f7fd feff 	bl	8003a58 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d302      	bcc.n	8005c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d116      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e020      	b.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10c      	bne.n	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	43da      	mvns	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e00b      	b.n	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	43da      	mvns	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d18d      	bne.n	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf0:	e02d      	b.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f8ce 	bl	8005e94 <I2C_IsAcknowledgeFailed>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e02d      	b.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d021      	beq.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0a:	f7fd fea5 	bl	8003a58 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d116      	bne.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f043 0220 	orr.w	r2, r3, #32
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e007      	b.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b80      	cmp	r3, #128	; 0x80
 8005d5a:	d1ca      	bne.n	8005cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d72:	e02d      	b.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f88d 	bl	8005e94 <I2C_IsAcknowledgeFailed>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e02d      	b.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d021      	beq.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8c:	f7fd fe64 	bl	8003a58 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d302      	bcc.n	8005da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d116      	bne.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	f043 0220 	orr.w	r2, r3, #32
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e007      	b.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d1ca      	bne.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005df4:	e042      	b.n	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d119      	bne.n	8005e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0210 	mvn.w	r2, #16
 8005e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e029      	b.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e38:	f7fd fe0e 	bl	8003a58 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d302      	bcc.n	8005e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d116      	bne.n	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e007      	b.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d1b5      	bne.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d11b      	bne.n	8005ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	f043 0204 	orr.w	r2, r3, #4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d129      	bne.n	8005f5c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	; 0x24
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0210 	bic.w	r2, r2, #16
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005f5c:	2302      	movs	r3, #2
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d12a      	bne.n	8005fda <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	f023 030f 	bic.w	r3, r3, #15
 8005faa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	89fa      	ldrh	r2, [r7, #14]
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e000      	b.n	8005fdc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e0bf      	b.n	800617a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fb faf4 	bl	80015fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800602a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006040:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_LTDC_Init+0x19c>)
 800605c:	400b      	ands	r3, r1
 800605e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6899      	ldr	r1, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68d9      	ldr	r1, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b3e      	ldr	r3, [pc, #248]	; (8006184 <HAL_LTDC_Init+0x19c>)
 800608a:	400b      	ands	r3, r1
 800608c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	041b      	lsls	r3, r3, #16
 8006094:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68d9      	ldr	r1, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1a      	ldr	r2, [r3, #32]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6919      	ldr	r1, [r3, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <HAL_LTDC_Init+0x19c>)
 80060b8:	400b      	ands	r3, r1
 80060ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6919      	ldr	r1, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6959      	ldr	r1, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b27      	ldr	r3, [pc, #156]	; (8006184 <HAL_LTDC_Init+0x19c>)
 80060e6:	400b      	ands	r3, r1
 80060e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	041b      	lsls	r3, r3, #16
 80060f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6959      	ldr	r1, [r3, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0206 	orr.w	r2, r2, #6
 8006156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	f000f800 	.word	0xf000f800

08006188 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d023      	beq.n	80061f2 <HAL_LTDC_IRQHandler+0x6a>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01e      	beq.n	80061f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2204      	movs	r2, #4
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2204      	movs	r2, #4
 80061e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f86f 	bl	80062d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d023      	beq.n	8006244 <HAL_LTDC_IRQHandler+0xbc>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01e      	beq.n	8006244 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0202 	bic.w	r2, r2, #2
 8006214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2202      	movs	r2, #2
 800621c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006224:	f043 0202 	orr.w	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2204      	movs	r2, #4
 8006232:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f846 	bl	80062d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d01b      	beq.n	8006286 <HAL_LTDC_IRQHandler+0xfe>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d016      	beq.n	8006286 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f82f 	bl	80062e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_LTDC_IRQHandler+0x140>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d016      	beq.n	80062c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0208 	bic.w	r2, r2, #8
 80062a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2208      	movs	r2, #8
 80062b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f818 	bl	80062f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800630c:	b5b0      	push	{r4, r5, r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_LTDC_ConfigLayer+0x1a>
 8006322:	2302      	movs	r3, #2
 8006324:	e02c      	b.n	8006380 <HAL_LTDC_ConfigLayer+0x74>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2134      	movs	r1, #52	; 0x34
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	4614      	mov	r4, r2
 800634a:	461d      	mov	r5, r3
 800634c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800634e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f83b 	bl	80063dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2201      	movs	r2, #1
 800636c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bdb0      	pop	{r4, r5, r7, pc}

08006388 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_LTDC_EnableDither+0x16>
 800639a:	2302      	movs	r3, #2
 800639c:	e016      	b.n	80063cc <HAL_LTDC_EnableDither+0x44>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <HAL_LTDC_EnableDither+0x50>)
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <HAL_LTDC_EnableDither+0x50>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40016800 	.word	0x40016800

080063dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	; 0x24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f8:	4413      	add	r3, r2
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	3384      	adds	r3, #132	; 0x84
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	4611      	mov	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	01d2      	lsls	r2, r2, #7
 8006418:	440a      	add	r2, r1
 800641a:	3284      	adds	r2, #132	; 0x84
 800641c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006420:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006432:	4413      	add	r3, r2
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	440b      	add	r3, r1
 8006442:	3384      	adds	r3, #132	; 0x84
 8006444:	4619      	mov	r1, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4313      	orrs	r3, r2
 800644a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800645a:	4413      	add	r3, r2
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	01db      	lsls	r3, r3, #7
 800646a:	4413      	add	r3, r2
 800646c:	3384      	adds	r3, #132	; 0x84
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	4611      	mov	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	01d2      	lsls	r2, r2, #7
 800647a:	440a      	add	r2, r1
 800647c:	3284      	adds	r2, #132	; 0x84
 800647e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006482:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006492:	4413      	add	r3, r2
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4619      	mov	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	01db      	lsls	r3, r3, #7
 80064a0:	440b      	add	r3, r1
 80064a2:	3384      	adds	r3, #132	; 0x84
 80064a4:	4619      	mov	r1, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	4413      	add	r3, r2
 80064b8:	3384      	adds	r3, #132	; 0x84
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	4611      	mov	r1, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	01d2      	lsls	r2, r2, #7
 80064c6:	440a      	add	r2, r1
 80064c8:	3284      	adds	r2, #132	; 0x84
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	01db      	lsls	r3, r3, #7
 80064da:	4413      	add	r3, r2
 80064dc:	3384      	adds	r3, #132	; 0x84
 80064de:	461a      	mov	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	061b      	lsls	r3, r3, #24
 8006500:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	4413      	add	r3, r2
 800650e:	3384      	adds	r3, #132	; 0x84
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	4413      	add	r3, r2
 800651e:	3384      	adds	r3, #132	; 0x84
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800652c:	461a      	mov	r2, r3
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	431a      	orrs	r2, r3
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	431a      	orrs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	440b      	add	r3, r1
 8006542:	3384      	adds	r3, #132	; 0x84
 8006544:	4619      	mov	r1, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	4413      	add	r3, r2
 8006558:	3384      	adds	r3, #132	; 0x84
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	4611      	mov	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	01d2      	lsls	r2, r2, #7
 8006566:	440a      	add	r2, r1
 8006568:	3284      	adds	r2, #132	; 0x84
 800656a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800656e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	01db      	lsls	r3, r3, #7
 800657a:	4413      	add	r3, r2
 800657c:	3384      	adds	r3, #132	; 0x84
 800657e:	461a      	mov	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	01db      	lsls	r3, r3, #7
 8006590:	4413      	add	r3, r2
 8006592:	3384      	adds	r3, #132	; 0x84
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	4611      	mov	r1, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	01d2      	lsls	r2, r2, #7
 80065a0:	440a      	add	r2, r1
 80065a2:	3284      	adds	r2, #132	; 0x84
 80065a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80065a8:	f023 0307 	bic.w	r3, r3, #7
 80065ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	6809      	ldr	r1, [r1, #0]
 80065ba:	4608      	mov	r0, r1
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	01c9      	lsls	r1, r1, #7
 80065c0:	4401      	add	r1, r0
 80065c2:	3184      	adds	r1, #132	; 0x84
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4413      	add	r3, r2
 80065d4:	3384      	adds	r3, #132	; 0x84
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	01db      	lsls	r3, r3, #7
 80065e2:	4413      	add	r3, r2
 80065e4:	3384      	adds	r3, #132	; 0x84
 80065e6:	461a      	mov	r2, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	4413      	add	r3, r2
 80065f8:	3384      	adds	r3, #132	; 0x84
 80065fa:	461a      	mov	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800660a:	2304      	movs	r3, #4
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	e01b      	b.n	8006648 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d102      	bne.n	800661e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006618:	2303      	movs	r3, #3
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e014      	b.n	8006648 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d00b      	beq.n	800663e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800662a:	2b02      	cmp	r3, #2
 800662c:	d007      	beq.n	800663e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006632:	2b03      	cmp	r3, #3
 8006634:	d003      	beq.n	800663e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800663a:	2b07      	cmp	r3, #7
 800663c:	d102      	bne.n	8006644 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800663e:	2302      	movs	r3, #2
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e001      	b.n	8006648 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006644:	2301      	movs	r3, #1
 8006646:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	01db      	lsls	r3, r3, #7
 8006652:	4413      	add	r3, r2
 8006654:	3384      	adds	r3, #132	; 0x84
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	4611      	mov	r1, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	01d2      	lsls	r2, r2, #7
 8006662:	440a      	add	r2, r1
 8006664:	3284      	adds	r2, #132	; 0x84
 8006666:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800666a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	041a      	lsls	r2, r3, #16
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6859      	ldr	r1, [r3, #4]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	1acb      	subs	r3, r1, r3
 8006682:	69f9      	ldr	r1, [r7, #28]
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	3303      	adds	r3, #3
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6809      	ldr	r1, [r1, #0]
 800668e:	4608      	mov	r0, r1
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	01c9      	lsls	r1, r1, #7
 8006694:	4401      	add	r1, r0
 8006696:	3184      	adds	r1, #132	; 0x84
 8006698:	4313      	orrs	r3, r2
 800669a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	01db      	lsls	r3, r3, #7
 80066a6:	4413      	add	r3, r2
 80066a8:	3384      	adds	r3, #132	; 0x84
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	4611      	mov	r1, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	01d2      	lsls	r2, r2, #7
 80066b6:	440a      	add	r2, r1
 80066b8:	3284      	adds	r2, #132	; 0x84
 80066ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066be:	f023 0307 	bic.w	r3, r3, #7
 80066c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	01db      	lsls	r3, r3, #7
 80066ce:	4413      	add	r3, r2
 80066d0:	3384      	adds	r3, #132	; 0x84
 80066d2:	461a      	mov	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	01db      	lsls	r3, r3, #7
 80066e4:	4413      	add	r3, r2
 80066e6:	3384      	adds	r3, #132	; 0x84
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	4611      	mov	r1, r2
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	01d2      	lsls	r2, r2, #7
 80066f4:	440a      	add	r2, r1
 80066f6:	3284      	adds	r2, #132	; 0x84
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
}
 80066fe:	bf00      	nop
 8006700:	3724      	adds	r7, #36	; 0x24
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006716:	2300      	movs	r3, #0
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	4b20      	ldr	r3, [pc, #128]	; (800679c <HAL_PWREx_EnableOverDrive+0x90>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_PWREx_EnableOverDrive+0x90>)
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006724:	6413      	str	r3, [r2, #64]	; 0x40
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <HAL_PWREx_EnableOverDrive+0x90>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8006734:	2201      	movs	r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006738:	f7fd f98e 	bl	8003a58 <HAL_GetTick>
 800673c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800673e:	e009      	b.n	8006754 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006740:	f7fd f98a 	bl	8003a58 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674e:	d901      	bls.n	8006754 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e01f      	b.n	8006794 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006754:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	d1ee      	bne.n	8006740 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006762:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006768:	f7fd f976 	bl	8003a58 <HAL_GetTick>
 800676c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800676e:	e009      	b.n	8006784 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006770:	f7fd f972 	bl	8003a58 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677e:	d901      	bls.n	8006784 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e007      	b.n	8006794 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006790:	d1ee      	bne.n	8006770 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40023800 	.word	0x40023800
 80067a0:	420e0040 	.word	0x420e0040
 80067a4:	40007000 	.word	0x40007000
 80067a8:	420e0044 	.word	0x420e0044

080067ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e25b      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d075      	beq.n	80068b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ca:	4ba3      	ldr	r3, [pc, #652]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d00c      	beq.n	80067f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067d6:	4ba0      	ldr	r3, [pc, #640]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d112      	bne.n	8006808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067e2:	4b9d      	ldr	r3, [pc, #628]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ee:	d10b      	bne.n	8006808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f0:	4b99      	ldr	r3, [pc, #612]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d05b      	beq.n	80068b4 <HAL_RCC_OscConfig+0x108>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d157      	bne.n	80068b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e236      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d106      	bne.n	8006820 <HAL_RCC_OscConfig+0x74>
 8006812:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a90      	ldr	r2, [pc, #576]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e01d      	b.n	800685c <HAL_RCC_OscConfig+0xb0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006828:	d10c      	bne.n	8006844 <HAL_RCC_OscConfig+0x98>
 800682a:	4b8b      	ldr	r3, [pc, #556]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a8a      	ldr	r2, [pc, #552]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a87      	ldr	r2, [pc, #540]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e00b      	b.n	800685c <HAL_RCC_OscConfig+0xb0>
 8006844:	4b84      	ldr	r3, [pc, #528]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a83      	ldr	r2, [pc, #524]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800684a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b81      	ldr	r3, [pc, #516]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fd f8f8 	bl	8003a58 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800686c:	f7fd f8f4 	bl	8003a58 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e1fb      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687e:	4b76      	ldr	r3, [pc, #472]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0xc0>
 800688a:	e014      	b.n	80068b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fd f8e4 	bl	8003a58 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006894:	f7fd f8e0 	bl	8003a58 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e1e7      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a6:	4b6c      	ldr	r3, [pc, #432]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0xe8>
 80068b2:	e000      	b.n	80068b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d063      	beq.n	800698a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068c2:	4b65      	ldr	r3, [pc, #404]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ce:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d11c      	bne.n	8006914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068da:	4b5f      	ldr	r3, [pc, #380]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e6:	4b5c      	ldr	r3, [pc, #368]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_RCC_OscConfig+0x152>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e1bb      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fe:	4b56      	ldr	r3, [pc, #344]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4952      	ldr	r1, [pc, #328]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800690e:	4313      	orrs	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	e03a      	b.n	800698a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d020      	beq.n	800695e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800691c:	4b4f      	ldr	r3, [pc, #316]	; (8006a5c <HAL_RCC_OscConfig+0x2b0>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fd f899 	bl	8003a58 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800692a:	f7fd f895 	bl	8003a58 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e19c      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	4b46      	ldr	r3, [pc, #280]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006948:	4b43      	ldr	r3, [pc, #268]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4940      	ldr	r1, [pc, #256]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
 800695c:	e015      	b.n	800698a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695e:	4b3f      	ldr	r3, [pc, #252]	; (8006a5c <HAL_RCC_OscConfig+0x2b0>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fd f878 	bl	8003a58 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696c:	f7fd f874 	bl	8003a58 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e17b      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800697e:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d030      	beq.n	80069f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <HAL_RCC_OscConfig+0x2b4>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fd f858 	bl	8003a58 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fd f854 	bl	8003a58 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e15b      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069be:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x200>
 80069ca:	e015      	b.n	80069f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069cc:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <HAL_RCC_OscConfig+0x2b4>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d2:	f7fd f841 	bl	8003a58 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069da:	f7fd f83d 	bl	8003a58 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e144      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80069ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f0      	bne.n	80069da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80a0 	beq.w	8006b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0a:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10f      	bne.n	8006a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4a0e      	ldr	r2, [pc, #56]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <HAL_RCC_OscConfig+0x2b8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d121      	bne.n	8006a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <HAL_RCC_OscConfig+0x2b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a07      	ldr	r2, [pc, #28]	; (8006a64 <HAL_RCC_OscConfig+0x2b8>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4e:	f7fd f803 	bl	8003a58 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a54:	e011      	b.n	8006a7a <HAL_RCC_OscConfig+0x2ce>
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	42470000 	.word	0x42470000
 8006a60:	42470e80 	.word	0x42470e80
 8006a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a68:	f7fc fff6 	bl	8003a58 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e0fd      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	4b81      	ldr	r3, [pc, #516]	; (8006c80 <HAL_RCC_OscConfig+0x4d4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d106      	bne.n	8006a9c <HAL_RCC_OscConfig+0x2f0>
 8006a8e:	4b7d      	ldr	r3, [pc, #500]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	4a7c      	ldr	r2, [pc, #496]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9a:	e01c      	b.n	8006ad6 <HAL_RCC_OscConfig+0x32a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b05      	cmp	r3, #5
 8006aa2:	d10c      	bne.n	8006abe <HAL_RCC_OscConfig+0x312>
 8006aa4:	4b77      	ldr	r3, [pc, #476]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa8:	4a76      	ldr	r2, [pc, #472]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006aaa:	f043 0304 	orr.w	r3, r3, #4
 8006aae:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab0:	4b74      	ldr	r3, [pc, #464]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab4:	4a73      	ldr	r2, [pc, #460]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	6713      	str	r3, [r2, #112]	; 0x70
 8006abc:	e00b      	b.n	8006ad6 <HAL_RCC_OscConfig+0x32a>
 8006abe:	4b71      	ldr	r3, [pc, #452]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	4a70      	ldr	r2, [pc, #448]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aca:	4b6e      	ldr	r3, [pc, #440]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a6d      	ldr	r2, [pc, #436]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006ad0:	f023 0304 	bic.w	r3, r3, #4
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d015      	beq.n	8006b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ade:	f7fc ffbb 	bl	8003a58 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae4:	e00a      	b.n	8006afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae6:	f7fc ffb7 	bl	8003a58 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e0bc      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afc:	4b61      	ldr	r3, [pc, #388]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0ee      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x33a>
 8006b08:	e014      	b.n	8006b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b0a:	f7fc ffa5 	bl	8003a58 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b10:	e00a      	b.n	8006b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b12:	f7fc ffa1 	bl	8003a58 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e0a6      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b28:	4b56      	ldr	r3, [pc, #344]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1ee      	bne.n	8006b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d105      	bne.n	8006b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b3a:	4b52      	ldr	r3, [pc, #328]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	4a51      	ldr	r2, [pc, #324]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8092 	beq.w	8006c74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b50:	4b4c      	ldr	r3, [pc, #304]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 030c 	and.w	r3, r3, #12
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d05c      	beq.n	8006c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d141      	bne.n	8006be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b64:	4b48      	ldr	r3, [pc, #288]	; (8006c88 <HAL_RCC_OscConfig+0x4dc>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6a:	f7fc ff75 	bl	8003a58 <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b72:	f7fc ff71 	bl	8003a58 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e078      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1f0      	bne.n	8006b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	019b      	lsls	r3, r3, #6
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	4933      	ldr	r1, [pc, #204]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bba:	4b33      	ldr	r3, [pc, #204]	; (8006c88 <HAL_RCC_OscConfig+0x4dc>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fc ff4a 	bl	8003a58 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fc ff46 	bl	8003a58 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e04d      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bda:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x41c>
 8006be6:	e045      	b.n	8006c74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be8:	4b27      	ldr	r3, [pc, #156]	; (8006c88 <HAL_RCC_OscConfig+0x4dc>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bee:	f7fc ff33 	bl	8003a58 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf6:	f7fc ff2f 	bl	8003a58 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e036      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c08:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f0      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x44a>
 8006c14:	e02e      	b.n	8006c74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e029      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c22:	4b18      	ldr	r3, [pc, #96]	; (8006c84 <HAL_RCC_OscConfig+0x4d8>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d11c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d115      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d10d      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d106      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40007000 	.word	0x40007000
 8006c84:	40023800 	.word	0x40023800
 8006c88:	42470060 	.word	0x42470060

08006c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0cc      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b68      	ldr	r3, [pc, #416]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d90c      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b65      	ldr	r3, [pc, #404]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb6:	4b63      	ldr	r3, [pc, #396]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0b8      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d020      	beq.n	8006d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce0:	4b59      	ldr	r3, [pc, #356]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a58      	ldr	r2, [pc, #352]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf8:	4b53      	ldr	r3, [pc, #332]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4a52      	ldr	r2, [pc, #328]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d04:	4b50      	ldr	r3, [pc, #320]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	494d      	ldr	r1, [pc, #308]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d044      	beq.n	8006dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2a:	4b47      	ldr	r3, [pc, #284]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d119      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e07f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d003      	beq.n	8006d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d107      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e06f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5a:	4b3b      	ldr	r3, [pc, #236]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e067      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	4b37      	ldr	r3, [pc, #220]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f023 0203 	bic.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4934      	ldr	r1, [pc, #208]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d7c:	f7fc fe6c 	bl	8003a58 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d84:	f7fc fe68 	bl	8003a58 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e04f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 020c 	and.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d1eb      	bne.n	8006d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dac:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d20c      	bcs.n	8006dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b20      	ldr	r3, [pc, #128]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e032      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de0:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4916      	ldr	r1, [pc, #88]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfe:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	490e      	ldr	r1, [pc, #56]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e12:	f000 f821 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	091b      	lsrs	r3, r3, #4
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	490a      	ldr	r1, [pc, #40]	; (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	5ccb      	ldrb	r3, [r1, r3]
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fb f8d0 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40023c00 	.word	0x40023c00
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	0800d4e4 	.word	0x0800d4e4
 8006e50:	20000000 	.word	0x20000000
 8006e54:	2000005c 	.word	0x2000005c

08006e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e70:	4b67      	ldr	r3, [pc, #412]	; (8007010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d00d      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x40>
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	f200 80bd 	bhi.w	8006ffc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_RCC_GetSysClockFreq+0x34>
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d003      	beq.n	8006e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e8a:	e0b7      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e8c:	4b61      	ldr	r3, [pc, #388]	; (8007014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e8e:	60bb      	str	r3, [r7, #8]
       break;
 8006e90:	e0b7      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e92:	4b61      	ldr	r3, [pc, #388]	; (8007018 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006e94:	60bb      	str	r3, [r7, #8]
      break;
 8006e96:	e0b4      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e98:	4b5d      	ldr	r3, [pc, #372]	; (8007010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ea2:	4b5b      	ldr	r3, [pc, #364]	; (8007010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d04d      	beq.n	8006f4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eae:	4b58      	ldr	r3, [pc, #352]	; (8007010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	099b      	lsrs	r3, r3, #6
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	ea02 0800 	and.w	r8, r2, r0
 8006ec6:	ea03 0901 	and.w	r9, r3, r1
 8006eca:	4640      	mov	r0, r8
 8006ecc:	4649      	mov	r1, r9
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	014b      	lsls	r3, r1, #5
 8006ed8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006edc:	0142      	lsls	r2, r0, #5
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	ebb0 0008 	subs.w	r0, r0, r8
 8006ee6:	eb61 0109 	sbc.w	r1, r1, r9
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	018b      	lsls	r3, r1, #6
 8006ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ef8:	0182      	lsls	r2, r0, #6
 8006efa:	1a12      	subs	r2, r2, r0
 8006efc:	eb63 0301 	sbc.w	r3, r3, r1
 8006f00:	f04f 0000 	mov.w	r0, #0
 8006f04:	f04f 0100 	mov.w	r1, #0
 8006f08:	00d9      	lsls	r1, r3, #3
 8006f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f0e:	00d0      	lsls	r0, r2, #3
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	eb12 0208 	adds.w	r2, r2, r8
 8006f18:	eb43 0309 	adc.w	r3, r3, r9
 8006f1c:	f04f 0000 	mov.w	r0, #0
 8006f20:	f04f 0100 	mov.w	r1, #0
 8006f24:	0259      	lsls	r1, r3, #9
 8006f26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f2a:	0250      	lsls	r0, r2, #9
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4610      	mov	r0, r2
 8006f32:	4619      	mov	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	f7f9 fe44 	bl	8000bc8 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4613      	mov	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e04a      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	099b      	lsrs	r3, r3, #6
 8006f50:	461a      	mov	r2, r3
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f5a:	f04f 0100 	mov.w	r1, #0
 8006f5e:	ea02 0400 	and.w	r4, r2, r0
 8006f62:	ea03 0501 	and.w	r5, r3, r1
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	014b      	lsls	r3, r1, #5
 8006f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f78:	0142      	lsls	r2, r0, #5
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	1b00      	subs	r0, r0, r4
 8006f80:	eb61 0105 	sbc.w	r1, r1, r5
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	018b      	lsls	r3, r1, #6
 8006f8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f92:	0182      	lsls	r2, r0, #6
 8006f94:	1a12      	subs	r2, r2, r0
 8006f96:	eb63 0301 	sbc.w	r3, r3, r1
 8006f9a:	f04f 0000 	mov.w	r0, #0
 8006f9e:	f04f 0100 	mov.w	r1, #0
 8006fa2:	00d9      	lsls	r1, r3, #3
 8006fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fa8:	00d0      	lsls	r0, r2, #3
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	1912      	adds	r2, r2, r4
 8006fb0:	eb45 0303 	adc.w	r3, r5, r3
 8006fb4:	f04f 0000 	mov.w	r0, #0
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	0299      	lsls	r1, r3, #10
 8006fbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006fc2:	0290      	lsls	r0, r2, #10
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	f7f9 fdf8 	bl	8000bc8 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4613      	mov	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	3301      	adds	r3, #1
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff8:	60bb      	str	r3, [r7, #8]
      break;
 8006ffa:	e002      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ffe:	60bb      	str	r3, [r7, #8]
      break;
 8007000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007002:	68bb      	ldr	r3, [r7, #8]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800700e:	bf00      	nop
 8007010:	40023800 	.word	0x40023800
 8007014:	00f42400 	.word	0x00f42400
 8007018:	007a1200 	.word	0x007a1200

0800701c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007020:	4b03      	ldr	r3, [pc, #12]	; (8007030 <HAL_RCC_GetHCLKFreq+0x14>)
 8007022:	681b      	ldr	r3, [r3, #0]
}
 8007024:	4618      	mov	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000000 	.word	0x20000000

08007034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007038:	f7ff fff0 	bl	800701c <HAL_RCC_GetHCLKFreq>
 800703c:	4602      	mov	r2, r0
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	0a9b      	lsrs	r3, r3, #10
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	4903      	ldr	r1, [pc, #12]	; (8007058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800704a:	5ccb      	ldrb	r3, [r1, r3]
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40023800 	.word	0x40023800
 8007058:	0800d4f4 	.word	0x0800d4f4

0800705c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007060:	f7ff ffdc 	bl	800701c <HAL_RCC_GetHCLKFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0b5b      	lsrs	r3, r3, #13
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	4903      	ldr	r1, [pc, #12]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007072:	5ccb      	ldrb	r3, [r1, r3]
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007078:	4618      	mov	r0, r3
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40023800 	.word	0x40023800
 8007080:	0800d4f4 	.word	0x0800d4f4

08007084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220f      	movs	r2, #15
 8007092:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0203 	and.w	r2, r3, #3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <HAL_RCC_GetClockConfig+0x60>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 020f 	and.w	r2, r3, #15
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40023c00 	.word	0x40023c00

080070e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800710c:	2b00      	cmp	r3, #0
 800710e:	d105      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007118:	2b00      	cmp	r3, #0
 800711a:	d075      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800711c:	4bad      	ldr	r3, [pc, #692]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007122:	f7fc fc99 	bl	8003a58 <HAL_GetTick>
 8007126:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007128:	e008      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800712a:	f7fc fc95 	bl	8003a58 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e18b      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800713c:	4ba6      	ldr	r3, [pc, #664]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f0      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	019a      	lsls	r2, r3, #6
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	071b      	lsls	r3, r3, #28
 8007160:	499d      	ldr	r1, [pc, #628]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01f      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007174:	4b98      	ldr	r3, [pc, #608]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717a:	0f1b      	lsrs	r3, r3, #28
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	019a      	lsls	r2, r3, #6
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	431a      	orrs	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	071b      	lsls	r3, r3, #28
 8007194:	4990      	ldr	r1, [pc, #576]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800719c:	4b8e      	ldr	r3, [pc, #568]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800719e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a2:	f023 021f 	bic.w	r2, r3, #31
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	498a      	ldr	r1, [pc, #552]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	019a      	lsls	r2, r3, #6
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	061b      	lsls	r3, r3, #24
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	071b      	lsls	r3, r3, #28
 80071d4:	4980      	ldr	r1, [pc, #512]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071dc:	4b7d      	ldr	r3, [pc, #500]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071de:	2201      	movs	r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071e2:	f7fc fc39 	bl	8003a58 <HAL_GetTick>
 80071e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071e8:	e008      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071ea:	f7fc fc35 	bl	8003a58 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e12b      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071fc:	4b76      	ldr	r3, [pc, #472]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800721c:	2b00      	cmp	r3, #0
 800721e:	d079      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007220:	4b6e      	ldr	r3, [pc, #440]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007226:	f7fc fc17 	bl	8003a58 <HAL_GetTick>
 800722a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800722c:	e008      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800722e:	f7fc fc13 	bl	8003a58 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e109      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007240:	4b65      	ldr	r3, [pc, #404]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724c:	d0ef      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d020      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800725a:	4b5f      	ldr	r3, [pc, #380]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007260:	0f1b      	lsrs	r3, r3, #28
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	019a      	lsls	r2, r3, #6
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	061b      	lsls	r3, r3, #24
 8007274:	431a      	orrs	r2, r3
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	071b      	lsls	r3, r3, #28
 800727a:	4957      	ldr	r1, [pc, #348]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007282:	4b55      	ldr	r3, [pc, #340]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007288:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	3b01      	subs	r3, #1
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	4950      	ldr	r1, [pc, #320]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01e      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072a8:	4b4b      	ldr	r3, [pc, #300]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ae:	0e1b      	lsrs	r3, r3, #24
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	019a      	lsls	r2, r3, #6
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	061b      	lsls	r3, r3, #24
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	071b      	lsls	r3, r3, #28
 80072c8:	4943      	ldr	r1, [pc, #268]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072d0:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	493e      	ldr	r1, [pc, #248]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072e6:	4b3d      	ldr	r3, [pc, #244]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ec:	f7fc fbb4 	bl	8003a58 <HAL_GetTick>
 80072f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80072f4:	f7fc fbb0 	bl	8003a58 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e0a6      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007306:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800730e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007312:	d1ef      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 808d 	beq.w	800743c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	4a2b      	ldr	r2, [pc, #172]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007330:	6413      	str	r3, [r2, #64]	; 0x40
 8007332:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800733e:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a27      	ldr	r2, [pc, #156]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007348:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800734a:	f7fc fb85 	bl	8003a58 <HAL_GetTick>
 800734e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007350:	e008      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007352:	f7fc fb81 	bl	8003a58 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e077      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007364:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007370:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007378:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d039      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d032      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007396:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007398:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073a4:	4a0c      	ldr	r2, [pc, #48]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d11e      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073b6:	f7fc fb4f 	bl	8003a58 <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073bc:	e014      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073be:	f7fc fb4b 	bl	8003a58 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d90b      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e03f      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80073d4:	42470068 	.word	0x42470068
 80073d8:	40023800 	.word	0x40023800
 80073dc:	42470070 	.word	0x42470070
 80073e0:	40007000 	.word	0x40007000
 80073e4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e8:	4b1c      	ldr	r3, [pc, #112]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0e4      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007400:	d10d      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007402:	4b16      	ldr	r3, [pc, #88]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	4911      	ldr	r1, [pc, #68]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007418:	4313      	orrs	r3, r2
 800741a:	608b      	str	r3, [r1, #8]
 800741c:	e005      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a0e      	ldr	r2, [pc, #56]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007424:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007428:	6093      	str	r3, [r2, #8]
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800742c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007436:	4909      	ldr	r1, [pc, #36]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007438:	4313      	orrs	r3, r2
 800743a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800744e:	4b04      	ldr	r3, [pc, #16]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007450:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40023800 	.word	0x40023800
 8007460:	424711e0 	.word	0x424711e0

08007464 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e025      	b.n	80074c4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7f9 fe53 	bl	8001138 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f002 f901 	bl	80096ac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	461a      	mov	r2, r3
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	f002 f96c 	bl	8009792 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d101      	bne.n	80074e8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
 80074e6:	e018      	b.n	800751a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 f9c9 	bl	8009890 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d104      	bne.n	8007510 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2205      	movs	r2, #5
 800750a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800750e:	e003      	b.n	8007518 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d101      	bne.n	800753c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007538:	2302      	movs	r3, #2
 800753a:	e00e      	b.n	800755a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	4618      	mov	r0, r3
 800754c:	f002 f9dc 	bl	8009908 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e056      	b.n	8007622 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa fc90 	bl	8001eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	ea42 0103 	orr.w	r1, r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	f003 0104 	and.w	r1, r3, #4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69da      	ldr	r2, [r3, #28]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007610:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e01a      	b.n	8007672 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007652:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fa fc75 	bl	8001f44 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b088      	sub	sp, #32
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_SPI_Transmit+0x22>
 8007698:	2302      	movs	r3, #2
 800769a:	e11e      	b.n	80078da <HAL_SPI_Transmit+0x260>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a4:	f7fc f9d8 	bl	8003a58 <HAL_GetTick>
 80076a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
 80076bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076be:	e103      	b.n	80078c8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_Transmit+0x52>
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076d0:	e0fa      	b.n	80078c8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	88fa      	ldrh	r2, [r7, #6]
 80076ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007718:	d107      	bne.n	800772a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007728:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d007      	beq.n	8007748 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007750:	d14b      	bne.n	80077ea <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <HAL_SPI_Transmit+0xe6>
 800775a:	8afb      	ldrh	r3, [r7, #22]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d13e      	bne.n	80077de <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	881a      	ldrh	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	1c9a      	adds	r2, r3, #2
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007784:	e02b      	b.n	80077de <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b02      	cmp	r3, #2
 8007792:	d112      	bne.n	80077ba <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	881a      	ldrh	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	1c9a      	adds	r2, r3, #2
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80077b8:	e011      	b.n	80077de <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ba:	f7fc f94d 	bl	8003a58 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d803      	bhi.n	80077d2 <HAL_SPI_Transmit+0x158>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d102      	bne.n	80077d8 <HAL_SPI_Transmit+0x15e>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077dc:	e074      	b.n	80078c8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ce      	bne.n	8007786 <HAL_SPI_Transmit+0x10c>
 80077e8:	e04c      	b.n	8007884 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_SPI_Transmit+0x17e>
 80077f2:	8afb      	ldrh	r3, [r7, #22]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d140      	bne.n	800787a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800781e:	e02c      	b.n	800787a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d113      	bne.n	8007856 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	330c      	adds	r3, #12
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	86da      	strh	r2, [r3, #54]	; 0x36
 8007854:	e011      	b.n	800787a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007856:	f7fc f8ff 	bl	8003a58 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d803      	bhi.n	800786e <HAL_SPI_Transmit+0x1f4>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d102      	bne.n	8007874 <HAL_SPI_Transmit+0x1fa>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007878:	e026      	b.n	80078c8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1cd      	bne.n	8007820 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fbb3 	bl	8007ff4 <SPI_EndRxTxTransaction>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e000      	b.n	80078c8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80078c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af02      	add	r7, sp, #8
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078fe:	d112      	bne.n	8007926 <HAL_SPI_Receive+0x44>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10e      	bne.n	8007926 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2204      	movs	r2, #4
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007910:	88fa      	ldrh	r2, [r7, #6]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f8e9 	bl	8007af4 <HAL_SPI_TransmitReceive>
 8007922:	4603      	mov	r3, r0
 8007924:	e0e2      	b.n	8007aec <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_SPI_Receive+0x52>
 8007930:	2302      	movs	r3, #2
 8007932:	e0db      	b.n	8007aec <HAL_SPI_Receive+0x20a>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793c:	f7fc f88c 	bl	8003a58 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d002      	beq.n	8007954 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800794e:	2302      	movs	r3, #2
 8007950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007952:	e0c2      	b.n	8007ada <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_SPI_Receive+0x7e>
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007964:	e0b9      	b.n	8007ada <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2204      	movs	r2, #4
 800796a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ac:	d107      	bne.n	80079be <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d007      	beq.n	80079dc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d162      	bne.n	8007aaa <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079e4:	e02e      	b.n	8007a44 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d115      	bne.n	8007a20 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f103 020c 	add.w	r2, r3, #12
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	7812      	ldrb	r2, [r2, #0]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a1e:	e011      	b.n	8007a44 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a20:	f7fc f81a 	bl	8003a58 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d803      	bhi.n	8007a38 <HAL_SPI_Receive+0x156>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d102      	bne.n	8007a3e <HAL_SPI_Receive+0x15c>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a42:	e04a      	b.n	8007ada <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1cb      	bne.n	80079e6 <HAL_SPI_Receive+0x104>
 8007a4e:	e031      	b.n	8007ab4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d113      	bne.n	8007a86 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	1c9a      	adds	r2, r3, #2
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a84:	e011      	b.n	8007aaa <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a86:	f7fb ffe7 	bl	8003a58 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d803      	bhi.n	8007a9e <HAL_SPI_Receive+0x1bc>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d102      	bne.n	8007aa4 <HAL_SPI_Receive+0x1c2>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007aa8:	e017      	b.n	8007ada <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1cd      	bne.n	8007a50 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fa35 	bl	8007f28 <SPI_EndRxTransaction>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
 8007ad6:	e000      	b.n	8007ada <HAL_SPI_Receive+0x1f8>
  }

error :
 8007ad8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	; 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b02:	2301      	movs	r3, #1
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x26>
 8007b16:	2302      	movs	r3, #2
 8007b18:	e18a      	b.n	8007e30 <HAL_SPI_TransmitReceive+0x33c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b22:	f7fb ff99 	bl	8003a58 <HAL_GetTick>
 8007b26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b38:	887b      	ldrh	r3, [r7, #2]
 8007b3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d00f      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x70>
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b4a:	d107      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x68>
 8007b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d003      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b62:	e15b      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x82>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x82>
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b7c:	e14e      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d003      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2205      	movs	r2, #5
 8007b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	887a      	ldrh	r2, [r7, #2]
 8007ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d007      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bee:	d178      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_SPI_TransmitReceive+0x10a>
 8007bf8:	8b7b      	ldrh	r3, [r7, #26]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d166      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	881a      	ldrh	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	1c9a      	adds	r2, r3, #2
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c22:	e053      	b.n	8007ccc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d11b      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x176>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d016      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x176>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d113      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	881a      	ldrh	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	1c9a      	adds	r2, r3, #2
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d119      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1b8>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d014      	beq.n	8007cac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cac:	f7fb fed4 	bl	8003a58 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d807      	bhi.n	8007ccc <HAL_SPI_TransmitReceive+0x1d8>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d003      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cca:	e0a7      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1a6      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x130>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1a1      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x130>
 8007ce0:	e07c      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_SPI_TransmitReceive+0x1fc>
 8007cea:	8b7b      	ldrh	r3, [r7, #26]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d16b      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d16:	e057      	b.n	8007dc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d11c      	bne.n	8007d60 <HAL_SPI_TransmitReceive+0x26c>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d017      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x26c>
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d114      	bne.n	8007d60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d119      	bne.n	8007da2 <HAL_SPI_TransmitReceive+0x2ae>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d014      	beq.n	8007da2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007da2:	f7fb fe59 	bl	8003a58 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d803      	bhi.n	8007dba <HAL_SPI_TransmitReceive+0x2c6>
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d102      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x2cc>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dc6:	e029      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1a2      	bne.n	8007d18 <HAL_SPI_TransmitReceive+0x224>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d19d      	bne.n	8007d18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f907 	bl	8007ff4 <SPI_EndRxTxTransaction>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2220      	movs	r2, #32
 8007df6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007df8:	e010      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	e000      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3730      	adds	r7, #48	; 0x30
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e46:	b2db      	uxtb	r3, r3
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e64:	e04c      	b.n	8007f00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d048      	beq.n	8007f00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007e6e:	f7fb fdf3 	bl	8003a58 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d902      	bls.n	8007e84 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d13d      	bne.n	8007f00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e9c:	d111      	bne.n	8007ec2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea6:	d004      	beq.n	8007eb2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb0:	d107      	bne.n	8007ec2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eca:	d10f      	bne.n	8007eec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e00f      	b.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d1a3      	bne.n	8007e66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f3c:	d111      	bne.n	8007f62 <SPI_EndRxTransaction+0x3a>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f46:	d004      	beq.n	8007f52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f50:	d107      	bne.n	8007f62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6a:	d12a      	bne.n	8007fc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f74:	d012      	beq.n	8007f9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2180      	movs	r1, #128	; 0x80
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff ff67 	bl	8007e54 <SPI_WaitFlagStateUntilTimeout>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02d      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	f043 0220 	orr.w	r2, r3, #32
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e026      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff ff54 	bl	8007e54 <SPI_WaitFlagStateUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01a      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f043 0220 	orr.w	r2, r3, #32
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e013      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2101      	movs	r1, #1
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ff41 	bl	8007e54 <SPI_WaitFlagStateUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e000      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <SPI_EndRxTxTransaction+0x7c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <SPI_EndRxTxTransaction+0x80>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	0d5b      	lsrs	r3, r3, #21
 800800c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008010:	fb02 f303 	mul.w	r3, r2, r3
 8008014:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800801e:	d112      	bne.n	8008046 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	2180      	movs	r1, #128	; 0x80
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7ff ff12 	bl	8007e54 <SPI_WaitFlagStateUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d016      	beq.n	8008064 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	f043 0220 	orr.w	r2, r3, #32
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e00f      	b.n	8008066 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	3b01      	subs	r3, #1
 8008050:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805c:	2b80      	cmp	r3, #128	; 0x80
 800805e:	d0f2      	beq.n	8008046 <SPI_EndRxTxTransaction+0x52>
 8008060:	e000      	b.n	8008064 <SPI_EndRxTxTransaction+0x70>
        break;
 8008062:	bf00      	nop
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000000 	.word	0x20000000
 8008074:	165e9f81 	.word	0x165e9f81

08008078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e01d      	b.n	80080c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fa fa00 	bl	80024a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 fa22 	bl	8008500 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0201 	orr.w	r2, r2, #1
 80080e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b06      	cmp	r3, #6
 80080f6:	d007      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0201 	orr.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b02      	cmp	r3, #2
 800812a:	d122      	bne.n	8008172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b02      	cmp	r3, #2
 8008138:	d11b      	bne.n	8008172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f06f 0202 	mvn.w	r2, #2
 8008142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f9b2 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 800815e:	e005      	b.n	800816c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f9a4 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9b5 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b04      	cmp	r3, #4
 800817e:	d122      	bne.n	80081c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b04      	cmp	r3, #4
 800818c:	d11b      	bne.n	80081c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f06f 0204 	mvn.w	r2, #4
 8008196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f988 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 80081b2:	e005      	b.n	80081c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f97a 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f98b 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f003 0308 	and.w	r3, r3, #8
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d122      	bne.n	800821a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d11b      	bne.n	800821a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f06f 0208 	mvn.w	r2, #8
 80081ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2204      	movs	r2, #4
 80081f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f95e 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 8008206:	e005      	b.n	8008214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f950 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f961 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b10      	cmp	r3, #16
 8008226:	d122      	bne.n	800826e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0310 	and.w	r3, r3, #16
 8008232:	2b10      	cmp	r3, #16
 8008234:	d11b      	bne.n	800826e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f06f 0210 	mvn.w	r2, #16
 800823e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2208      	movs	r2, #8
 8008244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f934 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 800825a:	e005      	b.n	8008268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f926 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f937 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b01      	cmp	r3, #1
 800827a:	d10e      	bne.n	800829a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b01      	cmp	r3, #1
 8008288:	d107      	bne.n	800829a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f06f 0201 	mvn.w	r2, #1
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7f9 fdbd 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d10e      	bne.n	80082c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d107      	bne.n	80082c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fadd 	bl	8008880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b40      	cmp	r3, #64	; 0x40
 80082d2:	d10e      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	d107      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f8fc 	bl	80084ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d10e      	bne.n	800831e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b20      	cmp	r3, #32
 800830c:	d107      	bne.n	800831e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f06f 0220 	mvn.w	r2, #32
 8008316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 faa7 	bl	800886c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_TIM_ConfigClockSource+0x18>
 800833a:	2302      	movs	r3, #2
 800833c:	e0b3      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x180>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2202      	movs	r2, #2
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800835c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008364:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008376:	d03e      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xd0>
 8008378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837c:	f200 8087 	bhi.w	800848e <HAL_TIM_ConfigClockSource+0x168>
 8008380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008384:	f000 8085 	beq.w	8008492 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838c:	d87f      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 800838e:	2b70      	cmp	r3, #112	; 0x70
 8008390:	d01a      	beq.n	80083c8 <HAL_TIM_ConfigClockSource+0xa2>
 8008392:	2b70      	cmp	r3, #112	; 0x70
 8008394:	d87b      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 8008396:	2b60      	cmp	r3, #96	; 0x60
 8008398:	d050      	beq.n	800843c <HAL_TIM_ConfigClockSource+0x116>
 800839a:	2b60      	cmp	r3, #96	; 0x60
 800839c:	d877      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 800839e:	2b50      	cmp	r3, #80	; 0x50
 80083a0:	d03c      	beq.n	800841c <HAL_TIM_ConfigClockSource+0xf6>
 80083a2:	2b50      	cmp	r3, #80	; 0x50
 80083a4:	d873      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d058      	beq.n	800845c <HAL_TIM_ConfigClockSource+0x136>
 80083aa:	2b40      	cmp	r3, #64	; 0x40
 80083ac:	d86f      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 80083ae:	2b30      	cmp	r3, #48	; 0x30
 80083b0:	d064      	beq.n	800847c <HAL_TIM_ConfigClockSource+0x156>
 80083b2:	2b30      	cmp	r3, #48	; 0x30
 80083b4:	d86b      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d060      	beq.n	800847c <HAL_TIM_ConfigClockSource+0x156>
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d867      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x168>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d05c      	beq.n	800847c <HAL_TIM_ConfigClockSource+0x156>
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d05a      	beq.n	800847c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80083c6:	e062      	b.n	800848e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	6899      	ldr	r1, [r3, #8]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f000 f9ac 	bl	8008734 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	609a      	str	r2, [r3, #8]
      break;
 80083f4:	e04e      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f000 f995 	bl	8008734 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008418:	609a      	str	r2, [r3, #8]
      break;
 800841a:	e03b      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6859      	ldr	r1, [r3, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	461a      	mov	r2, r3
 800842a:	f000 f909 	bl	8008640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2150      	movs	r1, #80	; 0x50
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f962 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 800843a:	e02b      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	6859      	ldr	r1, [r3, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	461a      	mov	r2, r3
 800844a:	f000 f928 	bl	800869e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2160      	movs	r1, #96	; 0x60
 8008454:	4618      	mov	r0, r3
 8008456:	f000 f952 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 800845a:	e01b      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6859      	ldr	r1, [r3, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	461a      	mov	r2, r3
 800846a:	f000 f8e9 	bl	8008640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2140      	movs	r1, #64	; 0x40
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f942 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 800847a:	e00b      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4619      	mov	r1, r3
 8008486:	4610      	mov	r0, r2
 8008488:	f000 f939 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 800848c:	e002      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800848e:	bf00      	nop
 8008490:	e000      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084de:	bf00      	nop
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
	...

08008500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a40      	ldr	r2, [pc, #256]	; (8008614 <TIM_Base_SetConfig+0x114>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d013      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851e:	d00f      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a3d      	ldr	r2, [pc, #244]	; (8008618 <TIM_Base_SetConfig+0x118>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00b      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a3c      	ldr	r2, [pc, #240]	; (800861c <TIM_Base_SetConfig+0x11c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d007      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a3b      	ldr	r2, [pc, #236]	; (8008620 <TIM_Base_SetConfig+0x120>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a3a      	ldr	r2, [pc, #232]	; (8008624 <TIM_Base_SetConfig+0x124>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d108      	bne.n	8008552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2f      	ldr	r2, [pc, #188]	; (8008614 <TIM_Base_SetConfig+0x114>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d02b      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d027      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a2c      	ldr	r2, [pc, #176]	; (8008618 <TIM_Base_SetConfig+0x118>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d023      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2b      	ldr	r2, [pc, #172]	; (800861c <TIM_Base_SetConfig+0x11c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d01f      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <TIM_Base_SetConfig+0x120>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d01b      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a29      	ldr	r2, [pc, #164]	; (8008624 <TIM_Base_SetConfig+0x124>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d017      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a28      	ldr	r2, [pc, #160]	; (8008628 <TIM_Base_SetConfig+0x128>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a27      	ldr	r2, [pc, #156]	; (800862c <TIM_Base_SetConfig+0x12c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00f      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a26      	ldr	r2, [pc, #152]	; (8008630 <TIM_Base_SetConfig+0x130>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00b      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a25      	ldr	r2, [pc, #148]	; (8008634 <TIM_Base_SetConfig+0x134>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d007      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a24      	ldr	r2, [pc, #144]	; (8008638 <TIM_Base_SetConfig+0x138>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d003      	beq.n	80085b2 <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a23      	ldr	r2, [pc, #140]	; (800863c <TIM_Base_SetConfig+0x13c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d108      	bne.n	80085c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a0a      	ldr	r2, [pc, #40]	; (8008614 <TIM_Base_SetConfig+0x114>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_Base_SetConfig+0xf8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a0c      	ldr	r2, [pc, #48]	; (8008624 <TIM_Base_SetConfig+0x124>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d103      	bne.n	8008600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	615a      	str	r2, [r3, #20]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800
 8008634:	40001800 	.word	0x40001800
 8008638:	40001c00 	.word	0x40001c00
 800863c:	40002000 	.word	0x40002000

08008640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	f023 0201 	bic.w	r2, r3, #1
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800866a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 030a 	bic.w	r3, r3, #10
 800867c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	4313      	orrs	r3, r2
 8008684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800869e:	b480      	push	{r7}
 80086a0:	b087      	sub	sp, #28
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	f023 0210 	bic.w	r2, r3, #16
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	031b      	lsls	r3, r3, #12
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	f043 0307 	orr.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800874e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	021a      	lsls	r2, r3, #8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	431a      	orrs	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008788:	2302      	movs	r3, #2
 800878a:	e05a      	b.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a21      	ldr	r2, [pc, #132]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d022      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d01d      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d018      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1b      	ldr	r2, [pc, #108]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d013      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1a      	ldr	r2, [pc, #104]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00e      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a18      	ldr	r2, [pc, #96]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d009      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a17      	ldr	r2, [pc, #92]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a15      	ldr	r2, [pc, #84]	; (8008868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10c      	bne.n	8008830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800881c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4313      	orrs	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40010000 	.word	0x40010000
 8008854:	40000400 	.word	0x40000400
 8008858:	40000800 	.word	0x40000800
 800885c:	40000c00 	.word	0x40000c00
 8008860:	40010400 	.word	0x40010400
 8008864:	40014000 	.word	0x40014000
 8008868:	40001800 	.word	0x40001800

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e03f      	b.n	8008926 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7f9 fe78 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2224      	movs	r2, #36	; 0x24
 80088c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fb4b 	bl	8008f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800890c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af02      	add	r7, sp, #8
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	603b      	str	r3, [r7, #0]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b20      	cmp	r3, #32
 800894c:	f040 8083 	bne.w	8008a56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_UART_Transmit+0x2e>
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e07b      	b.n	8008a58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_UART_Transmit+0x40>
 800896a:	2302      	movs	r3, #2
 800896c:	e074      	b.n	8008a58 <HAL_UART_Transmit+0x12a>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2221      	movs	r2, #33	; 0x21
 8008980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008984:	f7fb f868 	bl	8003a58 <HAL_GetTick>
 8008988:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	88fa      	ldrh	r2, [r7, #6]
 8008994:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800899e:	e042      	b.n	8008a26 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b6:	d122      	bne.n	80089fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2200      	movs	r2, #0
 80089c0:	2180      	movs	r1, #128	; 0x80
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f96a 	bl	8008c9c <UART_WaitOnFlagUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e042      	b.n	8008a58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d103      	bne.n	80089f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	3302      	adds	r3, #2
 80089f2:	60bb      	str	r3, [r7, #8]
 80089f4:	e017      	b.n	8008a26 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60bb      	str	r3, [r7, #8]
 80089fc:	e013      	b.n	8008a26 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2180      	movs	r1, #128	; 0x80
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f947 	bl	8008c9c <UART_WaitOnFlagUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e01f      	b.n	8008a58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	60ba      	str	r2, [r7, #8]
 8008a1e:	781a      	ldrb	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1b7      	bne.n	80089a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2200      	movs	r2, #0
 8008a38:	2140      	movs	r1, #64	; 0x40
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 f92e 	bl	8008c9c <UART_WaitOnFlagUntilTimeout>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e006      	b.n	8008a58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e000      	b.n	8008a58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008a56:	2302      	movs	r3, #2
  }
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10d      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x52>
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9e0 	bl	8008e70 <UART_Receive_IT>
      return;
 8008ab0:	e0d0      	b.n	8008c54 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80b0 	beq.w	8008c1a <HAL_UART_IRQHandler+0x1ba>
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d105      	bne.n	8008ad0 <HAL_UART_IRQHandler+0x70>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 80a5 	beq.w	8008c1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <HAL_UART_IRQHandler+0x90>
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae8:	f043 0201 	orr.w	r2, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f003 0304 	and.w	r3, r3, #4
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <HAL_UART_IRQHandler+0xb0>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b08:	f043 0202 	orr.w	r2, r3, #2
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <HAL_UART_IRQHandler+0xd0>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b28:	f043 0204 	orr.w	r2, r3, #4
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f003 0308 	and.w	r3, r3, #8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00f      	beq.n	8008b5a <HAL_UART_IRQHandler+0xfa>
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <HAL_UART_IRQHandler+0xee>
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b52:	f043 0208 	orr.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d077      	beq.n	8008c52 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <HAL_UART_IRQHandler+0x11c>
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f97a 	bl	8008e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b86:	2b40      	cmp	r3, #64	; 0x40
 8008b88:	bf0c      	ite	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	2300      	movne	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <HAL_UART_IRQHandler+0x144>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d031      	beq.n	8008c08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f8c3 	bl	8008d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d123      	bne.n	8008c00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695a      	ldr	r2, [r3, #20]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d013      	beq.n	8008bf8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	4a21      	ldr	r2, [pc, #132]	; (8008c5c <HAL_UART_IRQHandler+0x1fc>)
 8008bd6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fb f959 	bl	8003e94 <HAL_DMA_Abort_IT>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d016      	beq.n	8008c16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf6:	e00e      	b.n	8008c16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f845 	bl	8008c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bfe:	e00a      	b.n	8008c16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f841 	bl	8008c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c06:	e006      	b.n	8008c16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f83d 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008c14:	e01d      	b.n	8008c52 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c16:	bf00      	nop
    return;
 8008c18:	e01b      	b.n	8008c52 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1d6>
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f8b0 	bl	8008d94 <UART_Transmit_IT>
    return;
 8008c34:	e00e      	b.n	8008c54 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <HAL_UART_IRQHandler+0x1f4>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d004      	beq.n	8008c54 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f8f8 	bl	8008e40 <UART_EndTransmit_IT>
    return;
 8008c50:	e000      	b.n	8008c54 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008c52:	bf00      	nop
  }
}
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	08008d6d 	.word	0x08008d6d

08008c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cac:	e02c      	b.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d028      	beq.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8008cbc:	f7fa fecc 	bl	8003a58 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d21d      	bcs.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0201 	bic.w	r2, r2, #1
 8008cea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e00f      	b.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	4013      	ands	r3, r2
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d0c3      	beq.n	8008cae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff ff7e 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b21      	cmp	r3, #33	; 0x21
 8008da6:	d144      	bne.n	8008e32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008db0:	d11a      	bne.n	8008de8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dc6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	1c9a      	adds	r2, r3, #2
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]
 8008dda:	e00e      	b.n	8008dfa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	621a      	str	r2, [r3, #32]
 8008de6:	e008      	b.n	8008dfa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	1c59      	adds	r1, r3, #1
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6211      	str	r1, [r2, #32]
 8008df2:	781a      	ldrb	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	4619      	mov	r1, r3
 8008e08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10f      	bne.n	8008e2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e000      	b.n	8008e34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008e32:	2302      	movs	r3, #2
  }
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff fefd 	bl	8008c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b22      	cmp	r3, #34	; 0x22
 8008e82:	d171      	bne.n	8008f68 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8c:	d123      	bne.n	8008ed6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10e      	bne.n	8008eba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	1c9a      	adds	r2, r3, #2
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8008eb8:	e029      	b.n	8008f0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ed4:	e01b      	b.n	8008f0e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6858      	ldr	r0, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee8:	1c59      	adds	r1, r3, #1
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6291      	str	r1, [r2, #40]	; 0x28
 8008eee:	b2c2      	uxtb	r2, r0
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e00c      	b.n	8008f0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	1c58      	adds	r0, r3, #1
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	6288      	str	r0, [r1, #40]	; 0x28
 8008f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	3b01      	subs	r3, #1
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d120      	bne.n	8008f64 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0220 	bic.w	r2, r2, #32
 8008f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695a      	ldr	r2, [r3, #20]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fe8a 	bl	8008c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	e002      	b.n	8008f6a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e000      	b.n	8008f6a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008f68:	2302      	movs	r3, #2
  }
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	b0bd      	sub	sp, #244	; 0xf4
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f90:	68d9      	ldr	r1, [r3, #12]
 8008f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	ea40 0301 	orr.w	r3, r0, r1
 8008f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fcc:	f021 010c 	bic.w	r1, r1, #12
 8008fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fee:	6999      	ldr	r1, [r3, #24]
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	ea40 0301 	orr.w	r3, r0, r1
 8008ffa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009006:	f040 81a5 	bne.w	8009354 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4bcd      	ldr	r3, [pc, #820]	; (8009348 <UART_SetConfig+0x3d4>)
 8009012:	429a      	cmp	r2, r3
 8009014:	d006      	beq.n	8009024 <UART_SetConfig+0xb0>
 8009016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	4bcb      	ldr	r3, [pc, #812]	; (800934c <UART_SetConfig+0x3d8>)
 800901e:	429a      	cmp	r2, r3
 8009020:	f040 80cb 	bne.w	80091ba <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009024:	f7fe f81a 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8009028:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800902c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009030:	461c      	mov	r4, r3
 8009032:	f04f 0500 	mov.w	r5, #0
 8009036:	4622      	mov	r2, r4
 8009038:	462b      	mov	r3, r5
 800903a:	1891      	adds	r1, r2, r2
 800903c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009040:	415b      	adcs	r3, r3
 8009042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009046:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800904a:	1912      	adds	r2, r2, r4
 800904c:	eb45 0303 	adc.w	r3, r5, r3
 8009050:	f04f 0000 	mov.w	r0, #0
 8009054:	f04f 0100 	mov.w	r1, #0
 8009058:	00d9      	lsls	r1, r3, #3
 800905a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800905e:	00d0      	lsls	r0, r2, #3
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	1911      	adds	r1, r2, r4
 8009066:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800906a:	416b      	adcs	r3, r5
 800906c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	461a      	mov	r2, r3
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	1891      	adds	r1, r2, r2
 800907e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009082:	415b      	adcs	r3, r3
 8009084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009088:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800908c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009090:	f7f7 fd9a 	bl	8000bc8 <__aeabi_uldivmod>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4bad      	ldr	r3, [pc, #692]	; (8009350 <UART_SetConfig+0x3dc>)
 800909a:	fba3 2302 	umull	r2, r3, r3, r2
 800909e:	095b      	lsrs	r3, r3, #5
 80090a0:	011e      	lsls	r6, r3, #4
 80090a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090a6:	461c      	mov	r4, r3
 80090a8:	f04f 0500 	mov.w	r5, #0
 80090ac:	4622      	mov	r2, r4
 80090ae:	462b      	mov	r3, r5
 80090b0:	1891      	adds	r1, r2, r2
 80090b2:	67b9      	str	r1, [r7, #120]	; 0x78
 80090b4:	415b      	adcs	r3, r3
 80090b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80090bc:	1912      	adds	r2, r2, r4
 80090be:	eb45 0303 	adc.w	r3, r5, r3
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f04f 0100 	mov.w	r1, #0
 80090ca:	00d9      	lsls	r1, r3, #3
 80090cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090d0:	00d0      	lsls	r0, r2, #3
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	1911      	adds	r1, r2, r4
 80090d8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80090dc:	416b      	adcs	r3, r5
 80090de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	461a      	mov	r2, r3
 80090ea:	f04f 0300 	mov.w	r3, #0
 80090ee:	1891      	adds	r1, r2, r2
 80090f0:	6739      	str	r1, [r7, #112]	; 0x70
 80090f2:	415b      	adcs	r3, r3
 80090f4:	677b      	str	r3, [r7, #116]	; 0x74
 80090f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80090fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80090fe:	f7f7 fd63 	bl	8000bc8 <__aeabi_uldivmod>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4b92      	ldr	r3, [pc, #584]	; (8009350 <UART_SetConfig+0x3dc>)
 8009108:	fba3 1302 	umull	r1, r3, r3, r2
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	2164      	movs	r1, #100	; 0x64
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	3332      	adds	r3, #50	; 0x32
 800911a:	4a8d      	ldr	r2, [pc, #564]	; (8009350 <UART_SetConfig+0x3dc>)
 800911c:	fba2 2303 	umull	r2, r3, r2, r3
 8009120:	095b      	lsrs	r3, r3, #5
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009128:	441e      	add	r6, r3
 800912a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800912e:	4618      	mov	r0, r3
 8009130:	f04f 0100 	mov.w	r1, #0
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	1894      	adds	r4, r2, r2
 800913a:	66bc      	str	r4, [r7, #104]	; 0x68
 800913c:	415b      	adcs	r3, r3
 800913e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009140:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009144:	1812      	adds	r2, r2, r0
 8009146:	eb41 0303 	adc.w	r3, r1, r3
 800914a:	f04f 0400 	mov.w	r4, #0
 800914e:	f04f 0500 	mov.w	r5, #0
 8009152:	00dd      	lsls	r5, r3, #3
 8009154:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009158:	00d4      	lsls	r4, r2, #3
 800915a:	4622      	mov	r2, r4
 800915c:	462b      	mov	r3, r5
 800915e:	1814      	adds	r4, r2, r0
 8009160:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009164:	414b      	adcs	r3, r1
 8009166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	1891      	adds	r1, r2, r2
 8009178:	6639      	str	r1, [r7, #96]	; 0x60
 800917a:	415b      	adcs	r3, r3
 800917c:	667b      	str	r3, [r7, #100]	; 0x64
 800917e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009186:	f7f7 fd1f 	bl	8000bc8 <__aeabi_uldivmod>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4b70      	ldr	r3, [pc, #448]	; (8009350 <UART_SetConfig+0x3dc>)
 8009190:	fba3 1302 	umull	r1, r3, r3, r2
 8009194:	095b      	lsrs	r3, r3, #5
 8009196:	2164      	movs	r1, #100	; 0x64
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	3332      	adds	r3, #50	; 0x32
 80091a2:	4a6b      	ldr	r2, [pc, #428]	; (8009350 <UART_SetConfig+0x3dc>)
 80091a4:	fba2 2303 	umull	r2, r3, r2, r3
 80091a8:	095b      	lsrs	r3, r3, #5
 80091aa:	f003 0207 	and.w	r2, r3, #7
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4432      	add	r2, r6
 80091b6:	609a      	str	r2, [r3, #8]
 80091b8:	e26d      	b.n	8009696 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091ba:	f7fd ff3b 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 80091be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091c6:	461c      	mov	r4, r3
 80091c8:	f04f 0500 	mov.w	r5, #0
 80091cc:	4622      	mov	r2, r4
 80091ce:	462b      	mov	r3, r5
 80091d0:	1891      	adds	r1, r2, r2
 80091d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80091d4:	415b      	adcs	r3, r3
 80091d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091dc:	1912      	adds	r2, r2, r4
 80091de:	eb45 0303 	adc.w	r3, r5, r3
 80091e2:	f04f 0000 	mov.w	r0, #0
 80091e6:	f04f 0100 	mov.w	r1, #0
 80091ea:	00d9      	lsls	r1, r3, #3
 80091ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091f0:	00d0      	lsls	r0, r2, #3
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	1911      	adds	r1, r2, r4
 80091f8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80091fc:	416b      	adcs	r3, r5
 80091fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	461a      	mov	r2, r3
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	1891      	adds	r1, r2, r2
 8009210:	6539      	str	r1, [r7, #80]	; 0x50
 8009212:	415b      	adcs	r3, r3
 8009214:	657b      	str	r3, [r7, #84]	; 0x54
 8009216:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800921a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800921e:	f7f7 fcd3 	bl	8000bc8 <__aeabi_uldivmod>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4b4a      	ldr	r3, [pc, #296]	; (8009350 <UART_SetConfig+0x3dc>)
 8009228:	fba3 2302 	umull	r2, r3, r3, r2
 800922c:	095b      	lsrs	r3, r3, #5
 800922e:	011e      	lsls	r6, r3, #4
 8009230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009234:	461c      	mov	r4, r3
 8009236:	f04f 0500 	mov.w	r5, #0
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	1891      	adds	r1, r2, r2
 8009240:	64b9      	str	r1, [r7, #72]	; 0x48
 8009242:	415b      	adcs	r3, r3
 8009244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009246:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800924a:	1912      	adds	r2, r2, r4
 800924c:	eb45 0303 	adc.w	r3, r5, r3
 8009250:	f04f 0000 	mov.w	r0, #0
 8009254:	f04f 0100 	mov.w	r1, #0
 8009258:	00d9      	lsls	r1, r3, #3
 800925a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800925e:	00d0      	lsls	r0, r2, #3
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	1911      	adds	r1, r2, r4
 8009266:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800926a:	416b      	adcs	r3, r5
 800926c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	461a      	mov	r2, r3
 8009278:	f04f 0300 	mov.w	r3, #0
 800927c:	1891      	adds	r1, r2, r2
 800927e:	6439      	str	r1, [r7, #64]	; 0x40
 8009280:	415b      	adcs	r3, r3
 8009282:	647b      	str	r3, [r7, #68]	; 0x44
 8009284:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009288:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800928c:	f7f7 fc9c 	bl	8000bc8 <__aeabi_uldivmod>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4b2e      	ldr	r3, [pc, #184]	; (8009350 <UART_SetConfig+0x3dc>)
 8009296:	fba3 1302 	umull	r1, r3, r3, r2
 800929a:	095b      	lsrs	r3, r3, #5
 800929c:	2164      	movs	r1, #100	; 0x64
 800929e:	fb01 f303 	mul.w	r3, r1, r3
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	3332      	adds	r3, #50	; 0x32
 80092a8:	4a29      	ldr	r2, [pc, #164]	; (8009350 <UART_SetConfig+0x3dc>)
 80092aa:	fba2 2303 	umull	r2, r3, r2, r3
 80092ae:	095b      	lsrs	r3, r3, #5
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092b6:	441e      	add	r6, r3
 80092b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092bc:	4618      	mov	r0, r3
 80092be:	f04f 0100 	mov.w	r1, #0
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	1894      	adds	r4, r2, r2
 80092c8:	63bc      	str	r4, [r7, #56]	; 0x38
 80092ca:	415b      	adcs	r3, r3
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092d2:	1812      	adds	r2, r2, r0
 80092d4:	eb41 0303 	adc.w	r3, r1, r3
 80092d8:	f04f 0400 	mov.w	r4, #0
 80092dc:	f04f 0500 	mov.w	r5, #0
 80092e0:	00dd      	lsls	r5, r3, #3
 80092e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092e6:	00d4      	lsls	r4, r2, #3
 80092e8:	4622      	mov	r2, r4
 80092ea:	462b      	mov	r3, r5
 80092ec:	1814      	adds	r4, r2, r0
 80092ee:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80092f2:	414b      	adcs	r3, r1
 80092f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	461a      	mov	r2, r3
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	1891      	adds	r1, r2, r2
 8009306:	6339      	str	r1, [r7, #48]	; 0x30
 8009308:	415b      	adcs	r3, r3
 800930a:	637b      	str	r3, [r7, #52]	; 0x34
 800930c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009310:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009314:	f7f7 fc58 	bl	8000bc8 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <UART_SetConfig+0x3dc>)
 800931e:	fba3 1302 	umull	r1, r3, r3, r2
 8009322:	095b      	lsrs	r3, r3, #5
 8009324:	2164      	movs	r1, #100	; 0x64
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	3332      	adds	r3, #50	; 0x32
 8009330:	4a07      	ldr	r2, [pc, #28]	; (8009350 <UART_SetConfig+0x3dc>)
 8009332:	fba2 2303 	umull	r2, r3, r2, r3
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	f003 0207 	and.w	r2, r3, #7
 800933c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4432      	add	r2, r6
 8009344:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009346:	e1a6      	b.n	8009696 <UART_SetConfig+0x722>
 8009348:	40011000 	.word	0x40011000
 800934c:	40011400 	.word	0x40011400
 8009350:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	4bd1      	ldr	r3, [pc, #836]	; (80096a0 <UART_SetConfig+0x72c>)
 800935c:	429a      	cmp	r2, r3
 800935e:	d006      	beq.n	800936e <UART_SetConfig+0x3fa>
 8009360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	4bcf      	ldr	r3, [pc, #828]	; (80096a4 <UART_SetConfig+0x730>)
 8009368:	429a      	cmp	r2, r3
 800936a:	f040 80ca 	bne.w	8009502 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800936e:	f7fd fe75 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8009372:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800937a:	461c      	mov	r4, r3
 800937c:	f04f 0500 	mov.w	r5, #0
 8009380:	4622      	mov	r2, r4
 8009382:	462b      	mov	r3, r5
 8009384:	1891      	adds	r1, r2, r2
 8009386:	62b9      	str	r1, [r7, #40]	; 0x28
 8009388:	415b      	adcs	r3, r3
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800938c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009390:	1912      	adds	r2, r2, r4
 8009392:	eb45 0303 	adc.w	r3, r5, r3
 8009396:	f04f 0000 	mov.w	r0, #0
 800939a:	f04f 0100 	mov.w	r1, #0
 800939e:	00d9      	lsls	r1, r3, #3
 80093a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093a4:	00d0      	lsls	r0, r2, #3
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	eb12 0a04 	adds.w	sl, r2, r4
 80093ae:	eb43 0b05 	adc.w	fp, r3, r5
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	008b      	lsls	r3, r1, #2
 80093c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093cc:	0082      	lsls	r2, r0, #2
 80093ce:	4650      	mov	r0, sl
 80093d0:	4659      	mov	r1, fp
 80093d2:	f7f7 fbf9 	bl	8000bc8 <__aeabi_uldivmod>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4bb3      	ldr	r3, [pc, #716]	; (80096a8 <UART_SetConfig+0x734>)
 80093dc:	fba3 2302 	umull	r2, r3, r3, r2
 80093e0:	095b      	lsrs	r3, r3, #5
 80093e2:	011e      	lsls	r6, r3, #4
 80093e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093e8:	4618      	mov	r0, r3
 80093ea:	f04f 0100 	mov.w	r1, #0
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	1894      	adds	r4, r2, r2
 80093f4:	623c      	str	r4, [r7, #32]
 80093f6:	415b      	adcs	r3, r3
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
 80093fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093fe:	1812      	adds	r2, r2, r0
 8009400:	eb41 0303 	adc.w	r3, r1, r3
 8009404:	f04f 0400 	mov.w	r4, #0
 8009408:	f04f 0500 	mov.w	r5, #0
 800940c:	00dd      	lsls	r5, r3, #3
 800940e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009412:	00d4      	lsls	r4, r2, #3
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	1814      	adds	r4, r2, r0
 800941a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800941e:	414b      	adcs	r3, r1
 8009420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	f04f 0100 	mov.w	r1, #0
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	008b      	lsls	r3, r1, #2
 800943a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800943e:	0082      	lsls	r2, r0, #2
 8009440:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009444:	f7f7 fbc0 	bl	8000bc8 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4b96      	ldr	r3, [pc, #600]	; (80096a8 <UART_SetConfig+0x734>)
 800944e:	fba3 1302 	umull	r1, r3, r3, r2
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	2164      	movs	r1, #100	; 0x64
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	3332      	adds	r3, #50	; 0x32
 8009460:	4a91      	ldr	r2, [pc, #580]	; (80096a8 <UART_SetConfig+0x734>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800946c:	441e      	add	r6, r3
 800946e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009472:	4618      	mov	r0, r3
 8009474:	f04f 0100 	mov.w	r1, #0
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	1894      	adds	r4, r2, r2
 800947e:	61bc      	str	r4, [r7, #24]
 8009480:	415b      	adcs	r3, r3
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009488:	1812      	adds	r2, r2, r0
 800948a:	eb41 0303 	adc.w	r3, r1, r3
 800948e:	f04f 0400 	mov.w	r4, #0
 8009492:	f04f 0500 	mov.w	r5, #0
 8009496:	00dd      	lsls	r5, r3, #3
 8009498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800949c:	00d4      	lsls	r4, r2, #3
 800949e:	4622      	mov	r2, r4
 80094a0:	462b      	mov	r3, r5
 80094a2:	1814      	adds	r4, r2, r0
 80094a4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80094a8:	414b      	adcs	r3, r1
 80094aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f04f 0100 	mov.w	r1, #0
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	f04f 0300 	mov.w	r3, #0
 80094c2:	008b      	lsls	r3, r1, #2
 80094c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094c8:	0082      	lsls	r2, r0, #2
 80094ca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80094ce:	f7f7 fb7b 	bl	8000bc8 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4b74      	ldr	r3, [pc, #464]	; (80096a8 <UART_SetConfig+0x734>)
 80094d8:	fba3 1302 	umull	r1, r3, r3, r2
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	2164      	movs	r1, #100	; 0x64
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	3332      	adds	r3, #50	; 0x32
 80094ea:	4a6f      	ldr	r2, [pc, #444]	; (80096a8 <UART_SetConfig+0x734>)
 80094ec:	fba2 2303 	umull	r2, r3, r2, r3
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4432      	add	r2, r6
 80094fe:	609a      	str	r2, [r3, #8]
 8009500:	e0c9      	b.n	8009696 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009502:	f7fd fd97 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 8009506:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800950a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800950e:	461c      	mov	r4, r3
 8009510:	f04f 0500 	mov.w	r5, #0
 8009514:	4622      	mov	r2, r4
 8009516:	462b      	mov	r3, r5
 8009518:	1891      	adds	r1, r2, r2
 800951a:	6139      	str	r1, [r7, #16]
 800951c:	415b      	adcs	r3, r3
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009524:	1912      	adds	r2, r2, r4
 8009526:	eb45 0303 	adc.w	r3, r5, r3
 800952a:	f04f 0000 	mov.w	r0, #0
 800952e:	f04f 0100 	mov.w	r1, #0
 8009532:	00d9      	lsls	r1, r3, #3
 8009534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009538:	00d0      	lsls	r0, r2, #3
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	eb12 0804 	adds.w	r8, r2, r4
 8009542:	eb43 0905 	adc.w	r9, r3, r5
 8009546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	4618      	mov	r0, r3
 800954e:	f04f 0100 	mov.w	r1, #0
 8009552:	f04f 0200 	mov.w	r2, #0
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	008b      	lsls	r3, r1, #2
 800955c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009560:	0082      	lsls	r2, r0, #2
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f7 fb2f 	bl	8000bc8 <__aeabi_uldivmod>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4b4e      	ldr	r3, [pc, #312]	; (80096a8 <UART_SetConfig+0x734>)
 8009570:	fba3 2302 	umull	r2, r3, r3, r2
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	011e      	lsls	r6, r3, #4
 8009578:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800957c:	4618      	mov	r0, r3
 800957e:	f04f 0100 	mov.w	r1, #0
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	1894      	adds	r4, r2, r2
 8009588:	60bc      	str	r4, [r7, #8]
 800958a:	415b      	adcs	r3, r3
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009592:	1812      	adds	r2, r2, r0
 8009594:	eb41 0303 	adc.w	r3, r1, r3
 8009598:	f04f 0400 	mov.w	r4, #0
 800959c:	f04f 0500 	mov.w	r5, #0
 80095a0:	00dd      	lsls	r5, r3, #3
 80095a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095a6:	00d4      	lsls	r4, r2, #3
 80095a8:	4622      	mov	r2, r4
 80095aa:	462b      	mov	r3, r5
 80095ac:	1814      	adds	r4, r2, r0
 80095ae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80095b2:	414b      	adcs	r3, r1
 80095b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	4618      	mov	r0, r3
 80095c0:	f04f 0100 	mov.w	r1, #0
 80095c4:	f04f 0200 	mov.w	r2, #0
 80095c8:	f04f 0300 	mov.w	r3, #0
 80095cc:	008b      	lsls	r3, r1, #2
 80095ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095d2:	0082      	lsls	r2, r0, #2
 80095d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095d8:	f7f7 faf6 	bl	8000bc8 <__aeabi_uldivmod>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4b31      	ldr	r3, [pc, #196]	; (80096a8 <UART_SetConfig+0x734>)
 80095e2:	fba3 1302 	umull	r1, r3, r3, r2
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	2164      	movs	r1, #100	; 0x64
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	3332      	adds	r3, #50	; 0x32
 80095f4:	4a2c      	ldr	r2, [pc, #176]	; (80096a8 <UART_SetConfig+0x734>)
 80095f6:	fba2 2303 	umull	r2, r3, r2, r3
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009600:	441e      	add	r6, r3
 8009602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009606:	4618      	mov	r0, r3
 8009608:	f04f 0100 	mov.w	r1, #0
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	1894      	adds	r4, r2, r2
 8009612:	603c      	str	r4, [r7, #0]
 8009614:	415b      	adcs	r3, r3
 8009616:	607b      	str	r3, [r7, #4]
 8009618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800961c:	1812      	adds	r2, r2, r0
 800961e:	eb41 0303 	adc.w	r3, r1, r3
 8009622:	f04f 0400 	mov.w	r4, #0
 8009626:	f04f 0500 	mov.w	r5, #0
 800962a:	00dd      	lsls	r5, r3, #3
 800962c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009630:	00d4      	lsls	r4, r2, #3
 8009632:	4622      	mov	r2, r4
 8009634:	462b      	mov	r3, r5
 8009636:	1814      	adds	r4, r2, r0
 8009638:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800963c:	414b      	adcs	r3, r1
 800963e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4618      	mov	r0, r3
 800964a:	f04f 0100 	mov.w	r1, #0
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	008b      	lsls	r3, r1, #2
 8009658:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800965c:	0082      	lsls	r2, r0, #2
 800965e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009662:	f7f7 fab1 	bl	8000bc8 <__aeabi_uldivmod>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <UART_SetConfig+0x734>)
 800966c:	fba3 1302 	umull	r1, r3, r3, r2
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	2164      	movs	r1, #100	; 0x64
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	3332      	adds	r3, #50	; 0x32
 800967e:	4a0a      	ldr	r2, [pc, #40]	; (80096a8 <UART_SetConfig+0x734>)
 8009680:	fba2 2303 	umull	r2, r3, r2, r3
 8009684:	095b      	lsrs	r3, r3, #5
 8009686:	f003 020f 	and.w	r2, r3, #15
 800968a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4432      	add	r2, r6
 8009692:	609a      	str	r2, [r3, #8]
}
 8009694:	e7ff      	b.n	8009696 <UART_SetConfig+0x722>
 8009696:	bf00      	nop
 8009698:	37f4      	adds	r7, #244	; 0xf4
 800969a:	46bd      	mov	sp, r7
 800969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a0:	40011000 	.word	0x40011000
 80096a4:	40011400 	.word	0x40011400
 80096a8:	51eb851f 	.word	0x51eb851f

080096ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d029      	beq.n	800971a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80096d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096d6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096e0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80096e6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80096ec:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80096f2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80096f8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80096fe:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009704:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800970a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e034      	b.n	8009784 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009726:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009730:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009736:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800974a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800974e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009758:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800975e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009764:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800976a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009770:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	4313      	orrs	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009792:	b480      	push	{r7}
 8009794:	b087      	sub	sp, #28
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d02e      	beq.n	800980a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80097b8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097c8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80097d2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	3b01      	subs	r3, #1
 80097da:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80097dc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097e6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80097f0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097fa:	4313      	orrs	r3, r2
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	609a      	str	r2, [r3, #8]
 8009808:	e03b      	b.n	8009882 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800981a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	3b01      	subs	r3, #1
 8009822:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	3b01      	subs	r3, #1
 800982a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800982c:	4313      	orrs	r3, r2
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4313      	orrs	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009840:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	3b01      	subs	r3, #1
 800984e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009850:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	3b01      	subs	r3, #1
 8009858:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800985a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	3b01      	subs	r3, #1
 8009862:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009864:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	3b01      	subs	r3, #1
 800986c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800986e:	4313      	orrs	r3, r2
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80098ac:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80098b6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80098c8:	f7fa f8c6 	bl	8003a58 <HAL_GetTick>
 80098cc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80098ce:	e010      	b.n	80098f2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d6:	d00c      	beq.n	80098f2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <FMC_SDRAM_SendCommand+0x5e>
 80098de:	f7fa f8bb 	bl	8003a58 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d201      	bcs.n	80098f2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e006      	b.n	8009900 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d0e8      	beq.n	80098d0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695a      	ldr	r2, [r3, #20]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	601a      	str	r2, [r3, #0]
}
 800996a:	bf00      	nop
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	6892      	ldr	r2, [r2, #8]
 800998c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6852      	ldr	r2, [r2, #4]
 8009996:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d103      	bne.n	80099aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689a      	ldr	r2, [r3, #8]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	1e5a      	subs	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099d6:	4b4e      	ldr	r3, [pc, #312]	; (8009b10 <xTaskIncrementTick+0x144>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f040 8088 	bne.w	8009af0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099e0:	4b4c      	ldr	r3, [pc, #304]	; (8009b14 <xTaskIncrementTick+0x148>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3301      	adds	r3, #1
 80099e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099e8:	4a4a      	ldr	r2, [pc, #296]	; (8009b14 <xTaskIncrementTick+0x148>)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d120      	bne.n	8009a36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099f4:	4b48      	ldr	r3, [pc, #288]	; (8009b18 <xTaskIncrementTick+0x14c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a10:	bf00      	nop
 8009a12:	e7fe      	b.n	8009a12 <xTaskIncrementTick+0x46>
 8009a14:	4b40      	ldr	r3, [pc, #256]	; (8009b18 <xTaskIncrementTick+0x14c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	4b40      	ldr	r3, [pc, #256]	; (8009b1c <xTaskIncrementTick+0x150>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a3e      	ldr	r2, [pc, #248]	; (8009b18 <xTaskIncrementTick+0x14c>)
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	4a3e      	ldr	r2, [pc, #248]	; (8009b1c <xTaskIncrementTick+0x150>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	4b3d      	ldr	r3, [pc, #244]	; (8009b20 <xTaskIncrementTick+0x154>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	4a3c      	ldr	r2, [pc, #240]	; (8009b20 <xTaskIncrementTick+0x154>)
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	f000 f8f9 	bl	8009c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a36:	4b3b      	ldr	r3, [pc, #236]	; (8009b24 <xTaskIncrementTick+0x158>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d348      	bcc.n	8009ad2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a40:	4b35      	ldr	r3, [pc, #212]	; (8009b18 <xTaskIncrementTick+0x14c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d104      	bne.n	8009a54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4a:	4b36      	ldr	r3, [pc, #216]	; (8009b24 <xTaskIncrementTick+0x158>)
 8009a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a50:	601a      	str	r2, [r3, #0]
					break;
 8009a52:	e03e      	b.n	8009ad2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a54:	4b30      	ldr	r3, [pc, #192]	; (8009b18 <xTaskIncrementTick+0x14c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d203      	bcs.n	8009a74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a6c:	4a2d      	ldr	r2, [pc, #180]	; (8009b24 <xTaskIncrementTick+0x158>)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a72:	e02e      	b.n	8009ad2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff ff7c 	bl	8009976 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	3318      	adds	r3, #24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff ff73 	bl	8009976 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	2201      	movs	r2, #1
 8009a96:	409a      	lsls	r2, r3
 8009a98:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <xTaskIncrementTick+0x15c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	4a22      	ldr	r2, [pc, #136]	; (8009b28 <xTaskIncrementTick+0x15c>)
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4a1f      	ldr	r2, [pc, #124]	; (8009b2c <xTaskIncrementTick+0x160>)
 8009ab0:	441a      	add	r2, r3
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7ff ff38 	bl	800992e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac2:	4b1b      	ldr	r3, [pc, #108]	; (8009b30 <xTaskIncrementTick+0x164>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d3b9      	bcc.n	8009a40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009acc:	2301      	movs	r3, #1
 8009ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ad0:	e7b6      	b.n	8009a40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ad2:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <xTaskIncrementTick+0x164>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad8:	4914      	ldr	r1, [pc, #80]	; (8009b2c <xTaskIncrementTick+0x160>)
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d907      	bls.n	8009afa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009aea:	2301      	movs	r3, #1
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e004      	b.n	8009afa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009af0:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <xTaskIncrementTick+0x168>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	4a0f      	ldr	r2, [pc, #60]	; (8009b34 <xTaskIncrementTick+0x168>)
 8009af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009afa:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <xTaskIncrementTick+0x16c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b06:	697b      	ldr	r3, [r7, #20]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	200004b0 	.word	0x200004b0
 8009b14:	20000498 	.word	0x20000498
 8009b18:	20000490 	.word	0x20000490
 8009b1c:	20000494 	.word	0x20000494
 8009b20:	200004a8 	.word	0x200004a8
 8009b24:	200004ac 	.word	0x200004ac
 8009b28:	2000049c 	.word	0x2000049c
 8009b2c:	20000404 	.word	0x20000404
 8009b30:	20000400 	.word	0x20000400
 8009b34:	200004a0 	.word	0x200004a0
 8009b38:	200004a4 	.word	0x200004a4

08009b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b42:	4b32      	ldr	r3, [pc, #200]	; (8009c0c <vTaskSwitchContext+0xd0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b4a:	4b31      	ldr	r3, [pc, #196]	; (8009c10 <vTaskSwitchContext+0xd4>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b50:	e058      	b.n	8009c04 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8009b52:	4b2f      	ldr	r3, [pc, #188]	; (8009c10 <vTaskSwitchContext+0xd4>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009b58:	f7f7 ff06 	bl	8001968 <RTOS_AppGetRuntimeCounterValueFromISR>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	4a2d      	ldr	r2, [pc, #180]	; (8009c14 <vTaskSwitchContext+0xd8>)
 8009b60:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009b62:	4b2c      	ldr	r3, [pc, #176]	; (8009c14 <vTaskSwitchContext+0xd8>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	4b2c      	ldr	r3, [pc, #176]	; (8009c18 <vTaskSwitchContext+0xdc>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d909      	bls.n	8009b82 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009b6e:	4b2b      	ldr	r3, [pc, #172]	; (8009c1c <vTaskSwitchContext+0xe0>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009b74:	4a27      	ldr	r2, [pc, #156]	; (8009c14 <vTaskSwitchContext+0xd8>)
 8009b76:	6810      	ldr	r0, [r2, #0]
 8009b78:	4a27      	ldr	r2, [pc, #156]	; (8009c18 <vTaskSwitchContext+0xdc>)
 8009b7a:	6812      	ldr	r2, [r2, #0]
 8009b7c:	1a82      	subs	r2, r0, r2
 8009b7e:	440a      	add	r2, r1
 8009b80:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009b82:	4b24      	ldr	r3, [pc, #144]	; (8009c14 <vTaskSwitchContext+0xd8>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a24      	ldr	r2, [pc, #144]	; (8009c18 <vTaskSwitchContext+0xdc>)
 8009b88:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8a:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <vTaskSwitchContext+0xe4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	fab3 f383 	clz	r3, r3
 8009b96:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	f1c3 031f 	rsb	r3, r3, #31
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	4920      	ldr	r1, [pc, #128]	; (8009c24 <vTaskSwitchContext+0xe8>)
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <vTaskSwitchContext+0x8e>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	607b      	str	r3, [r7, #4]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <vTaskSwitchContext+0x8c>
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4a13      	ldr	r2, [pc, #76]	; (8009c24 <vTaskSwitchContext+0xe8>)
 8009bd6:	4413      	add	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	3308      	adds	r3, #8
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d104      	bne.n	8009bfa <vTaskSwitchContext+0xbe>
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4a06      	ldr	r2, [pc, #24]	; (8009c1c <vTaskSwitchContext+0xe0>)
 8009c02:	6013      	str	r3, [r2, #0]
}
 8009c04:	bf00      	nop
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	200004b0 	.word	0x200004b0
 8009c10:	200004a4 	.word	0x200004a4
 8009c14:	200004b8 	.word	0x200004b8
 8009c18:	200004b4 	.word	0x200004b4
 8009c1c:	20000400 	.word	0x20000400
 8009c20:	2000049c 	.word	0x2000049c
 8009c24:	20000404 	.word	0x20000404

08009c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <prvResetNextTaskUnblockTime+0x38>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <prvResetNextTaskUnblockTime+0x3c>)
 8009c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c40:	e008      	b.n	8009c54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c42:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <prvResetNextTaskUnblockTime+0x38>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <prvResetNextTaskUnblockTime+0x3c>)
 8009c52:	6013      	str	r3, [r2, #0]
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	20000490 	.word	0x20000490
 8009c64:	200004ac 	.word	0x200004ac
	...

08009c70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <pxCurrentTCBConst2>)
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	6808      	ldr	r0, [r1, #0]
 8009c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7a:	f380 8809 	msr	PSP, r0
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8811 	msr	BASEPRI, r0
 8009c8a:	4770      	bx	lr
 8009c8c:	f3af 8000 	nop.w

08009c90 <pxCurrentTCBConst2>:
 8009c90:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
	...

08009ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b15      	ldr	r3, [pc, #84]	; (8009d00 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	f01e 0f10 	tst.w	lr, #16
 8009cb0:	bf08      	it	eq
 8009cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cc4:	f380 8811 	msr	BASEPRI, r0
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f7ff ff34 	bl	8009b3c <vTaskSwitchContext>
 8009cd4:	f04f 0000 	mov.w	r0, #0
 8009cd8:	f380 8811 	msr	BASEPRI, r0
 8009cdc:	bc09      	pop	{r0, r3}
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	6808      	ldr	r0, [r1, #0]
 8009ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce6:	f01e 0f10 	tst.w	lr, #16
 8009cea:	bf08      	it	eq
 8009cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cf0:	f380 8809 	msr	PSP, r0
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst>:
 8009d00:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
}
 8009d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d22:	f7ff fe53 	bl	80099cc <xTaskIncrementTick>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <SysTick_Handler+0x40>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <I2C_Scan>:
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
 8009d56:	2300      	movs	r3, #0
 8009d58:	81fb      	strh	r3, [r7, #14]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	737b      	strb	r3, [r7, #13]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	81fb      	strh	r3, [r7, #14]
 8009d62:	e014      	b.n	8009d8e <I2C_Scan+0x42>
 8009d64:	89f9      	ldrh	r1, [r7, #14]
 8009d66:	2314      	movs	r3, #20
 8009d68:	2201      	movs	r2, #1
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fb fc38 	bl	80055e0 <HAL_I2C_IsDeviceReady>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d108      	bne.n	8009d88 <I2C_Scan+0x3c>
 8009d76:	7b7b      	ldrb	r3, [r7, #13]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	89fa      	ldrh	r2, [r7, #14]
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	7b7b      	ldrb	r3, [r7, #13]
 8009d84:	3301      	adds	r3, #1
 8009d86:	737b      	strb	r3, [r7, #13]
 8009d88:	89fb      	ldrh	r3, [r7, #14]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	81fb      	strh	r3, [r7, #14]
 8009d8e:	89fb      	ldrh	r3, [r7, #14]
 8009d90:	2bff      	cmp	r3, #255	; 0xff
 8009d92:	d9e7      	bls.n	8009d64 <I2C_Scan+0x18>
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <Init_BMP280>:
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b088      	sub	sp, #32
 8009da2:	af04      	add	r7, sp, #16
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	23b6      	movs	r3, #182	; 0xb6
 8009da8:	733b      	strb	r3, [r7, #12]
 8009daa:	2332      	movs	r3, #50	; 0x32
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	2301      	movs	r3, #1
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	f107 030c 	add.w	r3, r7, #12
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2301      	movs	r3, #1
 8009dba:	22e0      	movs	r2, #224	; 0xe0
 8009dbc:	21ee      	movs	r1, #238	; 0xee
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fb f8ee 	bl	8004fa0 <HAL_I2C_Mem_Write>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <Init_BMP280+0x30>
 8009dca:	f7f8 f835 	bl	8001e38 <Error_Handler>
 8009dce:	20fa      	movs	r0, #250	; 0xfa
 8009dd0:	f7f9 fe4e 	bl	8003a70 <HAL_Delay>
 8009dd4:	232f      	movs	r3, #47	; 0x2f
 8009dd6:	733b      	strb	r3, [r7, #12]
 8009dd8:	2332      	movs	r3, #50	; 0x32
 8009dda:	9302      	str	r3, [sp, #8]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	f107 030c 	add.w	r3, r7, #12
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	2301      	movs	r3, #1
 8009de8:	22f4      	movs	r2, #244	; 0xf4
 8009dea:	21ee      	movs	r1, #238	; 0xee
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7fb f8d7 	bl	8004fa0 <HAL_I2C_Mem_Write>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <Init_BMP280+0x5e>
 8009df8:	f7f8 f81e 	bl	8001e38 <Error_Handler>
 8009dfc:	bf00      	nop
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <Init_MPU9250_AK8963>:
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af04      	add	r7, sp, #16
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	733b      	strb	r3, [r7, #12]
 8009e10:	2332      	movs	r3, #50	; 0x32
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	2301      	movs	r3, #1
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	f107 030c 	add.w	r3, r7, #12
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	2301      	movs	r3, #1
 8009e20:	226b      	movs	r2, #107	; 0x6b
 8009e22:	21d0      	movs	r1, #208	; 0xd0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7fb f8bb 	bl	8004fa0 <HAL_I2C_Mem_Write>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <Init_MPU9250_AK8963+0x30>
 8009e30:	f7f8 f802 	bl	8001e38 <Error_Handler>
 8009e34:	2064      	movs	r0, #100	; 0x64
 8009e36:	f7f9 fe1b 	bl	8003a70 <HAL_Delay>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	733b      	strb	r3, [r7, #12]
 8009e3e:	2332      	movs	r3, #50	; 0x32
 8009e40:	9302      	str	r3, [sp, #8]
 8009e42:	2301      	movs	r3, #1
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	f107 030c 	add.w	r3, r7, #12
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	226b      	movs	r2, #107	; 0x6b
 8009e50:	21d0      	movs	r1, #208	; 0xd0
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7fb f8a4 	bl	8004fa0 <HAL_I2C_Mem_Write>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <Init_MPU9250_AK8963+0x5e>
 8009e5e:	f7f7 ffeb 	bl	8001e38 <Error_Handler>
 8009e62:	2302      	movs	r3, #2
 8009e64:	733b      	strb	r3, [r7, #12]
 8009e66:	2332      	movs	r3, #50	; 0x32
 8009e68:	9302      	str	r3, [sp, #8]
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	f107 030c 	add.w	r3, r7, #12
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2301      	movs	r3, #1
 8009e76:	2237      	movs	r2, #55	; 0x37
 8009e78:	21d0      	movs	r1, #208	; 0xd0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fb f890 	bl	8004fa0 <HAL_I2C_Mem_Write>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <Init_MPU9250_AK8963+0x86>
 8009e86:	f7f7 ffd7 	bl	8001e38 <Error_Handler>
 8009e8a:	2316      	movs	r3, #22
 8009e8c:	733b      	strb	r3, [r7, #12]
 8009e8e:	2332      	movs	r3, #50	; 0x32
 8009e90:	9302      	str	r3, [sp, #8]
 8009e92:	2301      	movs	r3, #1
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f107 030c 	add.w	r3, r7, #12
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	220a      	movs	r2, #10
 8009ea0:	2118      	movs	r1, #24
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fb f87c 	bl	8004fa0 <HAL_I2C_Mem_Write>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <Init_MPU9250_AK8963+0xae>
 8009eae:	f7f7 ffc3 	bl	8001e38 <Error_Handler>
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <Measure_T_BMP280>:
 8009ebc:	b5b0      	push	{r4, r5, r7, lr}
 8009ebe:	b096      	sub	sp, #88	; 0x58
 8009ec0:	af04      	add	r7, sp, #16
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	647b      	str	r3, [r7, #68]	; 0x44
 8009ecc:	2300      	movs	r3, #0
 8009ece:	643b      	str	r3, [r7, #64]	; 0x40
 8009ed0:	2332      	movs	r3, #50	; 0x32
 8009ed2:	9302      	str	r3, [sp, #8]
 8009ed4:	2306      	movs	r3, #6
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	f107 0310 	add.w	r3, r7, #16
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	2288      	movs	r2, #136	; 0x88
 8009ee2:	21ee      	movs	r1, #238	; 0xee
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7fb f955 	bl	8005194 <HAL_I2C_Mem_Read>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <Measure_T_BMP280+0x38>
 8009ef0:	f7f7 ffa2 	bl	8001e38 <Error_Handler>
 8009ef4:	7c3b      	ldrb	r3, [r7, #16]
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	7c7b      	ldrb	r3, [r7, #17]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009f04:	7cbb      	ldrb	r3, [r7, #18]
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	7cfb      	ldrb	r3, [r7, #19]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	4413      	add	r3, r2
 8009f12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009f14:	7d3b      	ldrb	r3, [r7, #20]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	7d7b      	ldrb	r3, [r7, #21]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4413      	add	r3, r2
 8009f22:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009f24:	2332      	movs	r3, #50	; 0x32
 8009f26:	9302      	str	r3, [sp, #8]
 8009f28:	2303      	movs	r3, #3
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	f107 0310 	add.w	r3, r7, #16
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	2301      	movs	r3, #1
 8009f34:	22fa      	movs	r2, #250	; 0xfa
 8009f36:	21ee      	movs	r1, #238	; 0xee
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7fb f92b 	bl	8005194 <HAL_I2C_Mem_Read>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <Measure_T_BMP280+0x8c>
 8009f44:	f7f7 ff78 	bl	8001e38 <Error_Handler>
 8009f48:	7c3b      	ldrb	r3, [r7, #16]
 8009f4a:	031a      	lsls	r2, r3, #12
 8009f4c:	7c7b      	ldrb	r3, [r7, #17]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	7cba      	ldrb	r2, [r7, #18]
 8009f54:	0912      	lsrs	r2, r2, #4
 8009f56:	b2d2      	uxtb	r2, r2
 8009f58:	4413      	add	r3, r2
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f5e:	f7f6 faf1 	bl	8000544 <__aeabi_i2d>
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	4b47      	ldr	r3, [pc, #284]	; (800a084 <Measure_T_BMP280+0x1c8>)
 8009f68:	f7f6 fc80 	bl	800086c <__aeabi_ddiv>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	461d      	mov	r5, r3
 8009f74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7f6 fad4 	bl	8000524 <__aeabi_ui2d>
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	4b41      	ldr	r3, [pc, #260]	; (800a088 <Measure_T_BMP280+0x1cc>)
 8009f82:	f7f6 fc73 	bl	800086c <__aeabi_ddiv>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 f98b 	bl	80002a8 <__aeabi_dsub>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4614      	mov	r4, r2
 8009f98:	461d      	mov	r5, r3
 8009f9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7f6 fac1 	bl	8000524 <__aeabi_ui2d>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 fb35 	bl	8000618 <__aeabi_dmul>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009fb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009fb8:	f7f6 fac4 	bl	8000544 <__aeabi_i2d>
 8009fbc:	f04f 0200 	mov.w	r2, #0
 8009fc0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8009fc4:	f7f6 fc52 	bl	800086c <__aeabi_ddiv>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4614      	mov	r4, r2
 8009fce:	461d      	mov	r5, r3
 8009fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7f6 faa6 	bl	8000524 <__aeabi_ui2d>
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	4b2b      	ldr	r3, [pc, #172]	; (800a08c <Measure_T_BMP280+0x1d0>)
 8009fde:	f7f6 fc45 	bl	800086c <__aeabi_ddiv>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f95d 	bl	80002a8 <__aeabi_dsub>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	f7f6 fdbf 	bl	8000b78 <__aeabi_d2iz>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a000:	fb03 f303 	mul.w	r3, r3, r3
 800a004:	4618      	mov	r0, r3
 800a006:	f7f6 fa9d 	bl	8000544 <__aeabi_i2d>
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a010:	4618      	mov	r0, r3
 800a012:	f7f6 fa87 	bl	8000524 <__aeabi_ui2d>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4620      	mov	r0, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	f7f6 fafb 	bl	8000618 <__aeabi_dmul>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800a02a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a02e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a032:	f7f6 f93b 	bl	80002ac <__adddf3>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7f6 fd9b 	bl	8000b78 <__aeabi_d2iz>
 800a042:	4603      	mov	r3, r0
 800a044:	647b      	str	r3, [r7, #68]	; 0x44
 800a046:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a04a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a04e:	f7f6 f92d 	bl	80002ac <__adddf3>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4610      	mov	r0, r2
 800a058:	4619      	mov	r1, r3
 800a05a:	f04f 0200 	mov.w	r2, #0
 800a05e:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <Measure_T_BMP280+0x1d4>)
 800a060:	f7f6 fc04 	bl	800086c <__aeabi_ddiv>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a078:	e9c1 2300 	strd	r2, r3, [r1]
 800a07c:	bf00      	nop
 800a07e:	3748      	adds	r7, #72	; 0x48
 800a080:	46bd      	mov	sp, r7
 800a082:	bdb0      	pop	{r4, r5, r7, pc}
 800a084:	40d00000 	.word	0x40d00000
 800a088:	40900000 	.word	0x40900000
 800a08c:	40c00000 	.word	0x40c00000
 800a090:	40b40000 	.word	0x40b40000
 800a094:	00000000 	.word	0x00000000

0800a098 <Measure_T>:
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af04      	add	r7, sp, #16
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
 800a0a2:	2332      	movs	r3, #50	; 0x32
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	2241      	movs	r2, #65	; 0x41
 800a0b4:	21d0      	movs	r1, #208	; 0xd0
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7fb f86c 	bl	8005194 <HAL_I2C_Mem_Read>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <Measure_T+0x2e>
 800a0c2:	f7f7 feb9 	bl	8001e38 <Error_Handler>
 800a0c6:	7a3b      	ldrb	r3, [r7, #8]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	7a7b      	ldrb	r3, [r7, #9]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	4413      	add	r3, r2
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3b15      	subs	r3, #21
 800a0d8:	81fb      	strh	r3, [r7, #14]
 800a0da:	89fb      	ldrh	r3, [r7, #14]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7f6 fa21 	bl	8000524 <__aeabi_ui2d>
 800a0e2:	a30c      	add	r3, pc, #48	; (adr r3, 800a114 <Measure_T+0x7c>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f7f6 fbc0 	bl	800086c <__aeabi_ddiv>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <Measure_T+0x78>)
 800a0fa:	f7f6 f8d7 	bl	80002ac <__adddf3>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	e9c1 2300 	strd	r2, r3, [r1]
 800a108:	bf00      	nop
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	40350000 	.word	0x40350000
 800a114:	851eb852 	.word	0x851eb852
 800a118:	4074ddeb 	.word	0x4074ddeb
 800a11c:	00000000 	.word	0x00000000

0800a120 <Measure_P>:
 800a120:	b5b0      	push	{r4, r5, r7, lr}
 800a122:	b09c      	sub	sp, #112	; 0x70
 800a124:	af04      	add	r7, sp, #16
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4618      	mov	r0, r3
 800a132:	f7f6 fa07 	bl	8000544 <__aeabi_i2d>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800a13e:	2332      	movs	r3, #50	; 0x32
 800a140:	9302      	str	r3, [sp, #8]
 800a142:	2312      	movs	r3, #18
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	f107 0314 	add.w	r3, r7, #20
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	2301      	movs	r3, #1
 800a14e:	228e      	movs	r2, #142	; 0x8e
 800a150:	21ee      	movs	r1, #238	; 0xee
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7fb f81e 	bl	8005194 <HAL_I2C_Mem_Read>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <Measure_P+0x42>
 800a15e:	f7f7 fe6b 	bl	8001e38 <Error_Handler>
 800a162:	7d3b      	ldrb	r3, [r7, #20]
 800a164:	b29a      	uxth	r2, r3
 800a166:	7d7b      	ldrb	r3, [r7, #21]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4413      	add	r3, r2
 800a170:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a174:	7dbb      	ldrb	r3, [r7, #22]
 800a176:	b29a      	uxth	r2, r3
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4413      	add	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a188:	7e3b      	ldrb	r3, [r7, #24]
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	7e7b      	ldrb	r3, [r7, #25]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	b29b      	uxth	r3, r3
 800a194:	4413      	add	r3, r2
 800a196:	b29b      	uxth	r3, r3
 800a198:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a19c:	7ebb      	ldrb	r3, [r7, #26]
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	7efb      	ldrb	r3, [r7, #27]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a1b0:	7f3b      	ldrb	r3, [r7, #28]
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	7f7b      	ldrb	r3, [r7, #29]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	021b      	lsls	r3, r3, #8
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a1c4:	7fbb      	ldrb	r3, [r7, #30]
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	7ffb      	ldrb	r3, [r7, #31]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a1d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	021b      	lsls	r3, r3, #8
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a1f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4413      	add	r3, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a212:	b29b      	uxth	r3, r3
 800a214:	021b      	lsls	r3, r3, #8
 800a216:	b29b      	uxth	r3, r3
 800a218:	4413      	add	r3, r2
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a220:	2332      	movs	r3, #50	; 0x32
 800a222:	9302      	str	r3, [sp, #8]
 800a224:	2303      	movs	r3, #3
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	f107 0314 	add.w	r3, r7, #20
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	2301      	movs	r3, #1
 800a230:	22f7      	movs	r2, #247	; 0xf7
 800a232:	21ee      	movs	r1, #238	; 0xee
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7fa ffad 	bl	8005194 <HAL_I2C_Mem_Read>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <Measure_P+0x124>
 800a240:	f7f7 fdfa 	bl	8001e38 <Error_Handler>
 800a244:	7d3b      	ldrb	r3, [r7, #20]
 800a246:	031a      	lsls	r2, r3, #12
 800a248:	7d7b      	ldrb	r3, [r7, #21]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	7dba      	ldrb	r2, [r7, #22]
 800a250:	0912      	lsrs	r2, r2, #4
 800a252:	b2d2      	uxtb	r2, r2
 800a254:	4413      	add	r3, r2
 800a256:	643b      	str	r3, [r7, #64]	; 0x40
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a260:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a264:	f7f6 fb02 	bl	800086c <__aeabi_ddiv>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4610      	mov	r0, r2
 800a26e:	4619      	mov	r1, r3
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	4bb4      	ldr	r3, [pc, #720]	; (800a548 <Measure_P+0x428>)
 800a276:	f7f6 f817 	bl	80002a8 <__aeabi_dsub>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800a282:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a286:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a28a:	f7f6 f9c5 	bl	8000618 <__aeabi_dmul>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4614      	mov	r4, r2
 800a294:	461d      	mov	r5, r3
 800a296:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f6 f952 	bl	8000544 <__aeabi_i2d>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	f7f6 f9b6 	bl	8000618 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	f04f 0200 	mov.w	r2, #0
 800a2b8:	4ba4      	ldr	r3, [pc, #656]	; (800a54c <Measure_P+0x42c>)
 800a2ba:	f7f6 fad7 	bl	800086c <__aeabi_ddiv>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a2c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7f6 f93a 	bl	8000544 <__aeabi_i2d>
 800a2d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2d4:	f7f6 f9a0 	bl	8000618 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	f7f5 ffe2 	bl	80002ac <__adddf3>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a2f0:	f7f5 ffdc 	bl	80002ac <__adddf3>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a2fc:	f04f 0200 	mov.w	r2, #0
 800a300:	4b93      	ldr	r3, [pc, #588]	; (800a550 <Measure_P+0x430>)
 800a302:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a306:	f7f6 fab1 	bl	800086c <__aeabi_ddiv>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4614      	mov	r4, r2
 800a310:	461d      	mov	r5, r3
 800a312:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800a316:	4618      	mov	r0, r3
 800a318:	f7f6 f914 	bl	8000544 <__aeabi_i2d>
 800a31c:	f04f 0200 	mov.w	r2, #0
 800a320:	4b8c      	ldr	r3, [pc, #560]	; (800a554 <Measure_P+0x434>)
 800a322:	f7f6 f979 	bl	8000618 <__aeabi_dmul>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7f5 ffbd 	bl	80002ac <__adddf3>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a33a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f6 f900 	bl	8000544 <__aeabi_i2d>
 800a344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a348:	f7f6 f966 	bl	8000618 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4610      	mov	r0, r2
 800a352:	4619      	mov	r1, r3
 800a354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a358:	f7f6 f95e 	bl	8000618 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4610      	mov	r0, r2
 800a362:	4619      	mov	r1, r3
 800a364:	f04f 0200 	mov.w	r2, #0
 800a368:	4b7b      	ldr	r3, [pc, #492]	; (800a558 <Measure_P+0x438>)
 800a36a:	f7f6 fa7f 	bl	800086c <__aeabi_ddiv>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4614      	mov	r4, r2
 800a374:	461d      	mov	r5, r3
 800a376:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7f6 f8e2 	bl	8000544 <__aeabi_i2d>
 800a380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a384:	f7f6 f948 	bl	8000618 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	f7f5 ff8c 	bl	80002ac <__adddf3>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4610      	mov	r0, r2
 800a39a:	4619      	mov	r1, r3
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	4b6d      	ldr	r3, [pc, #436]	; (800a558 <Measure_P+0x438>)
 800a3a2:	f7f6 fa63 	bl	800086c <__aeabi_ddiv>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800a3ae:	f04f 0200 	mov.w	r2, #0
 800a3b2:	4b66      	ldr	r3, [pc, #408]	; (800a54c <Measure_P+0x42c>)
 800a3b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a3b8:	f7f6 fa58 	bl	800086c <__aeabi_ddiv>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	4b64      	ldr	r3, [pc, #400]	; (800a55c <Measure_P+0x43c>)
 800a3ca:	f7f5 ff6f 	bl	80002ac <__adddf3>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	461d      	mov	r5, r3
 800a3d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f6 f8a2 	bl	8000524 <__aeabi_ui2d>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 f916 	bl	8000618 <__aeabi_dmul>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a400:	f7f6 fb72 	bl	8000ae8 <__aeabi_dcmpeq>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <Measure_P+0x2ee>
 800a40a:	2300      	movs	r3, #0
 800a40c:	e091      	b.n	800a532 <Measure_P+0x412>
 800a40e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a410:	f7f6 f898 	bl	8000544 <__aeabi_i2d>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	f04f 0000 	mov.w	r0, #0
 800a41c:	4950      	ldr	r1, [pc, #320]	; (800a560 <Measure_P+0x440>)
 800a41e:	f7f5 ff43 	bl	80002a8 <__aeabi_dsub>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800a42a:	f04f 0200 	mov.w	r2, #0
 800a42e:	4b4d      	ldr	r3, [pc, #308]	; (800a564 <Measure_P+0x444>)
 800a430:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a434:	f7f6 fa1a 	bl	800086c <__aeabi_ddiv>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a440:	f7f5 ff32 	bl	80002a8 <__aeabi_dsub>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4610      	mov	r0, r2
 800a44a:	4619      	mov	r1, r3
 800a44c:	a33c      	add	r3, pc, #240	; (adr r3, 800a540 <Measure_P+0x420>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4610      	mov	r0, r2
 800a45c:	4619      	mov	r1, r3
 800a45e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a462:	f7f6 fa03 	bl	800086c <__aeabi_ddiv>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800a46e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800a472:	4618      	mov	r0, r3
 800a474:	f7f6 f866 	bl	8000544 <__aeabi_i2d>
 800a478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a47c:	f7f6 f8cc 	bl	8000618 <__aeabi_dmul>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4610      	mov	r0, r2
 800a486:	4619      	mov	r1, r3
 800a488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a48c:	f7f6 f8c4 	bl	8000618 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4610      	mov	r0, r2
 800a496:	4619      	mov	r1, r3
 800a498:	f04f 0200 	mov.w	r2, #0
 800a49c:	4b32      	ldr	r3, [pc, #200]	; (800a568 <Measure_P+0x448>)
 800a49e:	f7f6 f9e5 	bl	800086c <__aeabi_ddiv>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800a4aa:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f6 f848 	bl	8000544 <__aeabi_i2d>
 800a4b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4b8:	f7f6 f8ae 	bl	8000618 <__aeabi_dmul>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	4b20      	ldr	r3, [pc, #128]	; (800a54c <Measure_P+0x42c>)
 800a4ca:	f7f6 f9cf 	bl	800086c <__aeabi_ddiv>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a4d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a4da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a4de:	f7f5 fee5 	bl	80002ac <__adddf3>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f6 f828 	bl	8000544 <__aeabi_i2d>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7f5 fed6 	bl	80002ac <__adddf3>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4610      	mov	r0, r2
 800a506:	4619      	mov	r1, r3
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	4b17      	ldr	r3, [pc, #92]	; (800a56c <Measure_P+0x44c>)
 800a50e:	f7f6 f9ad 	bl	800086c <__aeabi_ddiv>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a51a:	f7f5 fec7 	bl	80002ac <__adddf3>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a52c:	e9c1 2300 	strd	r2, r3, [r1]
 800a530:	2301      	movs	r3, #1
 800a532:	4618      	mov	r0, r3
 800a534:	3760      	adds	r7, #96	; 0x60
 800a536:	46bd      	mov	sp, r7
 800a538:	bdb0      	pop	{r4, r5, r7, pc}
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w
 800a540:	00000000 	.word	0x00000000
 800a544:	40b86a00 	.word	0x40b86a00
 800a548:	40ef4000 	.word	0x40ef4000
 800a54c:	40e00000 	.word	0x40e00000
 800a550:	40100000 	.word	0x40100000
 800a554:	40f00000 	.word	0x40f00000
 800a558:	41200000 	.word	0x41200000
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	41300000 	.word	0x41300000
 800a564:	40b00000 	.word	0x40b00000
 800a568:	41e00000 	.word	0x41e00000
 800a56c:	40300000 	.word	0x40300000

0800a570 <Measure_A>:
 800a570:	b5b0      	push	{r4, r5, r7, lr}
 800a572:	b08a      	sub	sp, #40	; 0x28
 800a574:	af04      	add	r7, sp, #16
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
 800a57a:	2300      	movs	r3, #0
 800a57c:	75fb      	strb	r3, [r7, #23]
 800a57e:	2300      	movs	r3, #0
 800a580:	82bb      	strh	r3, [r7, #20]
 800a582:	2301      	movs	r3, #1
 800a584:	75bb      	strb	r3, [r7, #22]
 800a586:	2332      	movs	r3, #50	; 0x32
 800a588:	9302      	str	r3, [sp, #8]
 800a58a:	2301      	movs	r3, #1
 800a58c:	9301      	str	r3, [sp, #4]
 800a58e:	f107 030c 	add.w	r3, r7, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	2301      	movs	r3, #1
 800a596:	221c      	movs	r2, #28
 800a598:	21d0      	movs	r1, #208	; 0xd0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7fa fdfa 	bl	8005194 <HAL_I2C_Mem_Read>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <Measure_A+0x3a>
 800a5a6:	f7f7 fc47 	bl	8001e38 <Error_Handler>
 800a5aa:	7b3b      	ldrb	r3, [r7, #12]
 800a5ac:	10db      	asrs	r3, r3, #3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f003 0303 	and.w	r3, r3, #3
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	82bb      	strh	r3, [r7, #20]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	75fb      	strb	r3, [r7, #23]
 800a5c0:	e005      	b.n	800a5ce <Measure_A+0x5e>
 800a5c2:	7dbb      	ldrb	r3, [r7, #22]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	75bb      	strb	r3, [r7, #22]
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	75fb      	strb	r3, [r7, #23]
 800a5ce:	7dfa      	ldrb	r2, [r7, #23]
 800a5d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	dbf4      	blt.n	800a5c2 <Measure_A+0x52>
 800a5d8:	2332      	movs	r3, #50	; 0x32
 800a5da:	9302      	str	r3, [sp, #8]
 800a5dc:	2306      	movs	r3, #6
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	f107 030c 	add.w	r3, r7, #12
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	223b      	movs	r2, #59	; 0x3b
 800a5ea:	21d0      	movs	r1, #208	; 0xd0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7fa fdd1 	bl	8005194 <HAL_I2C_Mem_Read>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <Measure_A+0x8c>
 800a5f8:	f7f7 fc1e 	bl	8001e38 <Error_Handler>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	75fb      	strb	r3, [r7, #23]
 800a600:	e03a      	b.n	800a678 <Measure_A+0x108>
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	f107 0218 	add.w	r2, r7, #24
 800a60a:	4413      	add	r3, r2
 800a60c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a610:	b29b      	uxth	r3, r3
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b29a      	uxth	r2, r3
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	3301      	adds	r3, #1
 800a61c:	f107 0118 	add.w	r1, r7, #24
 800a620:	440b      	add	r3, r1
 800a622:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a626:	b29b      	uxth	r3, r3
 800a628:	4413      	add	r3, r2
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	82bb      	strh	r3, [r7, #20]
 800a62e:	7dbb      	ldrb	r3, [r7, #22]
 800a630:	4618      	mov	r0, r3
 800a632:	f7f5 ff87 	bl	8000544 <__aeabi_i2d>
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7f5 ff80 	bl	8000544 <__aeabi_i2d>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4620      	mov	r0, r4
 800a64a:	4629      	mov	r1, r5
 800a64c:	f7f5 ffe4 	bl	8000618 <__aeabi_dmul>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	18d4      	adds	r4, r2, r3
 800a660:	a309      	add	r3, pc, #36	; (adr r3, 800a688 <Measure_A+0x118>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f6 f901 	bl	800086c <__aeabi_ddiv>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	e9c4 2300 	strd	r2, r3, [r4]
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	3301      	adds	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d9c1      	bls.n	800a602 <Measure_A+0x92>
 800a67e:	bf00      	nop
 800a680:	bf00      	nop
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bdb0      	pop	{r4, r5, r7, pc}
 800a688:	00000000 	.word	0x00000000
 800a68c:	40dfffc0 	.word	0x40dfffc0

0800a690 <Measure_G>:
 800a690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a694:	b08c      	sub	sp, #48	; 0x30
 800a696:	af04      	add	r7, sp, #16
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	77fb      	strb	r3, [r7, #31]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	83bb      	strh	r3, [r7, #28]
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	77bb      	strb	r3, [r7, #30]
 800a6aa:	2332      	movs	r3, #50	; 0x32
 800a6ac:	9302      	str	r3, [sp, #8]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	f107 0314 	add.w	r3, r7, #20
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	221b      	movs	r2, #27
 800a6bc:	21d0      	movs	r1, #208	; 0xd0
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fa fd68 	bl	8005194 <HAL_I2C_Mem_Read>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <Measure_G+0x3e>
 800a6ca:	f7f7 fbb5 	bl	8001e38 <Error_Handler>
 800a6ce:	7d3b      	ldrb	r3, [r7, #20]
 800a6d0:	10db      	asrs	r3, r3, #3
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	f003 0303 	and.w	r3, r3, #3
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3301      	adds	r3, #1
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	83bb      	strh	r3, [r7, #28]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	77fb      	strb	r3, [r7, #31]
 800a6e4:	e008      	b.n	800a6f8 <Measure_G+0x68>
 800a6e6:	7fbb      	ldrb	r3, [r7, #30]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	77bb      	strb	r3, [r7, #30]
 800a6f2:	7ffb      	ldrb	r3, [r7, #31]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	7ffa      	ldrb	r2, [r7, #31]
 800a6fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	dbf1      	blt.n	800a6e6 <Measure_G+0x56>
 800a702:	2332      	movs	r3, #50	; 0x32
 800a704:	9302      	str	r3, [sp, #8]
 800a706:	2306      	movs	r3, #6
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	f107 0314 	add.w	r3, r7, #20
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	2301      	movs	r3, #1
 800a712:	2243      	movs	r2, #67	; 0x43
 800a714:	21d0      	movs	r1, #208	; 0xd0
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7fa fd3c 	bl	8005194 <HAL_I2C_Mem_Read>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <Measure_G+0x96>
 800a722:	f7f7 fb89 	bl	8001e38 <Error_Handler>
 800a726:	2300      	movs	r3, #0
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e04e      	b.n	800a7ca <Measure_G+0x13a>
 800a72c:	7ffb      	ldrb	r3, [r7, #31]
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	f107 0220 	add.w	r2, r7, #32
 800a734:	4413      	add	r3, r2
 800a736:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	b29a      	uxth	r2, r3
 800a740:	7ffb      	ldrb	r3, [r7, #31]
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	3301      	adds	r3, #1
 800a746:	f107 0120 	add.w	r1, r7, #32
 800a74a:	440b      	add	r3, r1
 800a74c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a750:	b29b      	uxth	r3, r3
 800a752:	4413      	add	r3, r2
 800a754:	b29b      	uxth	r3, r3
 800a756:	83bb      	strh	r3, [r7, #28]
 800a758:	7fbb      	ldrb	r3, [r7, #30]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f5 fee2 	bl	8000524 <__aeabi_ui2d>
 800a760:	a31f      	add	r3, pc, #124	; (adr r3, 800a7e0 <Measure_G+0x150>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f6 f881 	bl	800086c <__aeabi_ddiv>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4690      	mov	r8, r2
 800a770:	4699      	mov	r9, r3
 800a772:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a776:	4618      	mov	r0, r3
 800a778:	f7f5 fee4 	bl	8000544 <__aeabi_i2d>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	7ff9      	ldrb	r1, [r7, #31]
 800a782:	00c9      	lsls	r1, r1, #3
 800a784:	68b8      	ldr	r0, [r7, #8]
 800a786:	1844      	adds	r4, r0, r1
 800a788:	4640      	mov	r0, r8
 800a78a:	4649      	mov	r1, r9
 800a78c:	f7f5 ff44 	bl	8000618 <__aeabi_dmul>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	e9c4 2300 	strd	r2, r3, [r4]
 800a798:	7ffb      	ldrb	r3, [r7, #31]
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	4413      	add	r3, r2
 800a7a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7a4:	7ffb      	ldrb	r3, [r7, #31]
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	7ffc      	ldrb	r4, [r7, #31]
 800a7b2:	00e4      	lsls	r4, r4, #3
 800a7b4:	68bd      	ldr	r5, [r7, #8]
 800a7b6:	442c      	add	r4, r5
 800a7b8:	f7f5 fd76 	bl	80002a8 <__aeabi_dsub>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	e9c4 2300 	strd	r2, r3, [r4]
 800a7c4:	7ffb      	ldrb	r3, [r7, #31]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	77fb      	strb	r3, [r7, #31]
 800a7ca:	7ffb      	ldrb	r3, [r7, #31]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d9ad      	bls.n	800a72c <Measure_G+0x9c>
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	3720      	adds	r7, #32
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a7dc:	f3af 8000 	nop.w
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	40dfffc0 	.word	0x40dfffc0

0800a7e8 <Measure_M>:
 800a7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ea:	b08d      	sub	sp, #52	; 0x34
 800a7ec:	af04      	add	r7, sp, #16
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
 800a7f4:	603b      	str	r3, [r7, #0]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	77fb      	strb	r3, [r7, #31]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	83bb      	strh	r3, [r7, #28]
 800a7fe:	2300      	movs	r3, #0
 800a800:	76fb      	strb	r3, [r7, #27]
 800a802:	2332      	movs	r3, #50	; 0x32
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	2301      	movs	r3, #1
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	f107 031b 	add.w	r3, r7, #27
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	2301      	movs	r3, #1
 800a812:	2202      	movs	r2, #2
 800a814:	2118      	movs	r1, #24
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7fa fcbc 	bl	8005194 <HAL_I2C_Mem_Read>
 800a81c:	7efb      	ldrb	r3, [r7, #27]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 8096 	beq.w	800a954 <Measure_M+0x16c>
 800a828:	2332      	movs	r3, #50	; 0x32
 800a82a:	9302      	str	r3, [sp, #8]
 800a82c:	2307      	movs	r3, #7
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	f107 0314 	add.w	r3, r7, #20
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	2301      	movs	r3, #1
 800a838:	2203      	movs	r2, #3
 800a83a:	2118      	movs	r1, #24
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7fa fca9 	bl	8005194 <HAL_I2C_Mem_Read>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <Measure_M+0x64>
 800a848:	f7f7 faf6 	bl	8001e38 <Error_Handler>
 800a84c:	7ebb      	ldrb	r3, [r7, #26]
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	2b00      	cmp	r3, #0
 800a854:	d17e      	bne.n	800a954 <Measure_M+0x16c>
 800a856:	2300      	movs	r3, #0
 800a858:	77fb      	strb	r3, [r7, #31]
 800a85a:	e078      	b.n	800a94e <Measure_M+0x166>
 800a85c:	7ffb      	ldrb	r3, [r7, #31]
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	f107 0220 	add.w	r2, r7, #32
 800a864:	4413      	add	r3, r2
 800a866:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	7ffb      	ldrb	r3, [r7, #31]
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	3301      	adds	r3, #1
 800a872:	f107 0120 	add.w	r1, r7, #32
 800a876:	440b      	add	r3, r1
 800a878:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	b29b      	uxth	r3, r3
 800a882:	4413      	add	r3, r2
 800a884:	83bb      	strh	r3, [r7, #28]
 800a886:	7ffb      	ldrb	r3, [r7, #31]
 800a888:	00db      	lsls	r3, r3, #3
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	18d4      	adds	r4, r2, r3
 800a88e:	8bbb      	ldrh	r3, [r7, #28]
 800a890:	4618      	mov	r0, r3
 800a892:	f7f5 fe47 	bl	8000524 <__aeabi_ui2d>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	e9c4 2300 	strd	r2, r3, [r4]
 800a89e:	7ffb      	ldrb	r3, [r7, #31]
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f107 0220 	add.w	r2, r7, #32
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a8ae:	09db      	lsrs	r3, r3, #7
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d10f      	bne.n	800a8d6 <Measure_M+0xee>
 800a8b6:	8bbb      	ldrh	r3, [r7, #28]
 800a8b8:	425b      	negs	r3, r3
 800a8ba:	83bb      	strh	r3, [r7, #28]
 800a8bc:	8bbb      	ldrh	r3, [r7, #28]
 800a8be:	4259      	negs	r1, r3
 800a8c0:	7ffb      	ldrb	r3, [r7, #31]
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	18d4      	adds	r4, r2, r3
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	f7f5 fe3b 	bl	8000544 <__aeabi_i2d>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	e9c4 2300 	strd	r2, r3, [r4]
 800a8d6:	7ffb      	ldrb	r3, [r7, #31]
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8e2:	7ffb      	ldrb	r3, [r7, #31]
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	18d4      	adds	r4, r2, r3
 800a8ea:	a31d      	add	r3, pc, #116	; (adr r3, 800a960 <Measure_M+0x178>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f7f5 fe92 	bl	8000618 <__aeabi_dmul>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	e9c4 2300 	strd	r2, r3, [r4]
 800a8fc:	7ffb      	ldrb	r3, [r7, #31]
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	4413      	add	r3, r2
 800a904:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a908:	7ffb      	ldrb	r3, [r7, #31]
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	4413      	add	r3, r2
 800a910:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a914:	7ffb      	ldrb	r3, [r7, #31]
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fcc2 	bl	80002a8 <__aeabi_dsub>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4610      	mov	r0, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	7ffb      	ldrb	r3, [r7, #31]
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	18d6      	adds	r6, r2, r3
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fe6c 	bl	8000618 <__aeabi_dmul>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	e9c6 2300 	strd	r2, r3, [r6]
 800a948:	7ffb      	ldrb	r3, [r7, #31]
 800a94a:	3301      	adds	r3, #1
 800a94c:	77fb      	strb	r3, [r7, #31]
 800a94e:	7ffb      	ldrb	r3, [r7, #31]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d983      	bls.n	800a85c <Measure_M+0x74>
 800a954:	bf00      	nop
 800a956:	3724      	adds	r7, #36	; 0x24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a95c:	f3af 8000 	nop.w
 800a960:	13313313 	.word	0x13313313
 800a964:	3fc33133 	.word	0x3fc33133

0800a968 <__errno>:
 800a968:	4b01      	ldr	r3, [pc, #4]	; (800a970 <__errno+0x8>)
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	20000064 	.word	0x20000064

0800a974 <__libc_init_array>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4d0d      	ldr	r5, [pc, #52]	; (800a9ac <__libc_init_array+0x38>)
 800a978:	4c0d      	ldr	r4, [pc, #52]	; (800a9b0 <__libc_init_array+0x3c>)
 800a97a:	1b64      	subs	r4, r4, r5
 800a97c:	10a4      	asrs	r4, r4, #2
 800a97e:	2600      	movs	r6, #0
 800a980:	42a6      	cmp	r6, r4
 800a982:	d109      	bne.n	800a998 <__libc_init_array+0x24>
 800a984:	4d0b      	ldr	r5, [pc, #44]	; (800a9b4 <__libc_init_array+0x40>)
 800a986:	4c0c      	ldr	r4, [pc, #48]	; (800a9b8 <__libc_init_array+0x44>)
 800a988:	f002 fd0a 	bl	800d3a0 <_init>
 800a98c:	1b64      	subs	r4, r4, r5
 800a98e:	10a4      	asrs	r4, r4, #2
 800a990:	2600      	movs	r6, #0
 800a992:	42a6      	cmp	r6, r4
 800a994:	d105      	bne.n	800a9a2 <__libc_init_array+0x2e>
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99c:	4798      	blx	r3
 800a99e:	3601      	adds	r6, #1
 800a9a0:	e7ee      	b.n	800a980 <__libc_init_array+0xc>
 800a9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a6:	4798      	blx	r3
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	e7f2      	b.n	800a992 <__libc_init_array+0x1e>
 800a9ac:	080103fc 	.word	0x080103fc
 800a9b0:	080103fc 	.word	0x080103fc
 800a9b4:	080103fc 	.word	0x080103fc
 800a9b8:	08010400 	.word	0x08010400

0800a9bc <memcpy>:
 800a9bc:	440a      	add	r2, r1
 800a9be:	4291      	cmp	r1, r2
 800a9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9c4:	d100      	bne.n	800a9c8 <memcpy+0xc>
 800a9c6:	4770      	bx	lr
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	d1f9      	bne.n	800a9ca <memcpy+0xe>
 800a9d6:	bd10      	pop	{r4, pc}

0800a9d8 <memset>:
 800a9d8:	4402      	add	r2, r0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d100      	bne.n	800a9e2 <memset+0xa>
 800a9e0:	4770      	bx	lr
 800a9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9e6:	e7f9      	b.n	800a9dc <memset+0x4>

0800a9e8 <__cvt>:
 800a9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ec:	ec55 4b10 	vmov	r4, r5, d0
 800a9f0:	2d00      	cmp	r5, #0
 800a9f2:	460e      	mov	r6, r1
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	bfbb      	ittet	lt
 800a9fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a9fe:	461d      	movlt	r5, r3
 800aa00:	2300      	movge	r3, #0
 800aa02:	232d      	movlt	r3, #45	; 0x2d
 800aa04:	700b      	strb	r3, [r1, #0]
 800aa06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa0c:	4691      	mov	r9, r2
 800aa0e:	f023 0820 	bic.w	r8, r3, #32
 800aa12:	bfbc      	itt	lt
 800aa14:	4622      	movlt	r2, r4
 800aa16:	4614      	movlt	r4, r2
 800aa18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa1c:	d005      	beq.n	800aa2a <__cvt+0x42>
 800aa1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa22:	d100      	bne.n	800aa26 <__cvt+0x3e>
 800aa24:	3601      	adds	r6, #1
 800aa26:	2102      	movs	r1, #2
 800aa28:	e000      	b.n	800aa2c <__cvt+0x44>
 800aa2a:	2103      	movs	r1, #3
 800aa2c:	ab03      	add	r3, sp, #12
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	ab02      	add	r3, sp, #8
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	ec45 4b10 	vmov	d0, r4, r5
 800aa38:	4653      	mov	r3, sl
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	f000 fda4 	bl	800b588 <_dtoa_r>
 800aa40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa44:	4607      	mov	r7, r0
 800aa46:	d102      	bne.n	800aa4e <__cvt+0x66>
 800aa48:	f019 0f01 	tst.w	r9, #1
 800aa4c:	d022      	beq.n	800aa94 <__cvt+0xac>
 800aa4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa52:	eb07 0906 	add.w	r9, r7, r6
 800aa56:	d110      	bne.n	800aa7a <__cvt+0x92>
 800aa58:	783b      	ldrb	r3, [r7, #0]
 800aa5a:	2b30      	cmp	r3, #48	; 0x30
 800aa5c:	d10a      	bne.n	800aa74 <__cvt+0x8c>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2300      	movs	r3, #0
 800aa62:	4620      	mov	r0, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	f7f6 f83f 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa6a:	b918      	cbnz	r0, 800aa74 <__cvt+0x8c>
 800aa6c:	f1c6 0601 	rsb	r6, r6, #1
 800aa70:	f8ca 6000 	str.w	r6, [sl]
 800aa74:	f8da 3000 	ldr.w	r3, [sl]
 800aa78:	4499      	add	r9, r3
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4620      	mov	r0, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7f6 f831 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa86:	b108      	cbz	r0, 800aa8c <__cvt+0xa4>
 800aa88:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa8c:	2230      	movs	r2, #48	; 0x30
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	454b      	cmp	r3, r9
 800aa92:	d307      	bcc.n	800aaa4 <__cvt+0xbc>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa98:	1bdb      	subs	r3, r3, r7
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	b004      	add	sp, #16
 800aaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa4:	1c59      	adds	r1, r3, #1
 800aaa6:	9103      	str	r1, [sp, #12]
 800aaa8:	701a      	strb	r2, [r3, #0]
 800aaaa:	e7f0      	b.n	800aa8e <__cvt+0xa6>

0800aaac <__exponent>:
 800aaac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaae:	4603      	mov	r3, r0
 800aab0:	2900      	cmp	r1, #0
 800aab2:	bfb8      	it	lt
 800aab4:	4249      	neglt	r1, r1
 800aab6:	f803 2b02 	strb.w	r2, [r3], #2
 800aaba:	bfb4      	ite	lt
 800aabc:	222d      	movlt	r2, #45	; 0x2d
 800aabe:	222b      	movge	r2, #43	; 0x2b
 800aac0:	2909      	cmp	r1, #9
 800aac2:	7042      	strb	r2, [r0, #1]
 800aac4:	dd2a      	ble.n	800ab1c <__exponent+0x70>
 800aac6:	f10d 0407 	add.w	r4, sp, #7
 800aaca:	46a4      	mov	ip, r4
 800aacc:	270a      	movs	r7, #10
 800aace:	46a6      	mov	lr, r4
 800aad0:	460a      	mov	r2, r1
 800aad2:	fb91 f6f7 	sdiv	r6, r1, r7
 800aad6:	fb07 1516 	mls	r5, r7, r6, r1
 800aada:	3530      	adds	r5, #48	; 0x30
 800aadc:	2a63      	cmp	r2, #99	; 0x63
 800aade:	f104 34ff 	add.w	r4, r4, #4294967295
 800aae2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aae6:	4631      	mov	r1, r6
 800aae8:	dcf1      	bgt.n	800aace <__exponent+0x22>
 800aaea:	3130      	adds	r1, #48	; 0x30
 800aaec:	f1ae 0502 	sub.w	r5, lr, #2
 800aaf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aaf4:	1c44      	adds	r4, r0, #1
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4561      	cmp	r1, ip
 800aafa:	d30a      	bcc.n	800ab12 <__exponent+0x66>
 800aafc:	f10d 0209 	add.w	r2, sp, #9
 800ab00:	eba2 020e 	sub.w	r2, r2, lr
 800ab04:	4565      	cmp	r5, ip
 800ab06:	bf88      	it	hi
 800ab08:	2200      	movhi	r2, #0
 800ab0a:	4413      	add	r3, r2
 800ab0c:	1a18      	subs	r0, r3, r0
 800ab0e:	b003      	add	sp, #12
 800ab10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab1a:	e7ed      	b.n	800aaf8 <__exponent+0x4c>
 800ab1c:	2330      	movs	r3, #48	; 0x30
 800ab1e:	3130      	adds	r1, #48	; 0x30
 800ab20:	7083      	strb	r3, [r0, #2]
 800ab22:	70c1      	strb	r1, [r0, #3]
 800ab24:	1d03      	adds	r3, r0, #4
 800ab26:	e7f1      	b.n	800ab0c <__exponent+0x60>

0800ab28 <_printf_float>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ed2d 8b02 	vpush	{d8}
 800ab30:	b08d      	sub	sp, #52	; 0x34
 800ab32:	460c      	mov	r4, r1
 800ab34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab38:	4616      	mov	r6, r2
 800ab3a:	461f      	mov	r7, r3
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	f001 fcc7 	bl	800c4d0 <_localeconv_r>
 800ab42:	f8d0 a000 	ldr.w	sl, [r0]
 800ab46:	4650      	mov	r0, sl
 800ab48:	f7f5 fb52 	bl	80001f0 <strlen>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	9305      	str	r3, [sp, #20]
 800ab54:	f8d8 3000 	ldr.w	r3, [r8]
 800ab58:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ab5c:	3307      	adds	r3, #7
 800ab5e:	f023 0307 	bic.w	r3, r3, #7
 800ab62:	f103 0208 	add.w	r2, r3, #8
 800ab66:	f8c8 2000 	str.w	r2, [r8]
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab7a:	9307      	str	r3, [sp, #28]
 800ab7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab80:	ee08 0a10 	vmov	s16, r0
 800ab84:	4b9f      	ldr	r3, [pc, #636]	; (800ae04 <_printf_float+0x2dc>)
 800ab86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8e:	f7f5 ffdd 	bl	8000b4c <__aeabi_dcmpun>
 800ab92:	bb88      	cbnz	r0, 800abf8 <_printf_float+0xd0>
 800ab94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab98:	4b9a      	ldr	r3, [pc, #616]	; (800ae04 <_printf_float+0x2dc>)
 800ab9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9e:	f7f5 ffb7 	bl	8000b10 <__aeabi_dcmple>
 800aba2:	bb48      	cbnz	r0, 800abf8 <_printf_float+0xd0>
 800aba4:	2200      	movs	r2, #0
 800aba6:	2300      	movs	r3, #0
 800aba8:	4640      	mov	r0, r8
 800abaa:	4649      	mov	r1, r9
 800abac:	f7f5 ffa6 	bl	8000afc <__aeabi_dcmplt>
 800abb0:	b110      	cbz	r0, 800abb8 <_printf_float+0x90>
 800abb2:	232d      	movs	r3, #45	; 0x2d
 800abb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abb8:	4b93      	ldr	r3, [pc, #588]	; (800ae08 <_printf_float+0x2e0>)
 800abba:	4894      	ldr	r0, [pc, #592]	; (800ae0c <_printf_float+0x2e4>)
 800abbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800abc0:	bf94      	ite	ls
 800abc2:	4698      	movls	r8, r3
 800abc4:	4680      	movhi	r8, r0
 800abc6:	2303      	movs	r3, #3
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	f023 0204 	bic.w	r2, r3, #4
 800abd0:	6022      	str	r2, [r4, #0]
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	9700      	str	r7, [sp, #0]
 800abd8:	4633      	mov	r3, r6
 800abda:	aa0b      	add	r2, sp, #44	; 0x2c
 800abdc:	4621      	mov	r1, r4
 800abde:	4628      	mov	r0, r5
 800abe0:	f000 f9d8 	bl	800af94 <_printf_common>
 800abe4:	3001      	adds	r0, #1
 800abe6:	f040 8090 	bne.w	800ad0a <_printf_float+0x1e2>
 800abea:	f04f 30ff 	mov.w	r0, #4294967295
 800abee:	b00d      	add	sp, #52	; 0x34
 800abf0:	ecbd 8b02 	vpop	{d8}
 800abf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	4640      	mov	r0, r8
 800abfe:	4649      	mov	r1, r9
 800ac00:	f7f5 ffa4 	bl	8000b4c <__aeabi_dcmpun>
 800ac04:	b140      	cbz	r0, 800ac18 <_printf_float+0xf0>
 800ac06:	464b      	mov	r3, r9
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfbc      	itt	lt
 800ac0c:	232d      	movlt	r3, #45	; 0x2d
 800ac0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac12:	487f      	ldr	r0, [pc, #508]	; (800ae10 <_printf_float+0x2e8>)
 800ac14:	4b7f      	ldr	r3, [pc, #508]	; (800ae14 <_printf_float+0x2ec>)
 800ac16:	e7d1      	b.n	800abbc <_printf_float+0x94>
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac1e:	9206      	str	r2, [sp, #24]
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	d13f      	bne.n	800aca4 <_printf_float+0x17c>
 800ac24:	2306      	movs	r3, #6
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	9b05      	ldr	r3, [sp, #20]
 800ac2a:	6861      	ldr	r1, [r4, #4]
 800ac2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac30:	2300      	movs	r3, #0
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	ab0a      	add	r3, sp, #40	; 0x28
 800ac36:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac3a:	ab09      	add	r3, sp, #36	; 0x24
 800ac3c:	ec49 8b10 	vmov	d0, r8, r9
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	6022      	str	r2, [r4, #0]
 800ac44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f7ff fecd 	bl	800a9e8 <__cvt>
 800ac4e:	9b06      	ldr	r3, [sp, #24]
 800ac50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac52:	2b47      	cmp	r3, #71	; 0x47
 800ac54:	4680      	mov	r8, r0
 800ac56:	d108      	bne.n	800ac6a <_printf_float+0x142>
 800ac58:	1cc8      	adds	r0, r1, #3
 800ac5a:	db02      	blt.n	800ac62 <_printf_float+0x13a>
 800ac5c:	6863      	ldr	r3, [r4, #4]
 800ac5e:	4299      	cmp	r1, r3
 800ac60:	dd41      	ble.n	800ace6 <_printf_float+0x1be>
 800ac62:	f1ab 0b02 	sub.w	fp, fp, #2
 800ac66:	fa5f fb8b 	uxtb.w	fp, fp
 800ac6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac6e:	d820      	bhi.n	800acb2 <_printf_float+0x18a>
 800ac70:	3901      	subs	r1, #1
 800ac72:	465a      	mov	r2, fp
 800ac74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac78:	9109      	str	r1, [sp, #36]	; 0x24
 800ac7a:	f7ff ff17 	bl	800aaac <__exponent>
 800ac7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac80:	1813      	adds	r3, r2, r0
 800ac82:	2a01      	cmp	r2, #1
 800ac84:	4681      	mov	r9, r0
 800ac86:	6123      	str	r3, [r4, #16]
 800ac88:	dc02      	bgt.n	800ac90 <_printf_float+0x168>
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	07d2      	lsls	r2, r2, #31
 800ac8e:	d501      	bpl.n	800ac94 <_printf_float+0x16c>
 800ac90:	3301      	adds	r3, #1
 800ac92:	6123      	str	r3, [r4, #16]
 800ac94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d09c      	beq.n	800abd6 <_printf_float+0xae>
 800ac9c:	232d      	movs	r3, #45	; 0x2d
 800ac9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aca2:	e798      	b.n	800abd6 <_printf_float+0xae>
 800aca4:	9a06      	ldr	r2, [sp, #24]
 800aca6:	2a47      	cmp	r2, #71	; 0x47
 800aca8:	d1be      	bne.n	800ac28 <_printf_float+0x100>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1bc      	bne.n	800ac28 <_printf_float+0x100>
 800acae:	2301      	movs	r3, #1
 800acb0:	e7b9      	b.n	800ac26 <_printf_float+0xfe>
 800acb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800acb6:	d118      	bne.n	800acea <_printf_float+0x1c2>
 800acb8:	2900      	cmp	r1, #0
 800acba:	6863      	ldr	r3, [r4, #4]
 800acbc:	dd0b      	ble.n	800acd6 <_printf_float+0x1ae>
 800acbe:	6121      	str	r1, [r4, #16]
 800acc0:	b913      	cbnz	r3, 800acc8 <_printf_float+0x1a0>
 800acc2:	6822      	ldr	r2, [r4, #0]
 800acc4:	07d0      	lsls	r0, r2, #31
 800acc6:	d502      	bpl.n	800acce <_printf_float+0x1a6>
 800acc8:	3301      	adds	r3, #1
 800acca:	440b      	add	r3, r1
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	65a1      	str	r1, [r4, #88]	; 0x58
 800acd0:	f04f 0900 	mov.w	r9, #0
 800acd4:	e7de      	b.n	800ac94 <_printf_float+0x16c>
 800acd6:	b913      	cbnz	r3, 800acde <_printf_float+0x1b6>
 800acd8:	6822      	ldr	r2, [r4, #0]
 800acda:	07d2      	lsls	r2, r2, #31
 800acdc:	d501      	bpl.n	800ace2 <_printf_float+0x1ba>
 800acde:	3302      	adds	r3, #2
 800ace0:	e7f4      	b.n	800accc <_printf_float+0x1a4>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7f2      	b.n	800accc <_printf_float+0x1a4>
 800ace6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800acea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acec:	4299      	cmp	r1, r3
 800acee:	db05      	blt.n	800acfc <_printf_float+0x1d4>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	6121      	str	r1, [r4, #16]
 800acf4:	07d8      	lsls	r0, r3, #31
 800acf6:	d5ea      	bpl.n	800acce <_printf_float+0x1a6>
 800acf8:	1c4b      	adds	r3, r1, #1
 800acfa:	e7e7      	b.n	800accc <_printf_float+0x1a4>
 800acfc:	2900      	cmp	r1, #0
 800acfe:	bfd4      	ite	le
 800ad00:	f1c1 0202 	rsble	r2, r1, #2
 800ad04:	2201      	movgt	r2, #1
 800ad06:	4413      	add	r3, r2
 800ad08:	e7e0      	b.n	800accc <_printf_float+0x1a4>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	055a      	lsls	r2, r3, #21
 800ad0e:	d407      	bmi.n	800ad20 <_printf_float+0x1f8>
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	4642      	mov	r2, r8
 800ad14:	4631      	mov	r1, r6
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b8      	blx	r7
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	d12c      	bne.n	800ad78 <_printf_float+0x250>
 800ad1e:	e764      	b.n	800abea <_printf_float+0xc2>
 800ad20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad24:	f240 80e0 	bls.w	800aee8 <_printf_float+0x3c0>
 800ad28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f7f5 feda 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d034      	beq.n	800ada2 <_printf_float+0x27a>
 800ad38:	4a37      	ldr	r2, [pc, #220]	; (800ae18 <_printf_float+0x2f0>)
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b8      	blx	r7
 800ad42:	3001      	adds	r0, #1
 800ad44:	f43f af51 	beq.w	800abea <_printf_float+0xc2>
 800ad48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	db02      	blt.n	800ad56 <_printf_float+0x22e>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	07d8      	lsls	r0, r3, #31
 800ad54:	d510      	bpl.n	800ad78 <_printf_float+0x250>
 800ad56:	ee18 3a10 	vmov	r3, s16
 800ad5a:	4652      	mov	r2, sl
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4628      	mov	r0, r5
 800ad60:	47b8      	blx	r7
 800ad62:	3001      	adds	r0, #1
 800ad64:	f43f af41 	beq.w	800abea <_printf_float+0xc2>
 800ad68:	f04f 0800 	mov.w	r8, #0
 800ad6c:	f104 091a 	add.w	r9, r4, #26
 800ad70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad72:	3b01      	subs	r3, #1
 800ad74:	4543      	cmp	r3, r8
 800ad76:	dc09      	bgt.n	800ad8c <_printf_float+0x264>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	079b      	lsls	r3, r3, #30
 800ad7c:	f100 8105 	bmi.w	800af8a <_printf_float+0x462>
 800ad80:	68e0      	ldr	r0, [r4, #12]
 800ad82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad84:	4298      	cmp	r0, r3
 800ad86:	bfb8      	it	lt
 800ad88:	4618      	movlt	r0, r3
 800ad8a:	e730      	b.n	800abee <_printf_float+0xc6>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	464a      	mov	r2, r9
 800ad90:	4631      	mov	r1, r6
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	f43f af27 	beq.w	800abea <_printf_float+0xc2>
 800ad9c:	f108 0801 	add.w	r8, r8, #1
 800ada0:	e7e6      	b.n	800ad70 <_printf_float+0x248>
 800ada2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dc39      	bgt.n	800ae1c <_printf_float+0x2f4>
 800ada8:	4a1b      	ldr	r2, [pc, #108]	; (800ae18 <_printf_float+0x2f0>)
 800adaa:	2301      	movs	r3, #1
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	f43f af19 	beq.w	800abea <_printf_float+0xc2>
 800adb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adbc:	4313      	orrs	r3, r2
 800adbe:	d102      	bne.n	800adc6 <_printf_float+0x29e>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	d5d8      	bpl.n	800ad78 <_printf_float+0x250>
 800adc6:	ee18 3a10 	vmov	r3, s16
 800adca:	4652      	mov	r2, sl
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	47b8      	blx	r7
 800add2:	3001      	adds	r0, #1
 800add4:	f43f af09 	beq.w	800abea <_printf_float+0xc2>
 800add8:	f04f 0900 	mov.w	r9, #0
 800addc:	f104 0a1a 	add.w	sl, r4, #26
 800ade0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade2:	425b      	negs	r3, r3
 800ade4:	454b      	cmp	r3, r9
 800ade6:	dc01      	bgt.n	800adec <_printf_float+0x2c4>
 800ade8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adea:	e792      	b.n	800ad12 <_printf_float+0x1ea>
 800adec:	2301      	movs	r3, #1
 800adee:	4652      	mov	r2, sl
 800adf0:	4631      	mov	r1, r6
 800adf2:	4628      	mov	r0, r5
 800adf4:	47b8      	blx	r7
 800adf6:	3001      	adds	r0, #1
 800adf8:	f43f aef7 	beq.w	800abea <_printf_float+0xc2>
 800adfc:	f109 0901 	add.w	r9, r9, #1
 800ae00:	e7ee      	b.n	800ade0 <_printf_float+0x2b8>
 800ae02:	bf00      	nop
 800ae04:	7fefffff 	.word	0x7fefffff
 800ae08:	08010014 	.word	0x08010014
 800ae0c:	08010018 	.word	0x08010018
 800ae10:	08010020 	.word	0x08010020
 800ae14:	0801001c 	.word	0x0801001c
 800ae18:	08010024 	.word	0x08010024
 800ae1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae20:	429a      	cmp	r2, r3
 800ae22:	bfa8      	it	ge
 800ae24:	461a      	movge	r2, r3
 800ae26:	2a00      	cmp	r2, #0
 800ae28:	4691      	mov	r9, r2
 800ae2a:	dc37      	bgt.n	800ae9c <_printf_float+0x374>
 800ae2c:	f04f 0b00 	mov.w	fp, #0
 800ae30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae34:	f104 021a 	add.w	r2, r4, #26
 800ae38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae3a:	9305      	str	r3, [sp, #20]
 800ae3c:	eba3 0309 	sub.w	r3, r3, r9
 800ae40:	455b      	cmp	r3, fp
 800ae42:	dc33      	bgt.n	800aeac <_printf_float+0x384>
 800ae44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	db3b      	blt.n	800aec4 <_printf_float+0x39c>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	07da      	lsls	r2, r3, #31
 800ae50:	d438      	bmi.n	800aec4 <_printf_float+0x39c>
 800ae52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae54:	9b05      	ldr	r3, [sp, #20]
 800ae56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	eba2 0901 	sub.w	r9, r2, r1
 800ae5e:	4599      	cmp	r9, r3
 800ae60:	bfa8      	it	ge
 800ae62:	4699      	movge	r9, r3
 800ae64:	f1b9 0f00 	cmp.w	r9, #0
 800ae68:	dc35      	bgt.n	800aed6 <_printf_float+0x3ae>
 800ae6a:	f04f 0800 	mov.w	r8, #0
 800ae6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae72:	f104 0a1a 	add.w	sl, r4, #26
 800ae76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae7a:	1a9b      	subs	r3, r3, r2
 800ae7c:	eba3 0309 	sub.w	r3, r3, r9
 800ae80:	4543      	cmp	r3, r8
 800ae82:	f77f af79 	ble.w	800ad78 <_printf_float+0x250>
 800ae86:	2301      	movs	r3, #1
 800ae88:	4652      	mov	r2, sl
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	f43f aeaa 	beq.w	800abea <_printf_float+0xc2>
 800ae96:	f108 0801 	add.w	r8, r8, #1
 800ae9a:	e7ec      	b.n	800ae76 <_printf_float+0x34e>
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4642      	mov	r2, r8
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	d1c0      	bne.n	800ae2c <_printf_float+0x304>
 800aeaa:	e69e      	b.n	800abea <_printf_float+0xc2>
 800aeac:	2301      	movs	r3, #1
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	9205      	str	r2, [sp, #20]
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f43f ae97 	beq.w	800abea <_printf_float+0xc2>
 800aebc:	9a05      	ldr	r2, [sp, #20]
 800aebe:	f10b 0b01 	add.w	fp, fp, #1
 800aec2:	e7b9      	b.n	800ae38 <_printf_float+0x310>
 800aec4:	ee18 3a10 	vmov	r3, s16
 800aec8:	4652      	mov	r2, sl
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	d1be      	bne.n	800ae52 <_printf_float+0x32a>
 800aed4:	e689      	b.n	800abea <_printf_float+0xc2>
 800aed6:	9a05      	ldr	r2, [sp, #20]
 800aed8:	464b      	mov	r3, r9
 800aeda:	4442      	add	r2, r8
 800aedc:	4631      	mov	r1, r6
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	d1c1      	bne.n	800ae6a <_printf_float+0x342>
 800aee6:	e680      	b.n	800abea <_printf_float+0xc2>
 800aee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeea:	2a01      	cmp	r2, #1
 800aeec:	dc01      	bgt.n	800aef2 <_printf_float+0x3ca>
 800aeee:	07db      	lsls	r3, r3, #31
 800aef0:	d538      	bpl.n	800af64 <_printf_float+0x43c>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4642      	mov	r2, r8
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	f43f ae74 	beq.w	800abea <_printf_float+0xc2>
 800af02:	ee18 3a10 	vmov	r3, s16
 800af06:	4652      	mov	r2, sl
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f ae6b 	beq.w	800abea <_printf_float+0xc2>
 800af14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af18:	2200      	movs	r2, #0
 800af1a:	2300      	movs	r3, #0
 800af1c:	f7f5 fde4 	bl	8000ae8 <__aeabi_dcmpeq>
 800af20:	b9d8      	cbnz	r0, 800af5a <_printf_float+0x432>
 800af22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af24:	f108 0201 	add.w	r2, r8, #1
 800af28:	3b01      	subs	r3, #1
 800af2a:	4631      	mov	r1, r6
 800af2c:	4628      	mov	r0, r5
 800af2e:	47b8      	blx	r7
 800af30:	3001      	adds	r0, #1
 800af32:	d10e      	bne.n	800af52 <_printf_float+0x42a>
 800af34:	e659      	b.n	800abea <_printf_float+0xc2>
 800af36:	2301      	movs	r3, #1
 800af38:	4652      	mov	r2, sl
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	f43f ae52 	beq.w	800abea <_printf_float+0xc2>
 800af46:	f108 0801 	add.w	r8, r8, #1
 800af4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4543      	cmp	r3, r8
 800af50:	dcf1      	bgt.n	800af36 <_printf_float+0x40e>
 800af52:	464b      	mov	r3, r9
 800af54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af58:	e6dc      	b.n	800ad14 <_printf_float+0x1ec>
 800af5a:	f04f 0800 	mov.w	r8, #0
 800af5e:	f104 0a1a 	add.w	sl, r4, #26
 800af62:	e7f2      	b.n	800af4a <_printf_float+0x422>
 800af64:	2301      	movs	r3, #1
 800af66:	4642      	mov	r2, r8
 800af68:	e7df      	b.n	800af2a <_printf_float+0x402>
 800af6a:	2301      	movs	r3, #1
 800af6c:	464a      	mov	r2, r9
 800af6e:	4631      	mov	r1, r6
 800af70:	4628      	mov	r0, r5
 800af72:	47b8      	blx	r7
 800af74:	3001      	adds	r0, #1
 800af76:	f43f ae38 	beq.w	800abea <_printf_float+0xc2>
 800af7a:	f108 0801 	add.w	r8, r8, #1
 800af7e:	68e3      	ldr	r3, [r4, #12]
 800af80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af82:	1a5b      	subs	r3, r3, r1
 800af84:	4543      	cmp	r3, r8
 800af86:	dcf0      	bgt.n	800af6a <_printf_float+0x442>
 800af88:	e6fa      	b.n	800ad80 <_printf_float+0x258>
 800af8a:	f04f 0800 	mov.w	r8, #0
 800af8e:	f104 0919 	add.w	r9, r4, #25
 800af92:	e7f4      	b.n	800af7e <_printf_float+0x456>

0800af94 <_printf_common>:
 800af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	4616      	mov	r6, r2
 800af9a:	4699      	mov	r9, r3
 800af9c:	688a      	ldr	r2, [r1, #8]
 800af9e:	690b      	ldr	r3, [r1, #16]
 800afa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afa4:	4293      	cmp	r3, r2
 800afa6:	bfb8      	it	lt
 800afa8:	4613      	movlt	r3, r2
 800afaa:	6033      	str	r3, [r6, #0]
 800afac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afb0:	4607      	mov	r7, r0
 800afb2:	460c      	mov	r4, r1
 800afb4:	b10a      	cbz	r2, 800afba <_printf_common+0x26>
 800afb6:	3301      	adds	r3, #1
 800afb8:	6033      	str	r3, [r6, #0]
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	0699      	lsls	r1, r3, #26
 800afbe:	bf42      	ittt	mi
 800afc0:	6833      	ldrmi	r3, [r6, #0]
 800afc2:	3302      	addmi	r3, #2
 800afc4:	6033      	strmi	r3, [r6, #0]
 800afc6:	6825      	ldr	r5, [r4, #0]
 800afc8:	f015 0506 	ands.w	r5, r5, #6
 800afcc:	d106      	bne.n	800afdc <_printf_common+0x48>
 800afce:	f104 0a19 	add.w	sl, r4, #25
 800afd2:	68e3      	ldr	r3, [r4, #12]
 800afd4:	6832      	ldr	r2, [r6, #0]
 800afd6:	1a9b      	subs	r3, r3, r2
 800afd8:	42ab      	cmp	r3, r5
 800afda:	dc26      	bgt.n	800b02a <_printf_common+0x96>
 800afdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afe0:	1e13      	subs	r3, r2, #0
 800afe2:	6822      	ldr	r2, [r4, #0]
 800afe4:	bf18      	it	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	0692      	lsls	r2, r2, #26
 800afea:	d42b      	bmi.n	800b044 <_printf_common+0xb0>
 800afec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aff0:	4649      	mov	r1, r9
 800aff2:	4638      	mov	r0, r7
 800aff4:	47c0      	blx	r8
 800aff6:	3001      	adds	r0, #1
 800aff8:	d01e      	beq.n	800b038 <_printf_common+0xa4>
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	68e5      	ldr	r5, [r4, #12]
 800affe:	6832      	ldr	r2, [r6, #0]
 800b000:	f003 0306 	and.w	r3, r3, #6
 800b004:	2b04      	cmp	r3, #4
 800b006:	bf08      	it	eq
 800b008:	1aad      	subeq	r5, r5, r2
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	6922      	ldr	r2, [r4, #16]
 800b00e:	bf0c      	ite	eq
 800b010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b014:	2500      	movne	r5, #0
 800b016:	4293      	cmp	r3, r2
 800b018:	bfc4      	itt	gt
 800b01a:	1a9b      	subgt	r3, r3, r2
 800b01c:	18ed      	addgt	r5, r5, r3
 800b01e:	2600      	movs	r6, #0
 800b020:	341a      	adds	r4, #26
 800b022:	42b5      	cmp	r5, r6
 800b024:	d11a      	bne.n	800b05c <_printf_common+0xc8>
 800b026:	2000      	movs	r0, #0
 800b028:	e008      	b.n	800b03c <_printf_common+0xa8>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4652      	mov	r2, sl
 800b02e:	4649      	mov	r1, r9
 800b030:	4638      	mov	r0, r7
 800b032:	47c0      	blx	r8
 800b034:	3001      	adds	r0, #1
 800b036:	d103      	bne.n	800b040 <_printf_common+0xac>
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b040:	3501      	adds	r5, #1
 800b042:	e7c6      	b.n	800afd2 <_printf_common+0x3e>
 800b044:	18e1      	adds	r1, r4, r3
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	2030      	movs	r0, #48	; 0x30
 800b04a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b04e:	4422      	add	r2, r4
 800b050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b058:	3302      	adds	r3, #2
 800b05a:	e7c7      	b.n	800afec <_printf_common+0x58>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4622      	mov	r2, r4
 800b060:	4649      	mov	r1, r9
 800b062:	4638      	mov	r0, r7
 800b064:	47c0      	blx	r8
 800b066:	3001      	adds	r0, #1
 800b068:	d0e6      	beq.n	800b038 <_printf_common+0xa4>
 800b06a:	3601      	adds	r6, #1
 800b06c:	e7d9      	b.n	800b022 <_printf_common+0x8e>
	...

0800b070 <_printf_i>:
 800b070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	4691      	mov	r9, r2
 800b078:	7e27      	ldrb	r7, [r4, #24]
 800b07a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b07c:	2f78      	cmp	r7, #120	; 0x78
 800b07e:	4680      	mov	r8, r0
 800b080:	469a      	mov	sl, r3
 800b082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b086:	d807      	bhi.n	800b098 <_printf_i+0x28>
 800b088:	2f62      	cmp	r7, #98	; 0x62
 800b08a:	d80a      	bhi.n	800b0a2 <_printf_i+0x32>
 800b08c:	2f00      	cmp	r7, #0
 800b08e:	f000 80d8 	beq.w	800b242 <_printf_i+0x1d2>
 800b092:	2f58      	cmp	r7, #88	; 0x58
 800b094:	f000 80a3 	beq.w	800b1de <_printf_i+0x16e>
 800b098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0a0:	e03a      	b.n	800b118 <_printf_i+0xa8>
 800b0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0a6:	2b15      	cmp	r3, #21
 800b0a8:	d8f6      	bhi.n	800b098 <_printf_i+0x28>
 800b0aa:	a001      	add	r0, pc, #4	; (adr r0, 800b0b0 <_printf_i+0x40>)
 800b0ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b0b0:	0800b109 	.word	0x0800b109
 800b0b4:	0800b11d 	.word	0x0800b11d
 800b0b8:	0800b099 	.word	0x0800b099
 800b0bc:	0800b099 	.word	0x0800b099
 800b0c0:	0800b099 	.word	0x0800b099
 800b0c4:	0800b099 	.word	0x0800b099
 800b0c8:	0800b11d 	.word	0x0800b11d
 800b0cc:	0800b099 	.word	0x0800b099
 800b0d0:	0800b099 	.word	0x0800b099
 800b0d4:	0800b099 	.word	0x0800b099
 800b0d8:	0800b099 	.word	0x0800b099
 800b0dc:	0800b229 	.word	0x0800b229
 800b0e0:	0800b14d 	.word	0x0800b14d
 800b0e4:	0800b20b 	.word	0x0800b20b
 800b0e8:	0800b099 	.word	0x0800b099
 800b0ec:	0800b099 	.word	0x0800b099
 800b0f0:	0800b24b 	.word	0x0800b24b
 800b0f4:	0800b099 	.word	0x0800b099
 800b0f8:	0800b14d 	.word	0x0800b14d
 800b0fc:	0800b099 	.word	0x0800b099
 800b100:	0800b099 	.word	0x0800b099
 800b104:	0800b213 	.word	0x0800b213
 800b108:	680b      	ldr	r3, [r1, #0]
 800b10a:	1d1a      	adds	r2, r3, #4
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	600a      	str	r2, [r1, #0]
 800b110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b118:	2301      	movs	r3, #1
 800b11a:	e0a3      	b.n	800b264 <_printf_i+0x1f4>
 800b11c:	6825      	ldr	r5, [r4, #0]
 800b11e:	6808      	ldr	r0, [r1, #0]
 800b120:	062e      	lsls	r6, r5, #24
 800b122:	f100 0304 	add.w	r3, r0, #4
 800b126:	d50a      	bpl.n	800b13e <_printf_i+0xce>
 800b128:	6805      	ldr	r5, [r0, #0]
 800b12a:	600b      	str	r3, [r1, #0]
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	da03      	bge.n	800b138 <_printf_i+0xc8>
 800b130:	232d      	movs	r3, #45	; 0x2d
 800b132:	426d      	negs	r5, r5
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b138:	485e      	ldr	r0, [pc, #376]	; (800b2b4 <_printf_i+0x244>)
 800b13a:	230a      	movs	r3, #10
 800b13c:	e019      	b.n	800b172 <_printf_i+0x102>
 800b13e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b142:	6805      	ldr	r5, [r0, #0]
 800b144:	600b      	str	r3, [r1, #0]
 800b146:	bf18      	it	ne
 800b148:	b22d      	sxthne	r5, r5
 800b14a:	e7ef      	b.n	800b12c <_printf_i+0xbc>
 800b14c:	680b      	ldr	r3, [r1, #0]
 800b14e:	6825      	ldr	r5, [r4, #0]
 800b150:	1d18      	adds	r0, r3, #4
 800b152:	6008      	str	r0, [r1, #0]
 800b154:	0628      	lsls	r0, r5, #24
 800b156:	d501      	bpl.n	800b15c <_printf_i+0xec>
 800b158:	681d      	ldr	r5, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0xf2>
 800b15c:	0669      	lsls	r1, r5, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0xe8>
 800b160:	881d      	ldrh	r5, [r3, #0]
 800b162:	4854      	ldr	r0, [pc, #336]	; (800b2b4 <_printf_i+0x244>)
 800b164:	2f6f      	cmp	r7, #111	; 0x6f
 800b166:	bf0c      	ite	eq
 800b168:	2308      	moveq	r3, #8
 800b16a:	230a      	movne	r3, #10
 800b16c:	2100      	movs	r1, #0
 800b16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b172:	6866      	ldr	r6, [r4, #4]
 800b174:	60a6      	str	r6, [r4, #8]
 800b176:	2e00      	cmp	r6, #0
 800b178:	bfa2      	ittt	ge
 800b17a:	6821      	ldrge	r1, [r4, #0]
 800b17c:	f021 0104 	bicge.w	r1, r1, #4
 800b180:	6021      	strge	r1, [r4, #0]
 800b182:	b90d      	cbnz	r5, 800b188 <_printf_i+0x118>
 800b184:	2e00      	cmp	r6, #0
 800b186:	d04d      	beq.n	800b224 <_printf_i+0x1b4>
 800b188:	4616      	mov	r6, r2
 800b18a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b18e:	fb03 5711 	mls	r7, r3, r1, r5
 800b192:	5dc7      	ldrb	r7, [r0, r7]
 800b194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b198:	462f      	mov	r7, r5
 800b19a:	42bb      	cmp	r3, r7
 800b19c:	460d      	mov	r5, r1
 800b19e:	d9f4      	bls.n	800b18a <_printf_i+0x11a>
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d10b      	bne.n	800b1bc <_printf_i+0x14c>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	07df      	lsls	r7, r3, #31
 800b1a8:	d508      	bpl.n	800b1bc <_printf_i+0x14c>
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	6861      	ldr	r1, [r4, #4]
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	bfde      	ittt	le
 800b1b2:	2330      	movle	r3, #48	; 0x30
 800b1b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1bc:	1b92      	subs	r2, r2, r6
 800b1be:	6122      	str	r2, [r4, #16]
 800b1c0:	f8cd a000 	str.w	sl, [sp]
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	aa03      	add	r2, sp, #12
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	f7ff fee2 	bl	800af94 <_printf_common>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d14c      	bne.n	800b26e <_printf_i+0x1fe>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b004      	add	sp, #16
 800b1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1de:	4835      	ldr	r0, [pc, #212]	; (800b2b4 <_printf_i+0x244>)
 800b1e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	680e      	ldr	r6, [r1, #0]
 800b1e8:	061f      	lsls	r7, r3, #24
 800b1ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800b1ee:	600e      	str	r6, [r1, #0]
 800b1f0:	d514      	bpl.n	800b21c <_printf_i+0x1ac>
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	bf44      	itt	mi
 800b1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fa:	6023      	strmi	r3, [r4, #0]
 800b1fc:	b91d      	cbnz	r5, 800b206 <_printf_i+0x196>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f023 0320 	bic.w	r3, r3, #32
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	2310      	movs	r3, #16
 800b208:	e7b0      	b.n	800b16c <_printf_i+0xfc>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	f043 0320 	orr.w	r3, r3, #32
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	2378      	movs	r3, #120	; 0x78
 800b214:	4828      	ldr	r0, [pc, #160]	; (800b2b8 <_printf_i+0x248>)
 800b216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b21a:	e7e3      	b.n	800b1e4 <_printf_i+0x174>
 800b21c:	065e      	lsls	r6, r3, #25
 800b21e:	bf48      	it	mi
 800b220:	b2ad      	uxthmi	r5, r5
 800b222:	e7e6      	b.n	800b1f2 <_printf_i+0x182>
 800b224:	4616      	mov	r6, r2
 800b226:	e7bb      	b.n	800b1a0 <_printf_i+0x130>
 800b228:	680b      	ldr	r3, [r1, #0]
 800b22a:	6826      	ldr	r6, [r4, #0]
 800b22c:	6960      	ldr	r0, [r4, #20]
 800b22e:	1d1d      	adds	r5, r3, #4
 800b230:	600d      	str	r5, [r1, #0]
 800b232:	0635      	lsls	r5, r6, #24
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	d501      	bpl.n	800b23c <_printf_i+0x1cc>
 800b238:	6018      	str	r0, [r3, #0]
 800b23a:	e002      	b.n	800b242 <_printf_i+0x1d2>
 800b23c:	0671      	lsls	r1, r6, #25
 800b23e:	d5fb      	bpl.n	800b238 <_printf_i+0x1c8>
 800b240:	8018      	strh	r0, [r3, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	6123      	str	r3, [r4, #16]
 800b246:	4616      	mov	r6, r2
 800b248:	e7ba      	b.n	800b1c0 <_printf_i+0x150>
 800b24a:	680b      	ldr	r3, [r1, #0]
 800b24c:	1d1a      	adds	r2, r3, #4
 800b24e:	600a      	str	r2, [r1, #0]
 800b250:	681e      	ldr	r6, [r3, #0]
 800b252:	6862      	ldr	r2, [r4, #4]
 800b254:	2100      	movs	r1, #0
 800b256:	4630      	mov	r0, r6
 800b258:	f7f4 ffd2 	bl	8000200 <memchr>
 800b25c:	b108      	cbz	r0, 800b262 <_printf_i+0x1f2>
 800b25e:	1b80      	subs	r0, r0, r6
 800b260:	6060      	str	r0, [r4, #4]
 800b262:	6863      	ldr	r3, [r4, #4]
 800b264:	6123      	str	r3, [r4, #16]
 800b266:	2300      	movs	r3, #0
 800b268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b26c:	e7a8      	b.n	800b1c0 <_printf_i+0x150>
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	4632      	mov	r2, r6
 800b272:	4649      	mov	r1, r9
 800b274:	4640      	mov	r0, r8
 800b276:	47d0      	blx	sl
 800b278:	3001      	adds	r0, #1
 800b27a:	d0ab      	beq.n	800b1d4 <_printf_i+0x164>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	079b      	lsls	r3, r3, #30
 800b280:	d413      	bmi.n	800b2aa <_printf_i+0x23a>
 800b282:	68e0      	ldr	r0, [r4, #12]
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	4298      	cmp	r0, r3
 800b288:	bfb8      	it	lt
 800b28a:	4618      	movlt	r0, r3
 800b28c:	e7a4      	b.n	800b1d8 <_printf_i+0x168>
 800b28e:	2301      	movs	r3, #1
 800b290:	4632      	mov	r2, r6
 800b292:	4649      	mov	r1, r9
 800b294:	4640      	mov	r0, r8
 800b296:	47d0      	blx	sl
 800b298:	3001      	adds	r0, #1
 800b29a:	d09b      	beq.n	800b1d4 <_printf_i+0x164>
 800b29c:	3501      	adds	r5, #1
 800b29e:	68e3      	ldr	r3, [r4, #12]
 800b2a0:	9903      	ldr	r1, [sp, #12]
 800b2a2:	1a5b      	subs	r3, r3, r1
 800b2a4:	42ab      	cmp	r3, r5
 800b2a6:	dcf2      	bgt.n	800b28e <_printf_i+0x21e>
 800b2a8:	e7eb      	b.n	800b282 <_printf_i+0x212>
 800b2aa:	2500      	movs	r5, #0
 800b2ac:	f104 0619 	add.w	r6, r4, #25
 800b2b0:	e7f5      	b.n	800b29e <_printf_i+0x22e>
 800b2b2:	bf00      	nop
 800b2b4:	08010026 	.word	0x08010026
 800b2b8:	08010037 	.word	0x08010037

0800b2bc <iprintf>:
 800b2bc:	b40f      	push	{r0, r1, r2, r3}
 800b2be:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <iprintf+0x2c>)
 800b2c0:	b513      	push	{r0, r1, r4, lr}
 800b2c2:	681c      	ldr	r4, [r3, #0]
 800b2c4:	b124      	cbz	r4, 800b2d0 <iprintf+0x14>
 800b2c6:	69a3      	ldr	r3, [r4, #24]
 800b2c8:	b913      	cbnz	r3, 800b2d0 <iprintf+0x14>
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f001 f862 	bl	800c394 <__sinit>
 800b2d0:	ab05      	add	r3, sp, #20
 800b2d2:	9a04      	ldr	r2, [sp, #16]
 800b2d4:	68a1      	ldr	r1, [r4, #8]
 800b2d6:	9301      	str	r3, [sp, #4]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f001 fdcf 	bl	800ce7c <_vfiprintf_r>
 800b2de:	b002      	add	sp, #8
 800b2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e4:	b004      	add	sp, #16
 800b2e6:	4770      	bx	lr
 800b2e8:	20000064 	.word	0x20000064

0800b2ec <__swbuf_r>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	460e      	mov	r6, r1
 800b2f0:	4614      	mov	r4, r2
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	b118      	cbz	r0, 800b2fe <__swbuf_r+0x12>
 800b2f6:	6983      	ldr	r3, [r0, #24]
 800b2f8:	b90b      	cbnz	r3, 800b2fe <__swbuf_r+0x12>
 800b2fa:	f001 f84b 	bl	800c394 <__sinit>
 800b2fe:	4b21      	ldr	r3, [pc, #132]	; (800b384 <__swbuf_r+0x98>)
 800b300:	429c      	cmp	r4, r3
 800b302:	d12b      	bne.n	800b35c <__swbuf_r+0x70>
 800b304:	686c      	ldr	r4, [r5, #4]
 800b306:	69a3      	ldr	r3, [r4, #24]
 800b308:	60a3      	str	r3, [r4, #8]
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	071a      	lsls	r2, r3, #28
 800b30e:	d52f      	bpl.n	800b370 <__swbuf_r+0x84>
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	b36b      	cbz	r3, 800b370 <__swbuf_r+0x84>
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	6820      	ldr	r0, [r4, #0]
 800b318:	1ac0      	subs	r0, r0, r3
 800b31a:	6963      	ldr	r3, [r4, #20]
 800b31c:	b2f6      	uxtb	r6, r6
 800b31e:	4283      	cmp	r3, r0
 800b320:	4637      	mov	r7, r6
 800b322:	dc04      	bgt.n	800b32e <__swbuf_r+0x42>
 800b324:	4621      	mov	r1, r4
 800b326:	4628      	mov	r0, r5
 800b328:	f000 ffa0 	bl	800c26c <_fflush_r>
 800b32c:	bb30      	cbnz	r0, 800b37c <__swbuf_r+0x90>
 800b32e:	68a3      	ldr	r3, [r4, #8]
 800b330:	3b01      	subs	r3, #1
 800b332:	60a3      	str	r3, [r4, #8]
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	1c5a      	adds	r2, r3, #1
 800b338:	6022      	str	r2, [r4, #0]
 800b33a:	701e      	strb	r6, [r3, #0]
 800b33c:	6963      	ldr	r3, [r4, #20]
 800b33e:	3001      	adds	r0, #1
 800b340:	4283      	cmp	r3, r0
 800b342:	d004      	beq.n	800b34e <__swbuf_r+0x62>
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	07db      	lsls	r3, r3, #31
 800b348:	d506      	bpl.n	800b358 <__swbuf_r+0x6c>
 800b34a:	2e0a      	cmp	r6, #10
 800b34c:	d104      	bne.n	800b358 <__swbuf_r+0x6c>
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f000 ff8b 	bl	800c26c <_fflush_r>
 800b356:	b988      	cbnz	r0, 800b37c <__swbuf_r+0x90>
 800b358:	4638      	mov	r0, r7
 800b35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b35c:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <__swbuf_r+0x9c>)
 800b35e:	429c      	cmp	r4, r3
 800b360:	d101      	bne.n	800b366 <__swbuf_r+0x7a>
 800b362:	68ac      	ldr	r4, [r5, #8]
 800b364:	e7cf      	b.n	800b306 <__swbuf_r+0x1a>
 800b366:	4b09      	ldr	r3, [pc, #36]	; (800b38c <__swbuf_r+0xa0>)
 800b368:	429c      	cmp	r4, r3
 800b36a:	bf08      	it	eq
 800b36c:	68ec      	ldreq	r4, [r5, #12]
 800b36e:	e7ca      	b.n	800b306 <__swbuf_r+0x1a>
 800b370:	4621      	mov	r1, r4
 800b372:	4628      	mov	r0, r5
 800b374:	f000 f80c 	bl	800b390 <__swsetup_r>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d0cb      	beq.n	800b314 <__swbuf_r+0x28>
 800b37c:	f04f 37ff 	mov.w	r7, #4294967295
 800b380:	e7ea      	b.n	800b358 <__swbuf_r+0x6c>
 800b382:	bf00      	nop
 800b384:	080100fc 	.word	0x080100fc
 800b388:	0801011c 	.word	0x0801011c
 800b38c:	080100dc 	.word	0x080100dc

0800b390 <__swsetup_r>:
 800b390:	4b32      	ldr	r3, [pc, #200]	; (800b45c <__swsetup_r+0xcc>)
 800b392:	b570      	push	{r4, r5, r6, lr}
 800b394:	681d      	ldr	r5, [r3, #0]
 800b396:	4606      	mov	r6, r0
 800b398:	460c      	mov	r4, r1
 800b39a:	b125      	cbz	r5, 800b3a6 <__swsetup_r+0x16>
 800b39c:	69ab      	ldr	r3, [r5, #24]
 800b39e:	b913      	cbnz	r3, 800b3a6 <__swsetup_r+0x16>
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	f000 fff7 	bl	800c394 <__sinit>
 800b3a6:	4b2e      	ldr	r3, [pc, #184]	; (800b460 <__swsetup_r+0xd0>)
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	d10f      	bne.n	800b3cc <__swsetup_r+0x3c>
 800b3ac:	686c      	ldr	r4, [r5, #4]
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3b4:	0719      	lsls	r1, r3, #28
 800b3b6:	d42c      	bmi.n	800b412 <__swsetup_r+0x82>
 800b3b8:	06dd      	lsls	r5, r3, #27
 800b3ba:	d411      	bmi.n	800b3e0 <__swsetup_r+0x50>
 800b3bc:	2309      	movs	r3, #9
 800b3be:	6033      	str	r3, [r6, #0]
 800b3c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	e03e      	b.n	800b44a <__swsetup_r+0xba>
 800b3cc:	4b25      	ldr	r3, [pc, #148]	; (800b464 <__swsetup_r+0xd4>)
 800b3ce:	429c      	cmp	r4, r3
 800b3d0:	d101      	bne.n	800b3d6 <__swsetup_r+0x46>
 800b3d2:	68ac      	ldr	r4, [r5, #8]
 800b3d4:	e7eb      	b.n	800b3ae <__swsetup_r+0x1e>
 800b3d6:	4b24      	ldr	r3, [pc, #144]	; (800b468 <__swsetup_r+0xd8>)
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	bf08      	it	eq
 800b3dc:	68ec      	ldreq	r4, [r5, #12]
 800b3de:	e7e6      	b.n	800b3ae <__swsetup_r+0x1e>
 800b3e0:	0758      	lsls	r0, r3, #29
 800b3e2:	d512      	bpl.n	800b40a <__swsetup_r+0x7a>
 800b3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3e6:	b141      	cbz	r1, 800b3fa <__swsetup_r+0x6a>
 800b3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	d002      	beq.n	800b3f6 <__swsetup_r+0x66>
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f001 fc6f 	bl	800ccd4 <_free_r>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	6363      	str	r3, [r4, #52]	; 0x34
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b400:	81a3      	strh	r3, [r4, #12]
 800b402:	2300      	movs	r3, #0
 800b404:	6063      	str	r3, [r4, #4]
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f043 0308 	orr.w	r3, r3, #8
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	b94b      	cbnz	r3, 800b42a <__swsetup_r+0x9a>
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b420:	d003      	beq.n	800b42a <__swsetup_r+0x9a>
 800b422:	4621      	mov	r1, r4
 800b424:	4630      	mov	r0, r6
 800b426:	f001 f87f 	bl	800c528 <__smakebuf_r>
 800b42a:	89a0      	ldrh	r0, [r4, #12]
 800b42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b430:	f010 0301 	ands.w	r3, r0, #1
 800b434:	d00a      	beq.n	800b44c <__swsetup_r+0xbc>
 800b436:	2300      	movs	r3, #0
 800b438:	60a3      	str	r3, [r4, #8]
 800b43a:	6963      	ldr	r3, [r4, #20]
 800b43c:	425b      	negs	r3, r3
 800b43e:	61a3      	str	r3, [r4, #24]
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	b943      	cbnz	r3, 800b456 <__swsetup_r+0xc6>
 800b444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b448:	d1ba      	bne.n	800b3c0 <__swsetup_r+0x30>
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	0781      	lsls	r1, r0, #30
 800b44e:	bf58      	it	pl
 800b450:	6963      	ldrpl	r3, [r4, #20]
 800b452:	60a3      	str	r3, [r4, #8]
 800b454:	e7f4      	b.n	800b440 <__swsetup_r+0xb0>
 800b456:	2000      	movs	r0, #0
 800b458:	e7f7      	b.n	800b44a <__swsetup_r+0xba>
 800b45a:	bf00      	nop
 800b45c:	20000064 	.word	0x20000064
 800b460:	080100fc 	.word	0x080100fc
 800b464:	0801011c 	.word	0x0801011c
 800b468:	080100dc 	.word	0x080100dc

0800b46c <quorem>:
 800b46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	6903      	ldr	r3, [r0, #16]
 800b472:	690c      	ldr	r4, [r1, #16]
 800b474:	42a3      	cmp	r3, r4
 800b476:	4607      	mov	r7, r0
 800b478:	f2c0 8081 	blt.w	800b57e <quorem+0x112>
 800b47c:	3c01      	subs	r4, #1
 800b47e:	f101 0814 	add.w	r8, r1, #20
 800b482:	f100 0514 	add.w	r5, r0, #20
 800b486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b494:	3301      	adds	r3, #1
 800b496:	429a      	cmp	r2, r3
 800b498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b49c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4a4:	d331      	bcc.n	800b50a <quorem+0x9e>
 800b4a6:	f04f 0e00 	mov.w	lr, #0
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	46ac      	mov	ip, r5
 800b4ae:	46f2      	mov	sl, lr
 800b4b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4b4:	b293      	uxth	r3, r2
 800b4b6:	fb06 e303 	mla	r3, r6, r3, lr
 800b4ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	ebaa 0303 	sub.w	r3, sl, r3
 800b4c4:	0c12      	lsrs	r2, r2, #16
 800b4c6:	f8dc a000 	ldr.w	sl, [ip]
 800b4ca:	fb06 e202 	mla	r2, r6, r2, lr
 800b4ce:	fa13 f38a 	uxtah	r3, r3, sl
 800b4d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4d6:	fa1f fa82 	uxth.w	sl, r2
 800b4da:	f8dc 2000 	ldr.w	r2, [ip]
 800b4de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b4e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4ec:	4581      	cmp	r9, r0
 800b4ee:	f84c 3b04 	str.w	r3, [ip], #4
 800b4f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4f6:	d2db      	bcs.n	800b4b0 <quorem+0x44>
 800b4f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4fc:	b92b      	cbnz	r3, 800b50a <quorem+0x9e>
 800b4fe:	9b01      	ldr	r3, [sp, #4]
 800b500:	3b04      	subs	r3, #4
 800b502:	429d      	cmp	r5, r3
 800b504:	461a      	mov	r2, r3
 800b506:	d32e      	bcc.n	800b566 <quorem+0xfa>
 800b508:	613c      	str	r4, [r7, #16]
 800b50a:	4638      	mov	r0, r7
 800b50c:	f001 fad2 	bl	800cab4 <__mcmp>
 800b510:	2800      	cmp	r0, #0
 800b512:	db24      	blt.n	800b55e <quorem+0xf2>
 800b514:	3601      	adds	r6, #1
 800b516:	4628      	mov	r0, r5
 800b518:	f04f 0c00 	mov.w	ip, #0
 800b51c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b520:	f8d0 e000 	ldr.w	lr, [r0]
 800b524:	b293      	uxth	r3, r2
 800b526:	ebac 0303 	sub.w	r3, ip, r3
 800b52a:	0c12      	lsrs	r2, r2, #16
 800b52c:	fa13 f38e 	uxtah	r3, r3, lr
 800b530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b538:	b29b      	uxth	r3, r3
 800b53a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b53e:	45c1      	cmp	r9, r8
 800b540:	f840 3b04 	str.w	r3, [r0], #4
 800b544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b548:	d2e8      	bcs.n	800b51c <quorem+0xb0>
 800b54a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b54e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b552:	b922      	cbnz	r2, 800b55e <quorem+0xf2>
 800b554:	3b04      	subs	r3, #4
 800b556:	429d      	cmp	r5, r3
 800b558:	461a      	mov	r2, r3
 800b55a:	d30a      	bcc.n	800b572 <quorem+0x106>
 800b55c:	613c      	str	r4, [r7, #16]
 800b55e:	4630      	mov	r0, r6
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	6812      	ldr	r2, [r2, #0]
 800b568:	3b04      	subs	r3, #4
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	d1cc      	bne.n	800b508 <quorem+0x9c>
 800b56e:	3c01      	subs	r4, #1
 800b570:	e7c7      	b.n	800b502 <quorem+0x96>
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	3b04      	subs	r3, #4
 800b576:	2a00      	cmp	r2, #0
 800b578:	d1f0      	bne.n	800b55c <quorem+0xf0>
 800b57a:	3c01      	subs	r4, #1
 800b57c:	e7eb      	b.n	800b556 <quorem+0xea>
 800b57e:	2000      	movs	r0, #0
 800b580:	e7ee      	b.n	800b560 <quorem+0xf4>
 800b582:	0000      	movs	r0, r0
 800b584:	0000      	movs	r0, r0
	...

0800b588 <_dtoa_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	ed2d 8b02 	vpush	{d8}
 800b590:	ec57 6b10 	vmov	r6, r7, d0
 800b594:	b095      	sub	sp, #84	; 0x54
 800b596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b59c:	9105      	str	r1, [sp, #20]
 800b59e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5a8:	b975      	cbnz	r5, 800b5c8 <_dtoa_r+0x40>
 800b5aa:	2010      	movs	r0, #16
 800b5ac:	f000 fffc 	bl	800c5a8 <malloc>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	6260      	str	r0, [r4, #36]	; 0x24
 800b5b4:	b920      	cbnz	r0, 800b5c0 <_dtoa_r+0x38>
 800b5b6:	4bb2      	ldr	r3, [pc, #712]	; (800b880 <_dtoa_r+0x2f8>)
 800b5b8:	21ea      	movs	r1, #234	; 0xea
 800b5ba:	48b2      	ldr	r0, [pc, #712]	; (800b884 <_dtoa_r+0x2fc>)
 800b5bc:	f001 fdf4 	bl	800d1a8 <__assert_func>
 800b5c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5c4:	6005      	str	r5, [r0, #0]
 800b5c6:	60c5      	str	r5, [r0, #12]
 800b5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ca:	6819      	ldr	r1, [r3, #0]
 800b5cc:	b151      	cbz	r1, 800b5e4 <_dtoa_r+0x5c>
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	604a      	str	r2, [r1, #4]
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	4093      	lsls	r3, r2
 800b5d6:	608b      	str	r3, [r1, #8]
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f001 f82d 	bl	800c638 <_Bfree>
 800b5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	1e3b      	subs	r3, r7, #0
 800b5e6:	bfb9      	ittee	lt
 800b5e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5ec:	9303      	strlt	r3, [sp, #12]
 800b5ee:	2300      	movge	r3, #0
 800b5f0:	f8c8 3000 	strge.w	r3, [r8]
 800b5f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b5f8:	4ba3      	ldr	r3, [pc, #652]	; (800b888 <_dtoa_r+0x300>)
 800b5fa:	bfbc      	itt	lt
 800b5fc:	2201      	movlt	r2, #1
 800b5fe:	f8c8 2000 	strlt.w	r2, [r8]
 800b602:	ea33 0309 	bics.w	r3, r3, r9
 800b606:	d11b      	bne.n	800b640 <_dtoa_r+0xb8>
 800b608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b60a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b614:	4333      	orrs	r3, r6
 800b616:	f000 857a 	beq.w	800c10e <_dtoa_r+0xb86>
 800b61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b61c:	b963      	cbnz	r3, 800b638 <_dtoa_r+0xb0>
 800b61e:	4b9b      	ldr	r3, [pc, #620]	; (800b88c <_dtoa_r+0x304>)
 800b620:	e024      	b.n	800b66c <_dtoa_r+0xe4>
 800b622:	4b9b      	ldr	r3, [pc, #620]	; (800b890 <_dtoa_r+0x308>)
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	3308      	adds	r3, #8
 800b628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	9800      	ldr	r0, [sp, #0]
 800b62e:	b015      	add	sp, #84	; 0x54
 800b630:	ecbd 8b02 	vpop	{d8}
 800b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b638:	4b94      	ldr	r3, [pc, #592]	; (800b88c <_dtoa_r+0x304>)
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	3303      	adds	r3, #3
 800b63e:	e7f3      	b.n	800b628 <_dtoa_r+0xa0>
 800b640:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	ec51 0b17 	vmov	r0, r1, d7
 800b64a:	2300      	movs	r3, #0
 800b64c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b650:	f7f5 fa4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800b654:	4680      	mov	r8, r0
 800b656:	b158      	cbz	r0, 800b670 <_dtoa_r+0xe8>
 800b658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b65a:	2301      	movs	r3, #1
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 8551 	beq.w	800c108 <_dtoa_r+0xb80>
 800b666:	488b      	ldr	r0, [pc, #556]	; (800b894 <_dtoa_r+0x30c>)
 800b668:	6018      	str	r0, [r3, #0]
 800b66a:	1e43      	subs	r3, r0, #1
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	e7dd      	b.n	800b62c <_dtoa_r+0xa4>
 800b670:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b674:	aa12      	add	r2, sp, #72	; 0x48
 800b676:	a913      	add	r1, sp, #76	; 0x4c
 800b678:	4620      	mov	r0, r4
 800b67a:	f001 fabf 	bl	800cbfc <__d2b>
 800b67e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b682:	4683      	mov	fp, r0
 800b684:	2d00      	cmp	r5, #0
 800b686:	d07c      	beq.n	800b782 <_dtoa_r+0x1fa>
 800b688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b68a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b692:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b696:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b69a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b69e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6a2:	4b7d      	ldr	r3, [pc, #500]	; (800b898 <_dtoa_r+0x310>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f4 fdfd 	bl	80002a8 <__aeabi_dsub>
 800b6ae:	a36e      	add	r3, pc, #440	; (adr r3, 800b868 <_dtoa_r+0x2e0>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 ffb0 	bl	8000618 <__aeabi_dmul>
 800b6b8:	a36d      	add	r3, pc, #436	; (adr r3, 800b870 <_dtoa_r+0x2e8>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 fdf5 	bl	80002ac <__adddf3>
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	460f      	mov	r7, r1
 800b6c8:	f7f4 ff3c 	bl	8000544 <__aeabi_i2d>
 800b6cc:	a36a      	add	r3, pc, #424	; (adr r3, 800b878 <_dtoa_r+0x2f0>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f7f4 ffa1 	bl	8000618 <__aeabi_dmul>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4630      	mov	r0, r6
 800b6dc:	4639      	mov	r1, r7
 800b6de:	f7f4 fde5 	bl	80002ac <__adddf3>
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	f7f5 fa47 	bl	8000b78 <__aeabi_d2iz>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f5 fa02 	bl	8000afc <__aeabi_dcmplt>
 800b6f8:	b148      	cbz	r0, 800b70e <_dtoa_r+0x186>
 800b6fa:	4650      	mov	r0, sl
 800b6fc:	f7f4 ff22 	bl	8000544 <__aeabi_i2d>
 800b700:	4632      	mov	r2, r6
 800b702:	463b      	mov	r3, r7
 800b704:	f7f5 f9f0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b708:	b908      	cbnz	r0, 800b70e <_dtoa_r+0x186>
 800b70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b70e:	f1ba 0f16 	cmp.w	sl, #22
 800b712:	d854      	bhi.n	800b7be <_dtoa_r+0x236>
 800b714:	4b61      	ldr	r3, [pc, #388]	; (800b89c <_dtoa_r+0x314>)
 800b716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b722:	f7f5 f9eb 	bl	8000afc <__aeabi_dcmplt>
 800b726:	2800      	cmp	r0, #0
 800b728:	d04b      	beq.n	800b7c2 <_dtoa_r+0x23a>
 800b72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b72e:	2300      	movs	r3, #0
 800b730:	930e      	str	r3, [sp, #56]	; 0x38
 800b732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b734:	1b5d      	subs	r5, r3, r5
 800b736:	1e6b      	subs	r3, r5, #1
 800b738:	9304      	str	r3, [sp, #16]
 800b73a:	bf43      	ittte	mi
 800b73c:	2300      	movmi	r3, #0
 800b73e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b742:	9304      	strmi	r3, [sp, #16]
 800b744:	f04f 0800 	movpl.w	r8, #0
 800b748:	f1ba 0f00 	cmp.w	sl, #0
 800b74c:	db3b      	blt.n	800b7c6 <_dtoa_r+0x23e>
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b754:	4453      	add	r3, sl
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	2300      	movs	r3, #0
 800b75a:	9306      	str	r3, [sp, #24]
 800b75c:	9b05      	ldr	r3, [sp, #20]
 800b75e:	2b09      	cmp	r3, #9
 800b760:	d869      	bhi.n	800b836 <_dtoa_r+0x2ae>
 800b762:	2b05      	cmp	r3, #5
 800b764:	bfc4      	itt	gt
 800b766:	3b04      	subgt	r3, #4
 800b768:	9305      	strgt	r3, [sp, #20]
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	f1a3 0302 	sub.w	r3, r3, #2
 800b770:	bfcc      	ite	gt
 800b772:	2500      	movgt	r5, #0
 800b774:	2501      	movle	r5, #1
 800b776:	2b03      	cmp	r3, #3
 800b778:	d869      	bhi.n	800b84e <_dtoa_r+0x2c6>
 800b77a:	e8df f003 	tbb	[pc, r3]
 800b77e:	4e2c      	.short	0x4e2c
 800b780:	5a4c      	.short	0x5a4c
 800b782:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b786:	441d      	add	r5, r3
 800b788:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	bfc1      	itttt	gt
 800b790:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b794:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b798:	fa09 f303 	lslgt.w	r3, r9, r3
 800b79c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7a0:	bfda      	itte	le
 800b7a2:	f1c3 0320 	rsble	r3, r3, #32
 800b7a6:	fa06 f003 	lslle.w	r0, r6, r3
 800b7aa:	4318      	orrgt	r0, r3
 800b7ac:	f7f4 feba 	bl	8000524 <__aeabi_ui2d>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7b8:	3d01      	subs	r5, #1
 800b7ba:	9310      	str	r3, [sp, #64]	; 0x40
 800b7bc:	e771      	b.n	800b6a2 <_dtoa_r+0x11a>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e7b6      	b.n	800b730 <_dtoa_r+0x1a8>
 800b7c2:	900e      	str	r0, [sp, #56]	; 0x38
 800b7c4:	e7b5      	b.n	800b732 <_dtoa_r+0x1aa>
 800b7c6:	f1ca 0300 	rsb	r3, sl, #0
 800b7ca:	9306      	str	r3, [sp, #24]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	eba8 080a 	sub.w	r8, r8, sl
 800b7d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7d4:	e7c2      	b.n	800b75c <_dtoa_r+0x1d4>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9308      	str	r3, [sp, #32]
 800b7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dc39      	bgt.n	800b854 <_dtoa_r+0x2cc>
 800b7e0:	f04f 0901 	mov.w	r9, #1
 800b7e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7e8:	464b      	mov	r3, r9
 800b7ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b7ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	6042      	str	r2, [r0, #4]
 800b7f4:	2204      	movs	r2, #4
 800b7f6:	f102 0614 	add.w	r6, r2, #20
 800b7fa:	429e      	cmp	r6, r3
 800b7fc:	6841      	ldr	r1, [r0, #4]
 800b7fe:	d92f      	bls.n	800b860 <_dtoa_r+0x2d8>
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fed9 	bl	800c5b8 <_Balloc>
 800b806:	9000      	str	r0, [sp, #0]
 800b808:	2800      	cmp	r0, #0
 800b80a:	d14b      	bne.n	800b8a4 <_dtoa_r+0x31c>
 800b80c:	4b24      	ldr	r3, [pc, #144]	; (800b8a0 <_dtoa_r+0x318>)
 800b80e:	4602      	mov	r2, r0
 800b810:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b814:	e6d1      	b.n	800b5ba <_dtoa_r+0x32>
 800b816:	2301      	movs	r3, #1
 800b818:	e7de      	b.n	800b7d8 <_dtoa_r+0x250>
 800b81a:	2300      	movs	r3, #0
 800b81c:	9308      	str	r3, [sp, #32]
 800b81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b820:	eb0a 0903 	add.w	r9, sl, r3
 800b824:	f109 0301 	add.w	r3, r9, #1
 800b828:	2b01      	cmp	r3, #1
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	bfb8      	it	lt
 800b82e:	2301      	movlt	r3, #1
 800b830:	e7dd      	b.n	800b7ee <_dtoa_r+0x266>
 800b832:	2301      	movs	r3, #1
 800b834:	e7f2      	b.n	800b81c <_dtoa_r+0x294>
 800b836:	2501      	movs	r5, #1
 800b838:	2300      	movs	r3, #0
 800b83a:	9305      	str	r3, [sp, #20]
 800b83c:	9508      	str	r5, [sp, #32]
 800b83e:	f04f 39ff 	mov.w	r9, #4294967295
 800b842:	2200      	movs	r2, #0
 800b844:	f8cd 9004 	str.w	r9, [sp, #4]
 800b848:	2312      	movs	r3, #18
 800b84a:	9209      	str	r2, [sp, #36]	; 0x24
 800b84c:	e7cf      	b.n	800b7ee <_dtoa_r+0x266>
 800b84e:	2301      	movs	r3, #1
 800b850:	9308      	str	r3, [sp, #32]
 800b852:	e7f4      	b.n	800b83e <_dtoa_r+0x2b6>
 800b854:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b858:	f8cd 9004 	str.w	r9, [sp, #4]
 800b85c:	464b      	mov	r3, r9
 800b85e:	e7c6      	b.n	800b7ee <_dtoa_r+0x266>
 800b860:	3101      	adds	r1, #1
 800b862:	6041      	str	r1, [r0, #4]
 800b864:	0052      	lsls	r2, r2, #1
 800b866:	e7c6      	b.n	800b7f6 <_dtoa_r+0x26e>
 800b868:	636f4361 	.word	0x636f4361
 800b86c:	3fd287a7 	.word	0x3fd287a7
 800b870:	8b60c8b3 	.word	0x8b60c8b3
 800b874:	3fc68a28 	.word	0x3fc68a28
 800b878:	509f79fb 	.word	0x509f79fb
 800b87c:	3fd34413 	.word	0x3fd34413
 800b880:	08010055 	.word	0x08010055
 800b884:	0801006c 	.word	0x0801006c
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	08010051 	.word	0x08010051
 800b890:	08010048 	.word	0x08010048
 800b894:	08010025 	.word	0x08010025
 800b898:	3ff80000 	.word	0x3ff80000
 800b89c:	080101c8 	.word	0x080101c8
 800b8a0:	080100cb 	.word	0x080100cb
 800b8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a6:	9a00      	ldr	r2, [sp, #0]
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	9b01      	ldr	r3, [sp, #4]
 800b8ac:	2b0e      	cmp	r3, #14
 800b8ae:	f200 80ad 	bhi.w	800ba0c <_dtoa_r+0x484>
 800b8b2:	2d00      	cmp	r5, #0
 800b8b4:	f000 80aa 	beq.w	800ba0c <_dtoa_r+0x484>
 800b8b8:	f1ba 0f00 	cmp.w	sl, #0
 800b8bc:	dd36      	ble.n	800b92c <_dtoa_r+0x3a4>
 800b8be:	4ac3      	ldr	r2, [pc, #780]	; (800bbcc <_dtoa_r+0x644>)
 800b8c0:	f00a 030f 	and.w	r3, sl, #15
 800b8c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8c8:	ed93 7b00 	vldr	d7, [r3]
 800b8cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b8d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b8d4:	eeb0 8a47 	vmov.f32	s16, s14
 800b8d8:	eef0 8a67 	vmov.f32	s17, s15
 800b8dc:	d016      	beq.n	800b90c <_dtoa_r+0x384>
 800b8de:	4bbc      	ldr	r3, [pc, #752]	; (800bbd0 <_dtoa_r+0x648>)
 800b8e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8e8:	f7f4 ffc0 	bl	800086c <__aeabi_ddiv>
 800b8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8f0:	f007 070f 	and.w	r7, r7, #15
 800b8f4:	2503      	movs	r5, #3
 800b8f6:	4eb6      	ldr	r6, [pc, #728]	; (800bbd0 <_dtoa_r+0x648>)
 800b8f8:	b957      	cbnz	r7, 800b910 <_dtoa_r+0x388>
 800b8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8fe:	ec53 2b18 	vmov	r2, r3, d8
 800b902:	f7f4 ffb3 	bl	800086c <__aeabi_ddiv>
 800b906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b90a:	e029      	b.n	800b960 <_dtoa_r+0x3d8>
 800b90c:	2502      	movs	r5, #2
 800b90e:	e7f2      	b.n	800b8f6 <_dtoa_r+0x36e>
 800b910:	07f9      	lsls	r1, r7, #31
 800b912:	d508      	bpl.n	800b926 <_dtoa_r+0x39e>
 800b914:	ec51 0b18 	vmov	r0, r1, d8
 800b918:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b91c:	f7f4 fe7c 	bl	8000618 <__aeabi_dmul>
 800b920:	ec41 0b18 	vmov	d8, r0, r1
 800b924:	3501      	adds	r5, #1
 800b926:	107f      	asrs	r7, r7, #1
 800b928:	3608      	adds	r6, #8
 800b92a:	e7e5      	b.n	800b8f8 <_dtoa_r+0x370>
 800b92c:	f000 80a6 	beq.w	800ba7c <_dtoa_r+0x4f4>
 800b930:	f1ca 0600 	rsb	r6, sl, #0
 800b934:	4ba5      	ldr	r3, [pc, #660]	; (800bbcc <_dtoa_r+0x644>)
 800b936:	4fa6      	ldr	r7, [pc, #664]	; (800bbd0 <_dtoa_r+0x648>)
 800b938:	f006 020f 	and.w	r2, r6, #15
 800b93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b948:	f7f4 fe66 	bl	8000618 <__aeabi_dmul>
 800b94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b950:	1136      	asrs	r6, r6, #4
 800b952:	2300      	movs	r3, #0
 800b954:	2502      	movs	r5, #2
 800b956:	2e00      	cmp	r6, #0
 800b958:	f040 8085 	bne.w	800ba66 <_dtoa_r+0x4de>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1d2      	bne.n	800b906 <_dtoa_r+0x37e>
 800b960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 808c 	beq.w	800ba80 <_dtoa_r+0x4f8>
 800b968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b96c:	4b99      	ldr	r3, [pc, #612]	; (800bbd4 <_dtoa_r+0x64c>)
 800b96e:	2200      	movs	r2, #0
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f8c2 	bl	8000afc <__aeabi_dcmplt>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f000 8081 	beq.w	800ba80 <_dtoa_r+0x4f8>
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d07d      	beq.n	800ba80 <_dtoa_r+0x4f8>
 800b984:	f1b9 0f00 	cmp.w	r9, #0
 800b988:	dd3c      	ble.n	800ba04 <_dtoa_r+0x47c>
 800b98a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	2200      	movs	r2, #0
 800b992:	4b91      	ldr	r3, [pc, #580]	; (800bbd8 <_dtoa_r+0x650>)
 800b994:	4630      	mov	r0, r6
 800b996:	4639      	mov	r1, r7
 800b998:	f7f4 fe3e 	bl	8000618 <__aeabi_dmul>
 800b99c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b9a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7f4 fdca 	bl	8000544 <__aeabi_i2d>
 800b9b0:	4632      	mov	r2, r6
 800b9b2:	463b      	mov	r3, r7
 800b9b4:	f7f4 fe30 	bl	8000618 <__aeabi_dmul>
 800b9b8:	4b88      	ldr	r3, [pc, #544]	; (800bbdc <_dtoa_r+0x654>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f7f4 fc76 	bl	80002ac <__adddf3>
 800b9c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9c8:	9303      	str	r3, [sp, #12]
 800b9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d15c      	bne.n	800ba8a <_dtoa_r+0x502>
 800b9d0:	4b83      	ldr	r3, [pc, #524]	; (800bbe0 <_dtoa_r+0x658>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	f7f4 fc66 	bl	80002a8 <__aeabi_dsub>
 800b9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	460f      	mov	r7, r1
 800b9e4:	f7f5 f8a8 	bl	8000b38 <__aeabi_dcmpgt>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	f040 8296 	bne.w	800bf1a <_dtoa_r+0x992>
 800b9ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f5 f87f 	bl	8000afc <__aeabi_dcmplt>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	f040 8288 	bne.w	800bf14 <_dtoa_r+0x98c>
 800ba04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f2c0 8158 	blt.w	800bcc4 <_dtoa_r+0x73c>
 800ba14:	f1ba 0f0e 	cmp.w	sl, #14
 800ba18:	f300 8154 	bgt.w	800bcc4 <_dtoa_r+0x73c>
 800ba1c:	4b6b      	ldr	r3, [pc, #428]	; (800bbcc <_dtoa_r+0x644>)
 800ba1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba22:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f280 80e3 	bge.w	800bbf4 <_dtoa_r+0x66c>
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f300 80df 	bgt.w	800bbf4 <_dtoa_r+0x66c>
 800ba36:	f040 826d 	bne.w	800bf14 <_dtoa_r+0x98c>
 800ba3a:	4b69      	ldr	r3, [pc, #420]	; (800bbe0 <_dtoa_r+0x658>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4640      	mov	r0, r8
 800ba40:	4649      	mov	r1, r9
 800ba42:	f7f4 fde9 	bl	8000618 <__aeabi_dmul>
 800ba46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba4a:	f7f5 f86b 	bl	8000b24 <__aeabi_dcmpge>
 800ba4e:	9e01      	ldr	r6, [sp, #4]
 800ba50:	4637      	mov	r7, r6
 800ba52:	2800      	cmp	r0, #0
 800ba54:	f040 8243 	bne.w	800bede <_dtoa_r+0x956>
 800ba58:	9d00      	ldr	r5, [sp, #0]
 800ba5a:	2331      	movs	r3, #49	; 0x31
 800ba5c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba60:	f10a 0a01 	add.w	sl, sl, #1
 800ba64:	e23f      	b.n	800bee6 <_dtoa_r+0x95e>
 800ba66:	07f2      	lsls	r2, r6, #31
 800ba68:	d505      	bpl.n	800ba76 <_dtoa_r+0x4ee>
 800ba6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6e:	f7f4 fdd3 	bl	8000618 <__aeabi_dmul>
 800ba72:	3501      	adds	r5, #1
 800ba74:	2301      	movs	r3, #1
 800ba76:	1076      	asrs	r6, r6, #1
 800ba78:	3708      	adds	r7, #8
 800ba7a:	e76c      	b.n	800b956 <_dtoa_r+0x3ce>
 800ba7c:	2502      	movs	r5, #2
 800ba7e:	e76f      	b.n	800b960 <_dtoa_r+0x3d8>
 800ba80:	9b01      	ldr	r3, [sp, #4]
 800ba82:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba86:	930c      	str	r3, [sp, #48]	; 0x30
 800ba88:	e78d      	b.n	800b9a6 <_dtoa_r+0x41e>
 800ba8a:	9900      	ldr	r1, [sp, #0]
 800ba8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba90:	4b4e      	ldr	r3, [pc, #312]	; (800bbcc <_dtoa_r+0x644>)
 800ba92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba96:	4401      	add	r1, r0
 800ba98:	9102      	str	r1, [sp, #8]
 800ba9a:	9908      	ldr	r1, [sp, #32]
 800ba9c:	eeb0 8a47 	vmov.f32	s16, s14
 800baa0:	eef0 8a67 	vmov.f32	s17, s15
 800baa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800baac:	2900      	cmp	r1, #0
 800baae:	d045      	beq.n	800bb3c <_dtoa_r+0x5b4>
 800bab0:	494c      	ldr	r1, [pc, #304]	; (800bbe4 <_dtoa_r+0x65c>)
 800bab2:	2000      	movs	r0, #0
 800bab4:	f7f4 feda 	bl	800086c <__aeabi_ddiv>
 800bab8:	ec53 2b18 	vmov	r2, r3, d8
 800babc:	f7f4 fbf4 	bl	80002a8 <__aeabi_dsub>
 800bac0:	9d00      	ldr	r5, [sp, #0]
 800bac2:	ec41 0b18 	vmov	d8, r0, r1
 800bac6:	4639      	mov	r1, r7
 800bac8:	4630      	mov	r0, r6
 800baca:	f7f5 f855 	bl	8000b78 <__aeabi_d2iz>
 800bace:	900c      	str	r0, [sp, #48]	; 0x30
 800bad0:	f7f4 fd38 	bl	8000544 <__aeabi_i2d>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4630      	mov	r0, r6
 800bada:	4639      	mov	r1, r7
 800badc:	f7f4 fbe4 	bl	80002a8 <__aeabi_dsub>
 800bae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bae2:	3330      	adds	r3, #48	; 0x30
 800bae4:	f805 3b01 	strb.w	r3, [r5], #1
 800bae8:	ec53 2b18 	vmov	r2, r3, d8
 800baec:	4606      	mov	r6, r0
 800baee:	460f      	mov	r7, r1
 800baf0:	f7f5 f804 	bl	8000afc <__aeabi_dcmplt>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d165      	bne.n	800bbc4 <_dtoa_r+0x63c>
 800baf8:	4632      	mov	r2, r6
 800bafa:	463b      	mov	r3, r7
 800bafc:	4935      	ldr	r1, [pc, #212]	; (800bbd4 <_dtoa_r+0x64c>)
 800bafe:	2000      	movs	r0, #0
 800bb00:	f7f4 fbd2 	bl	80002a8 <__aeabi_dsub>
 800bb04:	ec53 2b18 	vmov	r2, r3, d8
 800bb08:	f7f4 fff8 	bl	8000afc <__aeabi_dcmplt>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	f040 80b9 	bne.w	800bc84 <_dtoa_r+0x6fc>
 800bb12:	9b02      	ldr	r3, [sp, #8]
 800bb14:	429d      	cmp	r5, r3
 800bb16:	f43f af75 	beq.w	800ba04 <_dtoa_r+0x47c>
 800bb1a:	4b2f      	ldr	r3, [pc, #188]	; (800bbd8 <_dtoa_r+0x650>)
 800bb1c:	ec51 0b18 	vmov	r0, r1, d8
 800bb20:	2200      	movs	r2, #0
 800bb22:	f7f4 fd79 	bl	8000618 <__aeabi_dmul>
 800bb26:	4b2c      	ldr	r3, [pc, #176]	; (800bbd8 <_dtoa_r+0x650>)
 800bb28:	ec41 0b18 	vmov	d8, r0, r1
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	f7f4 fd71 	bl	8000618 <__aeabi_dmul>
 800bb36:	4606      	mov	r6, r0
 800bb38:	460f      	mov	r7, r1
 800bb3a:	e7c4      	b.n	800bac6 <_dtoa_r+0x53e>
 800bb3c:	ec51 0b17 	vmov	r0, r1, d7
 800bb40:	f7f4 fd6a 	bl	8000618 <__aeabi_dmul>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	9d00      	ldr	r5, [sp, #0]
 800bb48:	930c      	str	r3, [sp, #48]	; 0x30
 800bb4a:	ec41 0b18 	vmov	d8, r0, r1
 800bb4e:	4639      	mov	r1, r7
 800bb50:	4630      	mov	r0, r6
 800bb52:	f7f5 f811 	bl	8000b78 <__aeabi_d2iz>
 800bb56:	9011      	str	r0, [sp, #68]	; 0x44
 800bb58:	f7f4 fcf4 	bl	8000544 <__aeabi_i2d>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 fba0 	bl	80002a8 <__aeabi_dsub>
 800bb68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb6a:	3330      	adds	r3, #48	; 0x30
 800bb6c:	f805 3b01 	strb.w	r3, [r5], #1
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	429d      	cmp	r5, r3
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	f04f 0200 	mov.w	r2, #0
 800bb7c:	d134      	bne.n	800bbe8 <_dtoa_r+0x660>
 800bb7e:	4b19      	ldr	r3, [pc, #100]	; (800bbe4 <_dtoa_r+0x65c>)
 800bb80:	ec51 0b18 	vmov	r0, r1, d8
 800bb84:	f7f4 fb92 	bl	80002ac <__adddf3>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	4639      	mov	r1, r7
 800bb90:	f7f4 ffd2 	bl	8000b38 <__aeabi_dcmpgt>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d175      	bne.n	800bc84 <_dtoa_r+0x6fc>
 800bb98:	ec53 2b18 	vmov	r2, r3, d8
 800bb9c:	4911      	ldr	r1, [pc, #68]	; (800bbe4 <_dtoa_r+0x65c>)
 800bb9e:	2000      	movs	r0, #0
 800bba0:	f7f4 fb82 	bl	80002a8 <__aeabi_dsub>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4630      	mov	r0, r6
 800bbaa:	4639      	mov	r1, r7
 800bbac:	f7f4 ffa6 	bl	8000afc <__aeabi_dcmplt>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f43f af27 	beq.w	800ba04 <_dtoa_r+0x47c>
 800bbb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbb8:	1e6b      	subs	r3, r5, #1
 800bbba:	930c      	str	r3, [sp, #48]	; 0x30
 800bbbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbc0:	2b30      	cmp	r3, #48	; 0x30
 800bbc2:	d0f8      	beq.n	800bbb6 <_dtoa_r+0x62e>
 800bbc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bbc8:	e04a      	b.n	800bc60 <_dtoa_r+0x6d8>
 800bbca:	bf00      	nop
 800bbcc:	080101c8 	.word	0x080101c8
 800bbd0:	080101a0 	.word	0x080101a0
 800bbd4:	3ff00000 	.word	0x3ff00000
 800bbd8:	40240000 	.word	0x40240000
 800bbdc:	401c0000 	.word	0x401c0000
 800bbe0:	40140000 	.word	0x40140000
 800bbe4:	3fe00000 	.word	0x3fe00000
 800bbe8:	4baf      	ldr	r3, [pc, #700]	; (800bea8 <_dtoa_r+0x920>)
 800bbea:	f7f4 fd15 	bl	8000618 <__aeabi_dmul>
 800bbee:	4606      	mov	r6, r0
 800bbf0:	460f      	mov	r7, r1
 800bbf2:	e7ac      	b.n	800bb4e <_dtoa_r+0x5c6>
 800bbf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbf8:	9d00      	ldr	r5, [sp, #0]
 800bbfa:	4642      	mov	r2, r8
 800bbfc:	464b      	mov	r3, r9
 800bbfe:	4630      	mov	r0, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	f7f4 fe33 	bl	800086c <__aeabi_ddiv>
 800bc06:	f7f4 ffb7 	bl	8000b78 <__aeabi_d2iz>
 800bc0a:	9002      	str	r0, [sp, #8]
 800bc0c:	f7f4 fc9a 	bl	8000544 <__aeabi_i2d>
 800bc10:	4642      	mov	r2, r8
 800bc12:	464b      	mov	r3, r9
 800bc14:	f7f4 fd00 	bl	8000618 <__aeabi_dmul>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	4639      	mov	r1, r7
 800bc20:	f7f4 fb42 	bl	80002a8 <__aeabi_dsub>
 800bc24:	9e02      	ldr	r6, [sp, #8]
 800bc26:	9f01      	ldr	r7, [sp, #4]
 800bc28:	3630      	adds	r6, #48	; 0x30
 800bc2a:	f805 6b01 	strb.w	r6, [r5], #1
 800bc2e:	9e00      	ldr	r6, [sp, #0]
 800bc30:	1bae      	subs	r6, r5, r6
 800bc32:	42b7      	cmp	r7, r6
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	d137      	bne.n	800bcaa <_dtoa_r+0x722>
 800bc3a:	f7f4 fb37 	bl	80002ac <__adddf3>
 800bc3e:	4642      	mov	r2, r8
 800bc40:	464b      	mov	r3, r9
 800bc42:	4606      	mov	r6, r0
 800bc44:	460f      	mov	r7, r1
 800bc46:	f7f4 ff77 	bl	8000b38 <__aeabi_dcmpgt>
 800bc4a:	b9c8      	cbnz	r0, 800bc80 <_dtoa_r+0x6f8>
 800bc4c:	4642      	mov	r2, r8
 800bc4e:	464b      	mov	r3, r9
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 ff48 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc58:	b110      	cbz	r0, 800bc60 <_dtoa_r+0x6d8>
 800bc5a:	9b02      	ldr	r3, [sp, #8]
 800bc5c:	07d9      	lsls	r1, r3, #31
 800bc5e:	d40f      	bmi.n	800bc80 <_dtoa_r+0x6f8>
 800bc60:	4620      	mov	r0, r4
 800bc62:	4659      	mov	r1, fp
 800bc64:	f000 fce8 	bl	800c638 <_Bfree>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	702b      	strb	r3, [r5, #0]
 800bc6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc6e:	f10a 0001 	add.w	r0, sl, #1
 800bc72:	6018      	str	r0, [r3, #0]
 800bc74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f43f acd8 	beq.w	800b62c <_dtoa_r+0xa4>
 800bc7c:	601d      	str	r5, [r3, #0]
 800bc7e:	e4d5      	b.n	800b62c <_dtoa_r+0xa4>
 800bc80:	f8cd a01c 	str.w	sl, [sp, #28]
 800bc84:	462b      	mov	r3, r5
 800bc86:	461d      	mov	r5, r3
 800bc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc8c:	2a39      	cmp	r2, #57	; 0x39
 800bc8e:	d108      	bne.n	800bca2 <_dtoa_r+0x71a>
 800bc90:	9a00      	ldr	r2, [sp, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d1f7      	bne.n	800bc86 <_dtoa_r+0x6fe>
 800bc96:	9a07      	ldr	r2, [sp, #28]
 800bc98:	9900      	ldr	r1, [sp, #0]
 800bc9a:	3201      	adds	r2, #1
 800bc9c:	9207      	str	r2, [sp, #28]
 800bc9e:	2230      	movs	r2, #48	; 0x30
 800bca0:	700a      	strb	r2, [r1, #0]
 800bca2:	781a      	ldrb	r2, [r3, #0]
 800bca4:	3201      	adds	r2, #1
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e78c      	b.n	800bbc4 <_dtoa_r+0x63c>
 800bcaa:	4b7f      	ldr	r3, [pc, #508]	; (800bea8 <_dtoa_r+0x920>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	f7f4 fcb3 	bl	8000618 <__aeabi_dmul>
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4606      	mov	r6, r0
 800bcb8:	460f      	mov	r7, r1
 800bcba:	f7f4 ff15 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d09b      	beq.n	800bbfa <_dtoa_r+0x672>
 800bcc2:	e7cd      	b.n	800bc60 <_dtoa_r+0x6d8>
 800bcc4:	9a08      	ldr	r2, [sp, #32]
 800bcc6:	2a00      	cmp	r2, #0
 800bcc8:	f000 80c4 	beq.w	800be54 <_dtoa_r+0x8cc>
 800bccc:	9a05      	ldr	r2, [sp, #20]
 800bcce:	2a01      	cmp	r2, #1
 800bcd0:	f300 80a8 	bgt.w	800be24 <_dtoa_r+0x89c>
 800bcd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcd6:	2a00      	cmp	r2, #0
 800bcd8:	f000 80a0 	beq.w	800be1c <_dtoa_r+0x894>
 800bcdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bce0:	9e06      	ldr	r6, [sp, #24]
 800bce2:	4645      	mov	r5, r8
 800bce4:	9a04      	ldr	r2, [sp, #16]
 800bce6:	2101      	movs	r1, #1
 800bce8:	441a      	add	r2, r3
 800bcea:	4620      	mov	r0, r4
 800bcec:	4498      	add	r8, r3
 800bcee:	9204      	str	r2, [sp, #16]
 800bcf0:	f000 fd5e 	bl	800c7b0 <__i2b>
 800bcf4:	4607      	mov	r7, r0
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	dd0b      	ble.n	800bd12 <_dtoa_r+0x78a>
 800bcfa:	9b04      	ldr	r3, [sp, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dd08      	ble.n	800bd12 <_dtoa_r+0x78a>
 800bd00:	42ab      	cmp	r3, r5
 800bd02:	9a04      	ldr	r2, [sp, #16]
 800bd04:	bfa8      	it	ge
 800bd06:	462b      	movge	r3, r5
 800bd08:	eba8 0803 	sub.w	r8, r8, r3
 800bd0c:	1aed      	subs	r5, r5, r3
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	9304      	str	r3, [sp, #16]
 800bd12:	9b06      	ldr	r3, [sp, #24]
 800bd14:	b1fb      	cbz	r3, 800bd56 <_dtoa_r+0x7ce>
 800bd16:	9b08      	ldr	r3, [sp, #32]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 809f 	beq.w	800be5c <_dtoa_r+0x8d4>
 800bd1e:	2e00      	cmp	r6, #0
 800bd20:	dd11      	ble.n	800bd46 <_dtoa_r+0x7be>
 800bd22:	4639      	mov	r1, r7
 800bd24:	4632      	mov	r2, r6
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 fdfe 	bl	800c928 <__pow5mult>
 800bd2c:	465a      	mov	r2, fp
 800bd2e:	4601      	mov	r1, r0
 800bd30:	4607      	mov	r7, r0
 800bd32:	4620      	mov	r0, r4
 800bd34:	f000 fd52 	bl	800c7dc <__multiply>
 800bd38:	4659      	mov	r1, fp
 800bd3a:	9007      	str	r0, [sp, #28]
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 fc7b 	bl	800c638 <_Bfree>
 800bd42:	9b07      	ldr	r3, [sp, #28]
 800bd44:	469b      	mov	fp, r3
 800bd46:	9b06      	ldr	r3, [sp, #24]
 800bd48:	1b9a      	subs	r2, r3, r6
 800bd4a:	d004      	beq.n	800bd56 <_dtoa_r+0x7ce>
 800bd4c:	4659      	mov	r1, fp
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 fdea 	bl	800c928 <__pow5mult>
 800bd54:	4683      	mov	fp, r0
 800bd56:	2101      	movs	r1, #1
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fd29 	bl	800c7b0 <__i2b>
 800bd5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	4606      	mov	r6, r0
 800bd64:	dd7c      	ble.n	800be60 <_dtoa_r+0x8d8>
 800bd66:	461a      	mov	r2, r3
 800bd68:	4601      	mov	r1, r0
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fddc 	bl	800c928 <__pow5mult>
 800bd70:	9b05      	ldr	r3, [sp, #20]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	4606      	mov	r6, r0
 800bd76:	dd76      	ble.n	800be66 <_dtoa_r+0x8de>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9306      	str	r3, [sp, #24]
 800bd7c:	6933      	ldr	r3, [r6, #16]
 800bd7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd82:	6918      	ldr	r0, [r3, #16]
 800bd84:	f000 fcc4 	bl	800c710 <__hi0bits>
 800bd88:	f1c0 0020 	rsb	r0, r0, #32
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	4418      	add	r0, r3
 800bd90:	f010 001f 	ands.w	r0, r0, #31
 800bd94:	f000 8086 	beq.w	800bea4 <_dtoa_r+0x91c>
 800bd98:	f1c0 0320 	rsb	r3, r0, #32
 800bd9c:	2b04      	cmp	r3, #4
 800bd9e:	dd7f      	ble.n	800bea0 <_dtoa_r+0x918>
 800bda0:	f1c0 001c 	rsb	r0, r0, #28
 800bda4:	9b04      	ldr	r3, [sp, #16]
 800bda6:	4403      	add	r3, r0
 800bda8:	4480      	add	r8, r0
 800bdaa:	4405      	add	r5, r0
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	f1b8 0f00 	cmp.w	r8, #0
 800bdb2:	dd05      	ble.n	800bdc0 <_dtoa_r+0x838>
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	4642      	mov	r2, r8
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 fe0f 	bl	800c9dc <__lshift>
 800bdbe:	4683      	mov	fp, r0
 800bdc0:	9b04      	ldr	r3, [sp, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dd05      	ble.n	800bdd2 <_dtoa_r+0x84a>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fe06 	bl	800c9dc <__lshift>
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d069      	beq.n	800beac <_dtoa_r+0x924>
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4658      	mov	r0, fp
 800bddc:	f000 fe6a 	bl	800cab4 <__mcmp>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	da63      	bge.n	800beac <_dtoa_r+0x924>
 800bde4:	2300      	movs	r3, #0
 800bde6:	4659      	mov	r1, fp
 800bde8:	220a      	movs	r2, #10
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 fc46 	bl	800c67c <__multadd>
 800bdf0:	9b08      	ldr	r3, [sp, #32]
 800bdf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdf6:	4683      	mov	fp, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 818f 	beq.w	800c11c <_dtoa_r+0xb94>
 800bdfe:	4639      	mov	r1, r7
 800be00:	2300      	movs	r3, #0
 800be02:	220a      	movs	r2, #10
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fc39 	bl	800c67c <__multadd>
 800be0a:	f1b9 0f00 	cmp.w	r9, #0
 800be0e:	4607      	mov	r7, r0
 800be10:	f300 808e 	bgt.w	800bf30 <_dtoa_r+0x9a8>
 800be14:	9b05      	ldr	r3, [sp, #20]
 800be16:	2b02      	cmp	r3, #2
 800be18:	dc50      	bgt.n	800bebc <_dtoa_r+0x934>
 800be1a:	e089      	b.n	800bf30 <_dtoa_r+0x9a8>
 800be1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be22:	e75d      	b.n	800bce0 <_dtoa_r+0x758>
 800be24:	9b01      	ldr	r3, [sp, #4]
 800be26:	1e5e      	subs	r6, r3, #1
 800be28:	9b06      	ldr	r3, [sp, #24]
 800be2a:	42b3      	cmp	r3, r6
 800be2c:	bfbf      	itttt	lt
 800be2e:	9b06      	ldrlt	r3, [sp, #24]
 800be30:	9606      	strlt	r6, [sp, #24]
 800be32:	1af2      	sublt	r2, r6, r3
 800be34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800be36:	bfb6      	itet	lt
 800be38:	189b      	addlt	r3, r3, r2
 800be3a:	1b9e      	subge	r6, r3, r6
 800be3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	bfb8      	it	lt
 800be42:	2600      	movlt	r6, #0
 800be44:	2b00      	cmp	r3, #0
 800be46:	bfb5      	itete	lt
 800be48:	eba8 0503 	sublt.w	r5, r8, r3
 800be4c:	9b01      	ldrge	r3, [sp, #4]
 800be4e:	2300      	movlt	r3, #0
 800be50:	4645      	movge	r5, r8
 800be52:	e747      	b.n	800bce4 <_dtoa_r+0x75c>
 800be54:	9e06      	ldr	r6, [sp, #24]
 800be56:	9f08      	ldr	r7, [sp, #32]
 800be58:	4645      	mov	r5, r8
 800be5a:	e74c      	b.n	800bcf6 <_dtoa_r+0x76e>
 800be5c:	9a06      	ldr	r2, [sp, #24]
 800be5e:	e775      	b.n	800bd4c <_dtoa_r+0x7c4>
 800be60:	9b05      	ldr	r3, [sp, #20]
 800be62:	2b01      	cmp	r3, #1
 800be64:	dc18      	bgt.n	800be98 <_dtoa_r+0x910>
 800be66:	9b02      	ldr	r3, [sp, #8]
 800be68:	b9b3      	cbnz	r3, 800be98 <_dtoa_r+0x910>
 800be6a:	9b03      	ldr	r3, [sp, #12]
 800be6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be70:	b9a3      	cbnz	r3, 800be9c <_dtoa_r+0x914>
 800be72:	9b03      	ldr	r3, [sp, #12]
 800be74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be78:	0d1b      	lsrs	r3, r3, #20
 800be7a:	051b      	lsls	r3, r3, #20
 800be7c:	b12b      	cbz	r3, 800be8a <_dtoa_r+0x902>
 800be7e:	9b04      	ldr	r3, [sp, #16]
 800be80:	3301      	adds	r3, #1
 800be82:	9304      	str	r3, [sp, #16]
 800be84:	f108 0801 	add.w	r8, r8, #1
 800be88:	2301      	movs	r3, #1
 800be8a:	9306      	str	r3, [sp, #24]
 800be8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f47f af74 	bne.w	800bd7c <_dtoa_r+0x7f4>
 800be94:	2001      	movs	r0, #1
 800be96:	e779      	b.n	800bd8c <_dtoa_r+0x804>
 800be98:	2300      	movs	r3, #0
 800be9a:	e7f6      	b.n	800be8a <_dtoa_r+0x902>
 800be9c:	9b02      	ldr	r3, [sp, #8]
 800be9e:	e7f4      	b.n	800be8a <_dtoa_r+0x902>
 800bea0:	d085      	beq.n	800bdae <_dtoa_r+0x826>
 800bea2:	4618      	mov	r0, r3
 800bea4:	301c      	adds	r0, #28
 800bea6:	e77d      	b.n	800bda4 <_dtoa_r+0x81c>
 800bea8:	40240000 	.word	0x40240000
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	dc38      	bgt.n	800bf24 <_dtoa_r+0x99c>
 800beb2:	9b05      	ldr	r3, [sp, #20]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	dd35      	ble.n	800bf24 <_dtoa_r+0x99c>
 800beb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bebc:	f1b9 0f00 	cmp.w	r9, #0
 800bec0:	d10d      	bne.n	800bede <_dtoa_r+0x956>
 800bec2:	4631      	mov	r1, r6
 800bec4:	464b      	mov	r3, r9
 800bec6:	2205      	movs	r2, #5
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 fbd7 	bl	800c67c <__multadd>
 800bece:	4601      	mov	r1, r0
 800bed0:	4606      	mov	r6, r0
 800bed2:	4658      	mov	r0, fp
 800bed4:	f000 fdee 	bl	800cab4 <__mcmp>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f73f adbd 	bgt.w	800ba58 <_dtoa_r+0x4d0>
 800bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee0:	9d00      	ldr	r5, [sp, #0]
 800bee2:	ea6f 0a03 	mvn.w	sl, r3
 800bee6:	f04f 0800 	mov.w	r8, #0
 800beea:	4631      	mov	r1, r6
 800beec:	4620      	mov	r0, r4
 800beee:	f000 fba3 	bl	800c638 <_Bfree>
 800bef2:	2f00      	cmp	r7, #0
 800bef4:	f43f aeb4 	beq.w	800bc60 <_dtoa_r+0x6d8>
 800bef8:	f1b8 0f00 	cmp.w	r8, #0
 800befc:	d005      	beq.n	800bf0a <_dtoa_r+0x982>
 800befe:	45b8      	cmp	r8, r7
 800bf00:	d003      	beq.n	800bf0a <_dtoa_r+0x982>
 800bf02:	4641      	mov	r1, r8
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 fb97 	bl	800c638 <_Bfree>
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fb93 	bl	800c638 <_Bfree>
 800bf12:	e6a5      	b.n	800bc60 <_dtoa_r+0x6d8>
 800bf14:	2600      	movs	r6, #0
 800bf16:	4637      	mov	r7, r6
 800bf18:	e7e1      	b.n	800bede <_dtoa_r+0x956>
 800bf1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bf1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf20:	4637      	mov	r7, r6
 800bf22:	e599      	b.n	800ba58 <_dtoa_r+0x4d0>
 800bf24:	9b08      	ldr	r3, [sp, #32]
 800bf26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 80fd 	beq.w	800c12a <_dtoa_r+0xba2>
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	dd05      	ble.n	800bf40 <_dtoa_r+0x9b8>
 800bf34:	4639      	mov	r1, r7
 800bf36:	462a      	mov	r2, r5
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 fd4f 	bl	800c9dc <__lshift>
 800bf3e:	4607      	mov	r7, r0
 800bf40:	9b06      	ldr	r3, [sp, #24]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d05c      	beq.n	800c000 <_dtoa_r+0xa78>
 800bf46:	6879      	ldr	r1, [r7, #4]
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 fb35 	bl	800c5b8 <_Balloc>
 800bf4e:	4605      	mov	r5, r0
 800bf50:	b928      	cbnz	r0, 800bf5e <_dtoa_r+0x9d6>
 800bf52:	4b80      	ldr	r3, [pc, #512]	; (800c154 <_dtoa_r+0xbcc>)
 800bf54:	4602      	mov	r2, r0
 800bf56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf5a:	f7ff bb2e 	b.w	800b5ba <_dtoa_r+0x32>
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	3202      	adds	r2, #2
 800bf62:	0092      	lsls	r2, r2, #2
 800bf64:	f107 010c 	add.w	r1, r7, #12
 800bf68:	300c      	adds	r0, #12
 800bf6a:	f7fe fd27 	bl	800a9bc <memcpy>
 800bf6e:	2201      	movs	r2, #1
 800bf70:	4629      	mov	r1, r5
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fd32 	bl	800c9dc <__lshift>
 800bf78:	9b00      	ldr	r3, [sp, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	9b00      	ldr	r3, [sp, #0]
 800bf80:	444b      	add	r3, r9
 800bf82:	9307      	str	r3, [sp, #28]
 800bf84:	9b02      	ldr	r3, [sp, #8]
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	46b8      	mov	r8, r7
 800bf8c:	9306      	str	r3, [sp, #24]
 800bf8e:	4607      	mov	r7, r0
 800bf90:	9b01      	ldr	r3, [sp, #4]
 800bf92:	4631      	mov	r1, r6
 800bf94:	3b01      	subs	r3, #1
 800bf96:	4658      	mov	r0, fp
 800bf98:	9302      	str	r3, [sp, #8]
 800bf9a:	f7ff fa67 	bl	800b46c <quorem>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	3330      	adds	r3, #48	; 0x30
 800bfa2:	9004      	str	r0, [sp, #16]
 800bfa4:	4641      	mov	r1, r8
 800bfa6:	4658      	mov	r0, fp
 800bfa8:	9308      	str	r3, [sp, #32]
 800bfaa:	f000 fd83 	bl	800cab4 <__mcmp>
 800bfae:	463a      	mov	r2, r7
 800bfb0:	4681      	mov	r9, r0
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fd99 	bl	800caec <__mdiff>
 800bfba:	68c2      	ldr	r2, [r0, #12]
 800bfbc:	9b08      	ldr	r3, [sp, #32]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	bb02      	cbnz	r2, 800c004 <_dtoa_r+0xa7c>
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	4658      	mov	r0, fp
 800bfc6:	f000 fd75 	bl	800cab4 <__mcmp>
 800bfca:	9b08      	ldr	r3, [sp, #32]
 800bfcc:	4602      	mov	r2, r0
 800bfce:	4629      	mov	r1, r5
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bfd6:	f000 fb2f 	bl	800c638 <_Bfree>
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfde:	9d01      	ldr	r5, [sp, #4]
 800bfe0:	ea43 0102 	orr.w	r1, r3, r2
 800bfe4:	9b06      	ldr	r3, [sp, #24]
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	9b08      	ldr	r3, [sp, #32]
 800bfea:	d10d      	bne.n	800c008 <_dtoa_r+0xa80>
 800bfec:	2b39      	cmp	r3, #57	; 0x39
 800bfee:	d029      	beq.n	800c044 <_dtoa_r+0xabc>
 800bff0:	f1b9 0f00 	cmp.w	r9, #0
 800bff4:	dd01      	ble.n	800bffa <_dtoa_r+0xa72>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	3331      	adds	r3, #49	; 0x31
 800bffa:	9a02      	ldr	r2, [sp, #8]
 800bffc:	7013      	strb	r3, [r2, #0]
 800bffe:	e774      	b.n	800beea <_dtoa_r+0x962>
 800c000:	4638      	mov	r0, r7
 800c002:	e7b9      	b.n	800bf78 <_dtoa_r+0x9f0>
 800c004:	2201      	movs	r2, #1
 800c006:	e7e2      	b.n	800bfce <_dtoa_r+0xa46>
 800c008:	f1b9 0f00 	cmp.w	r9, #0
 800c00c:	db06      	blt.n	800c01c <_dtoa_r+0xa94>
 800c00e:	9905      	ldr	r1, [sp, #20]
 800c010:	ea41 0909 	orr.w	r9, r1, r9
 800c014:	9906      	ldr	r1, [sp, #24]
 800c016:	ea59 0101 	orrs.w	r1, r9, r1
 800c01a:	d120      	bne.n	800c05e <_dtoa_r+0xad6>
 800c01c:	2a00      	cmp	r2, #0
 800c01e:	ddec      	ble.n	800bffa <_dtoa_r+0xa72>
 800c020:	4659      	mov	r1, fp
 800c022:	2201      	movs	r2, #1
 800c024:	4620      	mov	r0, r4
 800c026:	9301      	str	r3, [sp, #4]
 800c028:	f000 fcd8 	bl	800c9dc <__lshift>
 800c02c:	4631      	mov	r1, r6
 800c02e:	4683      	mov	fp, r0
 800c030:	f000 fd40 	bl	800cab4 <__mcmp>
 800c034:	2800      	cmp	r0, #0
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	dc02      	bgt.n	800c040 <_dtoa_r+0xab8>
 800c03a:	d1de      	bne.n	800bffa <_dtoa_r+0xa72>
 800c03c:	07da      	lsls	r2, r3, #31
 800c03e:	d5dc      	bpl.n	800bffa <_dtoa_r+0xa72>
 800c040:	2b39      	cmp	r3, #57	; 0x39
 800c042:	d1d8      	bne.n	800bff6 <_dtoa_r+0xa6e>
 800c044:	9a02      	ldr	r2, [sp, #8]
 800c046:	2339      	movs	r3, #57	; 0x39
 800c048:	7013      	strb	r3, [r2, #0]
 800c04a:	462b      	mov	r3, r5
 800c04c:	461d      	mov	r5, r3
 800c04e:	3b01      	subs	r3, #1
 800c050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c054:	2a39      	cmp	r2, #57	; 0x39
 800c056:	d050      	beq.n	800c0fa <_dtoa_r+0xb72>
 800c058:	3201      	adds	r2, #1
 800c05a:	701a      	strb	r2, [r3, #0]
 800c05c:	e745      	b.n	800beea <_dtoa_r+0x962>
 800c05e:	2a00      	cmp	r2, #0
 800c060:	dd03      	ble.n	800c06a <_dtoa_r+0xae2>
 800c062:	2b39      	cmp	r3, #57	; 0x39
 800c064:	d0ee      	beq.n	800c044 <_dtoa_r+0xabc>
 800c066:	3301      	adds	r3, #1
 800c068:	e7c7      	b.n	800bffa <_dtoa_r+0xa72>
 800c06a:	9a01      	ldr	r2, [sp, #4]
 800c06c:	9907      	ldr	r1, [sp, #28]
 800c06e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c072:	428a      	cmp	r2, r1
 800c074:	d02a      	beq.n	800c0cc <_dtoa_r+0xb44>
 800c076:	4659      	mov	r1, fp
 800c078:	2300      	movs	r3, #0
 800c07a:	220a      	movs	r2, #10
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fafd 	bl	800c67c <__multadd>
 800c082:	45b8      	cmp	r8, r7
 800c084:	4683      	mov	fp, r0
 800c086:	f04f 0300 	mov.w	r3, #0
 800c08a:	f04f 020a 	mov.w	r2, #10
 800c08e:	4641      	mov	r1, r8
 800c090:	4620      	mov	r0, r4
 800c092:	d107      	bne.n	800c0a4 <_dtoa_r+0xb1c>
 800c094:	f000 faf2 	bl	800c67c <__multadd>
 800c098:	4680      	mov	r8, r0
 800c09a:	4607      	mov	r7, r0
 800c09c:	9b01      	ldr	r3, [sp, #4]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	e775      	b.n	800bf90 <_dtoa_r+0xa08>
 800c0a4:	f000 faea 	bl	800c67c <__multadd>
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	220a      	movs	r2, #10
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f000 fae3 	bl	800c67c <__multadd>
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	e7f0      	b.n	800c09c <_dtoa_r+0xb14>
 800c0ba:	f1b9 0f00 	cmp.w	r9, #0
 800c0be:	9a00      	ldr	r2, [sp, #0]
 800c0c0:	bfcc      	ite	gt
 800c0c2:	464d      	movgt	r5, r9
 800c0c4:	2501      	movle	r5, #1
 800c0c6:	4415      	add	r5, r2
 800c0c8:	f04f 0800 	mov.w	r8, #0
 800c0cc:	4659      	mov	r1, fp
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	f000 fc82 	bl	800c9dc <__lshift>
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4683      	mov	fp, r0
 800c0dc:	f000 fcea 	bl	800cab4 <__mcmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	dcb2      	bgt.n	800c04a <_dtoa_r+0xac2>
 800c0e4:	d102      	bne.n	800c0ec <_dtoa_r+0xb64>
 800c0e6:	9b01      	ldr	r3, [sp, #4]
 800c0e8:	07db      	lsls	r3, r3, #31
 800c0ea:	d4ae      	bmi.n	800c04a <_dtoa_r+0xac2>
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	461d      	mov	r5, r3
 800c0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0f4:	2a30      	cmp	r2, #48	; 0x30
 800c0f6:	d0fa      	beq.n	800c0ee <_dtoa_r+0xb66>
 800c0f8:	e6f7      	b.n	800beea <_dtoa_r+0x962>
 800c0fa:	9a00      	ldr	r2, [sp, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d1a5      	bne.n	800c04c <_dtoa_r+0xac4>
 800c100:	f10a 0a01 	add.w	sl, sl, #1
 800c104:	2331      	movs	r3, #49	; 0x31
 800c106:	e779      	b.n	800bffc <_dtoa_r+0xa74>
 800c108:	4b13      	ldr	r3, [pc, #76]	; (800c158 <_dtoa_r+0xbd0>)
 800c10a:	f7ff baaf 	b.w	800b66c <_dtoa_r+0xe4>
 800c10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c110:	2b00      	cmp	r3, #0
 800c112:	f47f aa86 	bne.w	800b622 <_dtoa_r+0x9a>
 800c116:	4b11      	ldr	r3, [pc, #68]	; (800c15c <_dtoa_r+0xbd4>)
 800c118:	f7ff baa8 	b.w	800b66c <_dtoa_r+0xe4>
 800c11c:	f1b9 0f00 	cmp.w	r9, #0
 800c120:	dc03      	bgt.n	800c12a <_dtoa_r+0xba2>
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	2b02      	cmp	r3, #2
 800c126:	f73f aec9 	bgt.w	800bebc <_dtoa_r+0x934>
 800c12a:	9d00      	ldr	r5, [sp, #0]
 800c12c:	4631      	mov	r1, r6
 800c12e:	4658      	mov	r0, fp
 800c130:	f7ff f99c 	bl	800b46c <quorem>
 800c134:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c138:	f805 3b01 	strb.w	r3, [r5], #1
 800c13c:	9a00      	ldr	r2, [sp, #0]
 800c13e:	1aaa      	subs	r2, r5, r2
 800c140:	4591      	cmp	r9, r2
 800c142:	ddba      	ble.n	800c0ba <_dtoa_r+0xb32>
 800c144:	4659      	mov	r1, fp
 800c146:	2300      	movs	r3, #0
 800c148:	220a      	movs	r2, #10
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 fa96 	bl	800c67c <__multadd>
 800c150:	4683      	mov	fp, r0
 800c152:	e7eb      	b.n	800c12c <_dtoa_r+0xba4>
 800c154:	080100cb 	.word	0x080100cb
 800c158:	08010024 	.word	0x08010024
 800c15c:	08010048 	.word	0x08010048

0800c160 <__sflush_r>:
 800c160:	898a      	ldrh	r2, [r1, #12]
 800c162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c166:	4605      	mov	r5, r0
 800c168:	0710      	lsls	r0, r2, #28
 800c16a:	460c      	mov	r4, r1
 800c16c:	d458      	bmi.n	800c220 <__sflush_r+0xc0>
 800c16e:	684b      	ldr	r3, [r1, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	dc05      	bgt.n	800c180 <__sflush_r+0x20>
 800c174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c176:	2b00      	cmp	r3, #0
 800c178:	dc02      	bgt.n	800c180 <__sflush_r+0x20>
 800c17a:	2000      	movs	r0, #0
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c182:	2e00      	cmp	r6, #0
 800c184:	d0f9      	beq.n	800c17a <__sflush_r+0x1a>
 800c186:	2300      	movs	r3, #0
 800c188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c18c:	682f      	ldr	r7, [r5, #0]
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	d032      	beq.n	800c1f8 <__sflush_r+0x98>
 800c192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	075a      	lsls	r2, r3, #29
 800c198:	d505      	bpl.n	800c1a6 <__sflush_r+0x46>
 800c19a:	6863      	ldr	r3, [r4, #4]
 800c19c:	1ac0      	subs	r0, r0, r3
 800c19e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1a0:	b10b      	cbz	r3, 800c1a6 <__sflush_r+0x46>
 800c1a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1a4:	1ac0      	subs	r0, r0, r3
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ac:	6a21      	ldr	r1, [r4, #32]
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47b0      	blx	r6
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	d106      	bne.n	800c1c6 <__sflush_r+0x66>
 800c1b8:	6829      	ldr	r1, [r5, #0]
 800c1ba:	291d      	cmp	r1, #29
 800c1bc:	d82c      	bhi.n	800c218 <__sflush_r+0xb8>
 800c1be:	4a2a      	ldr	r2, [pc, #168]	; (800c268 <__sflush_r+0x108>)
 800c1c0:	40ca      	lsrs	r2, r1
 800c1c2:	07d6      	lsls	r6, r2, #31
 800c1c4:	d528      	bpl.n	800c218 <__sflush_r+0xb8>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	6062      	str	r2, [r4, #4]
 800c1ca:	04d9      	lsls	r1, r3, #19
 800c1cc:	6922      	ldr	r2, [r4, #16]
 800c1ce:	6022      	str	r2, [r4, #0]
 800c1d0:	d504      	bpl.n	800c1dc <__sflush_r+0x7c>
 800c1d2:	1c42      	adds	r2, r0, #1
 800c1d4:	d101      	bne.n	800c1da <__sflush_r+0x7a>
 800c1d6:	682b      	ldr	r3, [r5, #0]
 800c1d8:	b903      	cbnz	r3, 800c1dc <__sflush_r+0x7c>
 800c1da:	6560      	str	r0, [r4, #84]	; 0x54
 800c1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1de:	602f      	str	r7, [r5, #0]
 800c1e0:	2900      	cmp	r1, #0
 800c1e2:	d0ca      	beq.n	800c17a <__sflush_r+0x1a>
 800c1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1e8:	4299      	cmp	r1, r3
 800c1ea:	d002      	beq.n	800c1f2 <__sflush_r+0x92>
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f000 fd71 	bl	800ccd4 <_free_r>
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c1f6:	e7c1      	b.n	800c17c <__sflush_r+0x1c>
 800c1f8:	6a21      	ldr	r1, [r4, #32]
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	47b0      	blx	r6
 800c200:	1c41      	adds	r1, r0, #1
 800c202:	d1c7      	bne.n	800c194 <__sflush_r+0x34>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0c4      	beq.n	800c194 <__sflush_r+0x34>
 800c20a:	2b1d      	cmp	r3, #29
 800c20c:	d001      	beq.n	800c212 <__sflush_r+0xb2>
 800c20e:	2b16      	cmp	r3, #22
 800c210:	d101      	bne.n	800c216 <__sflush_r+0xb6>
 800c212:	602f      	str	r7, [r5, #0]
 800c214:	e7b1      	b.n	800c17a <__sflush_r+0x1a>
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	e7ad      	b.n	800c17c <__sflush_r+0x1c>
 800c220:	690f      	ldr	r7, [r1, #16]
 800c222:	2f00      	cmp	r7, #0
 800c224:	d0a9      	beq.n	800c17a <__sflush_r+0x1a>
 800c226:	0793      	lsls	r3, r2, #30
 800c228:	680e      	ldr	r6, [r1, #0]
 800c22a:	bf08      	it	eq
 800c22c:	694b      	ldreq	r3, [r1, #20]
 800c22e:	600f      	str	r7, [r1, #0]
 800c230:	bf18      	it	ne
 800c232:	2300      	movne	r3, #0
 800c234:	eba6 0807 	sub.w	r8, r6, r7
 800c238:	608b      	str	r3, [r1, #8]
 800c23a:	f1b8 0f00 	cmp.w	r8, #0
 800c23e:	dd9c      	ble.n	800c17a <__sflush_r+0x1a>
 800c240:	6a21      	ldr	r1, [r4, #32]
 800c242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c244:	4643      	mov	r3, r8
 800c246:	463a      	mov	r2, r7
 800c248:	4628      	mov	r0, r5
 800c24a:	47b0      	blx	r6
 800c24c:	2800      	cmp	r0, #0
 800c24e:	dc06      	bgt.n	800c25e <__sflush_r+0xfe>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c256:	81a3      	strh	r3, [r4, #12]
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e78e      	b.n	800c17c <__sflush_r+0x1c>
 800c25e:	4407      	add	r7, r0
 800c260:	eba8 0800 	sub.w	r8, r8, r0
 800c264:	e7e9      	b.n	800c23a <__sflush_r+0xda>
 800c266:	bf00      	nop
 800c268:	20400001 	.word	0x20400001

0800c26c <_fflush_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	690b      	ldr	r3, [r1, #16]
 800c270:	4605      	mov	r5, r0
 800c272:	460c      	mov	r4, r1
 800c274:	b913      	cbnz	r3, 800c27c <_fflush_r+0x10>
 800c276:	2500      	movs	r5, #0
 800c278:	4628      	mov	r0, r5
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	b118      	cbz	r0, 800c286 <_fflush_r+0x1a>
 800c27e:	6983      	ldr	r3, [r0, #24]
 800c280:	b90b      	cbnz	r3, 800c286 <_fflush_r+0x1a>
 800c282:	f000 f887 	bl	800c394 <__sinit>
 800c286:	4b14      	ldr	r3, [pc, #80]	; (800c2d8 <_fflush_r+0x6c>)
 800c288:	429c      	cmp	r4, r3
 800c28a:	d11b      	bne.n	800c2c4 <_fflush_r+0x58>
 800c28c:	686c      	ldr	r4, [r5, #4]
 800c28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0ef      	beq.n	800c276 <_fflush_r+0xa>
 800c296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c298:	07d0      	lsls	r0, r2, #31
 800c29a:	d404      	bmi.n	800c2a6 <_fflush_r+0x3a>
 800c29c:	0599      	lsls	r1, r3, #22
 800c29e:	d402      	bmi.n	800c2a6 <_fflush_r+0x3a>
 800c2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2a2:	f000 f91a 	bl	800c4da <__retarget_lock_acquire_recursive>
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	4621      	mov	r1, r4
 800c2aa:	f7ff ff59 	bl	800c160 <__sflush_r>
 800c2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2b0:	07da      	lsls	r2, r3, #31
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	d4e0      	bmi.n	800c278 <_fflush_r+0xc>
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	059b      	lsls	r3, r3, #22
 800c2ba:	d4dd      	bmi.n	800c278 <_fflush_r+0xc>
 800c2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2be:	f000 f90d 	bl	800c4dc <__retarget_lock_release_recursive>
 800c2c2:	e7d9      	b.n	800c278 <_fflush_r+0xc>
 800c2c4:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <_fflush_r+0x70>)
 800c2c6:	429c      	cmp	r4, r3
 800c2c8:	d101      	bne.n	800c2ce <_fflush_r+0x62>
 800c2ca:	68ac      	ldr	r4, [r5, #8]
 800c2cc:	e7df      	b.n	800c28e <_fflush_r+0x22>
 800c2ce:	4b04      	ldr	r3, [pc, #16]	; (800c2e0 <_fflush_r+0x74>)
 800c2d0:	429c      	cmp	r4, r3
 800c2d2:	bf08      	it	eq
 800c2d4:	68ec      	ldreq	r4, [r5, #12]
 800c2d6:	e7da      	b.n	800c28e <_fflush_r+0x22>
 800c2d8:	080100fc 	.word	0x080100fc
 800c2dc:	0801011c 	.word	0x0801011c
 800c2e0:	080100dc 	.word	0x080100dc

0800c2e4 <std>:
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	b510      	push	{r4, lr}
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2f2:	6083      	str	r3, [r0, #8]
 800c2f4:	8181      	strh	r1, [r0, #12]
 800c2f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c2f8:	81c2      	strh	r2, [r0, #14]
 800c2fa:	6183      	str	r3, [r0, #24]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	2208      	movs	r2, #8
 800c300:	305c      	adds	r0, #92	; 0x5c
 800c302:	f7fe fb69 	bl	800a9d8 <memset>
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <std+0x38>)
 800c308:	6263      	str	r3, [r4, #36]	; 0x24
 800c30a:	4b05      	ldr	r3, [pc, #20]	; (800c320 <std+0x3c>)
 800c30c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c30e:	4b05      	ldr	r3, [pc, #20]	; (800c324 <std+0x40>)
 800c310:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c312:	4b05      	ldr	r3, [pc, #20]	; (800c328 <std+0x44>)
 800c314:	6224      	str	r4, [r4, #32]
 800c316:	6323      	str	r3, [r4, #48]	; 0x30
 800c318:	bd10      	pop	{r4, pc}
 800c31a:	bf00      	nop
 800c31c:	0800d0fd 	.word	0x0800d0fd
 800c320:	0800d11f 	.word	0x0800d11f
 800c324:	0800d157 	.word	0x0800d157
 800c328:	0800d17b 	.word	0x0800d17b

0800c32c <_cleanup_r>:
 800c32c:	4901      	ldr	r1, [pc, #4]	; (800c334 <_cleanup_r+0x8>)
 800c32e:	f000 b8af 	b.w	800c490 <_fwalk_reent>
 800c332:	bf00      	nop
 800c334:	0800c26d 	.word	0x0800c26d

0800c338 <__sfmoreglue>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	1e4a      	subs	r2, r1, #1
 800c33c:	2568      	movs	r5, #104	; 0x68
 800c33e:	4355      	muls	r5, r2
 800c340:	460e      	mov	r6, r1
 800c342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c346:	f000 fd15 	bl	800cd74 <_malloc_r>
 800c34a:	4604      	mov	r4, r0
 800c34c:	b140      	cbz	r0, 800c360 <__sfmoreglue+0x28>
 800c34e:	2100      	movs	r1, #0
 800c350:	e9c0 1600 	strd	r1, r6, [r0]
 800c354:	300c      	adds	r0, #12
 800c356:	60a0      	str	r0, [r4, #8]
 800c358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c35c:	f7fe fb3c 	bl	800a9d8 <memset>
 800c360:	4620      	mov	r0, r4
 800c362:	bd70      	pop	{r4, r5, r6, pc}

0800c364 <__sfp_lock_acquire>:
 800c364:	4801      	ldr	r0, [pc, #4]	; (800c36c <__sfp_lock_acquire+0x8>)
 800c366:	f000 b8b8 	b.w	800c4da <__retarget_lock_acquire_recursive>
 800c36a:	bf00      	nop
 800c36c:	20000888 	.word	0x20000888

0800c370 <__sfp_lock_release>:
 800c370:	4801      	ldr	r0, [pc, #4]	; (800c378 <__sfp_lock_release+0x8>)
 800c372:	f000 b8b3 	b.w	800c4dc <__retarget_lock_release_recursive>
 800c376:	bf00      	nop
 800c378:	20000888 	.word	0x20000888

0800c37c <__sinit_lock_acquire>:
 800c37c:	4801      	ldr	r0, [pc, #4]	; (800c384 <__sinit_lock_acquire+0x8>)
 800c37e:	f000 b8ac 	b.w	800c4da <__retarget_lock_acquire_recursive>
 800c382:	bf00      	nop
 800c384:	20000883 	.word	0x20000883

0800c388 <__sinit_lock_release>:
 800c388:	4801      	ldr	r0, [pc, #4]	; (800c390 <__sinit_lock_release+0x8>)
 800c38a:	f000 b8a7 	b.w	800c4dc <__retarget_lock_release_recursive>
 800c38e:	bf00      	nop
 800c390:	20000883 	.word	0x20000883

0800c394 <__sinit>:
 800c394:	b510      	push	{r4, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	f7ff fff0 	bl	800c37c <__sinit_lock_acquire>
 800c39c:	69a3      	ldr	r3, [r4, #24]
 800c39e:	b11b      	cbz	r3, 800c3a8 <__sinit+0x14>
 800c3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a4:	f7ff bff0 	b.w	800c388 <__sinit_lock_release>
 800c3a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <__sinit+0x68>)
 800c3b0:	4a13      	ldr	r2, [pc, #76]	; (800c400 <__sinit+0x6c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3b6:	42a3      	cmp	r3, r4
 800c3b8:	bf04      	itt	eq
 800c3ba:	2301      	moveq	r3, #1
 800c3bc:	61a3      	streq	r3, [r4, #24]
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 f820 	bl	800c404 <__sfp>
 800c3c4:	6060      	str	r0, [r4, #4]
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 f81c 	bl	800c404 <__sfp>
 800c3cc:	60a0      	str	r0, [r4, #8]
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f000 f818 	bl	800c404 <__sfp>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	60e0      	str	r0, [r4, #12]
 800c3d8:	2104      	movs	r1, #4
 800c3da:	6860      	ldr	r0, [r4, #4]
 800c3dc:	f7ff ff82 	bl	800c2e4 <std>
 800c3e0:	68a0      	ldr	r0, [r4, #8]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	2109      	movs	r1, #9
 800c3e6:	f7ff ff7d 	bl	800c2e4 <std>
 800c3ea:	68e0      	ldr	r0, [r4, #12]
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	2112      	movs	r1, #18
 800c3f0:	f7ff ff78 	bl	800c2e4 <std>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	61a3      	str	r3, [r4, #24]
 800c3f8:	e7d2      	b.n	800c3a0 <__sinit+0xc>
 800c3fa:	bf00      	nop
 800c3fc:	08010010 	.word	0x08010010
 800c400:	0800c32d 	.word	0x0800c32d

0800c404 <__sfp>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	4607      	mov	r7, r0
 800c408:	f7ff ffac 	bl	800c364 <__sfp_lock_acquire>
 800c40c:	4b1e      	ldr	r3, [pc, #120]	; (800c488 <__sfp+0x84>)
 800c40e:	681e      	ldr	r6, [r3, #0]
 800c410:	69b3      	ldr	r3, [r6, #24]
 800c412:	b913      	cbnz	r3, 800c41a <__sfp+0x16>
 800c414:	4630      	mov	r0, r6
 800c416:	f7ff ffbd 	bl	800c394 <__sinit>
 800c41a:	3648      	adds	r6, #72	; 0x48
 800c41c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c420:	3b01      	subs	r3, #1
 800c422:	d503      	bpl.n	800c42c <__sfp+0x28>
 800c424:	6833      	ldr	r3, [r6, #0]
 800c426:	b30b      	cbz	r3, 800c46c <__sfp+0x68>
 800c428:	6836      	ldr	r6, [r6, #0]
 800c42a:	e7f7      	b.n	800c41c <__sfp+0x18>
 800c42c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c430:	b9d5      	cbnz	r5, 800c468 <__sfp+0x64>
 800c432:	4b16      	ldr	r3, [pc, #88]	; (800c48c <__sfp+0x88>)
 800c434:	60e3      	str	r3, [r4, #12]
 800c436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c43a:	6665      	str	r5, [r4, #100]	; 0x64
 800c43c:	f000 f84c 	bl	800c4d8 <__retarget_lock_init_recursive>
 800c440:	f7ff ff96 	bl	800c370 <__sfp_lock_release>
 800c444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c44c:	6025      	str	r5, [r4, #0]
 800c44e:	61a5      	str	r5, [r4, #24]
 800c450:	2208      	movs	r2, #8
 800c452:	4629      	mov	r1, r5
 800c454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c458:	f7fe fabe 	bl	800a9d8 <memset>
 800c45c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c464:	4620      	mov	r0, r4
 800c466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c468:	3468      	adds	r4, #104	; 0x68
 800c46a:	e7d9      	b.n	800c420 <__sfp+0x1c>
 800c46c:	2104      	movs	r1, #4
 800c46e:	4638      	mov	r0, r7
 800c470:	f7ff ff62 	bl	800c338 <__sfmoreglue>
 800c474:	4604      	mov	r4, r0
 800c476:	6030      	str	r0, [r6, #0]
 800c478:	2800      	cmp	r0, #0
 800c47a:	d1d5      	bne.n	800c428 <__sfp+0x24>
 800c47c:	f7ff ff78 	bl	800c370 <__sfp_lock_release>
 800c480:	230c      	movs	r3, #12
 800c482:	603b      	str	r3, [r7, #0]
 800c484:	e7ee      	b.n	800c464 <__sfp+0x60>
 800c486:	bf00      	nop
 800c488:	08010010 	.word	0x08010010
 800c48c:	ffff0001 	.word	0xffff0001

0800c490 <_fwalk_reent>:
 800c490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c494:	4606      	mov	r6, r0
 800c496:	4688      	mov	r8, r1
 800c498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c49c:	2700      	movs	r7, #0
 800c49e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c4a6:	d505      	bpl.n	800c4b4 <_fwalk_reent+0x24>
 800c4a8:	6824      	ldr	r4, [r4, #0]
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	d1f7      	bne.n	800c49e <_fwalk_reent+0xe>
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4b4:	89ab      	ldrh	r3, [r5, #12]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d907      	bls.n	800c4ca <_fwalk_reent+0x3a>
 800c4ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	d003      	beq.n	800c4ca <_fwalk_reent+0x3a>
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	47c0      	blx	r8
 800c4c8:	4307      	orrs	r7, r0
 800c4ca:	3568      	adds	r5, #104	; 0x68
 800c4cc:	e7e9      	b.n	800c4a2 <_fwalk_reent+0x12>
	...

0800c4d0 <_localeconv_r>:
 800c4d0:	4800      	ldr	r0, [pc, #0]	; (800c4d4 <_localeconv_r+0x4>)
 800c4d2:	4770      	bx	lr
 800c4d4:	200001b8 	.word	0x200001b8

0800c4d8 <__retarget_lock_init_recursive>:
 800c4d8:	4770      	bx	lr

0800c4da <__retarget_lock_acquire_recursive>:
 800c4da:	4770      	bx	lr

0800c4dc <__retarget_lock_release_recursive>:
 800c4dc:	4770      	bx	lr

0800c4de <__swhatbuf_r>:
 800c4de:	b570      	push	{r4, r5, r6, lr}
 800c4e0:	460e      	mov	r6, r1
 800c4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	b096      	sub	sp, #88	; 0x58
 800c4ea:	4614      	mov	r4, r2
 800c4ec:	461d      	mov	r5, r3
 800c4ee:	da07      	bge.n	800c500 <__swhatbuf_r+0x22>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	602b      	str	r3, [r5, #0]
 800c4f4:	89b3      	ldrh	r3, [r6, #12]
 800c4f6:	061a      	lsls	r2, r3, #24
 800c4f8:	d410      	bmi.n	800c51c <__swhatbuf_r+0x3e>
 800c4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4fe:	e00e      	b.n	800c51e <__swhatbuf_r+0x40>
 800c500:	466a      	mov	r2, sp
 800c502:	f000 fe91 	bl	800d228 <_fstat_r>
 800c506:	2800      	cmp	r0, #0
 800c508:	dbf2      	blt.n	800c4f0 <__swhatbuf_r+0x12>
 800c50a:	9a01      	ldr	r2, [sp, #4]
 800c50c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c514:	425a      	negs	r2, r3
 800c516:	415a      	adcs	r2, r3
 800c518:	602a      	str	r2, [r5, #0]
 800c51a:	e7ee      	b.n	800c4fa <__swhatbuf_r+0x1c>
 800c51c:	2340      	movs	r3, #64	; 0x40
 800c51e:	2000      	movs	r0, #0
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	b016      	add	sp, #88	; 0x58
 800c524:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c528 <__smakebuf_r>:
 800c528:	898b      	ldrh	r3, [r1, #12]
 800c52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c52c:	079d      	lsls	r5, r3, #30
 800c52e:	4606      	mov	r6, r0
 800c530:	460c      	mov	r4, r1
 800c532:	d507      	bpl.n	800c544 <__smakebuf_r+0x1c>
 800c534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	2301      	movs	r3, #1
 800c53e:	6163      	str	r3, [r4, #20]
 800c540:	b002      	add	sp, #8
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	ab01      	add	r3, sp, #4
 800c546:	466a      	mov	r2, sp
 800c548:	f7ff ffc9 	bl	800c4de <__swhatbuf_r>
 800c54c:	9900      	ldr	r1, [sp, #0]
 800c54e:	4605      	mov	r5, r0
 800c550:	4630      	mov	r0, r6
 800c552:	f000 fc0f 	bl	800cd74 <_malloc_r>
 800c556:	b948      	cbnz	r0, 800c56c <__smakebuf_r+0x44>
 800c558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c55c:	059a      	lsls	r2, r3, #22
 800c55e:	d4ef      	bmi.n	800c540 <__smakebuf_r+0x18>
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	f043 0302 	orr.w	r3, r3, #2
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	e7e3      	b.n	800c534 <__smakebuf_r+0xc>
 800c56c:	4b0d      	ldr	r3, [pc, #52]	; (800c5a4 <__smakebuf_r+0x7c>)
 800c56e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	6020      	str	r0, [r4, #0]
 800c574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c578:	81a3      	strh	r3, [r4, #12]
 800c57a:	9b00      	ldr	r3, [sp, #0]
 800c57c:	6163      	str	r3, [r4, #20]
 800c57e:	9b01      	ldr	r3, [sp, #4]
 800c580:	6120      	str	r0, [r4, #16]
 800c582:	b15b      	cbz	r3, 800c59c <__smakebuf_r+0x74>
 800c584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c588:	4630      	mov	r0, r6
 800c58a:	f000 fe5f 	bl	800d24c <_isatty_r>
 800c58e:	b128      	cbz	r0, 800c59c <__smakebuf_r+0x74>
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	f023 0303 	bic.w	r3, r3, #3
 800c596:	f043 0301 	orr.w	r3, r3, #1
 800c59a:	81a3      	strh	r3, [r4, #12]
 800c59c:	89a0      	ldrh	r0, [r4, #12]
 800c59e:	4305      	orrs	r5, r0
 800c5a0:	81a5      	strh	r5, [r4, #12]
 800c5a2:	e7cd      	b.n	800c540 <__smakebuf_r+0x18>
 800c5a4:	0800c32d 	.word	0x0800c32d

0800c5a8 <malloc>:
 800c5a8:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <malloc+0xc>)
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	f000 bbe1 	b.w	800cd74 <_malloc_r>
 800c5b2:	bf00      	nop
 800c5b4:	20000064 	.word	0x20000064

0800c5b8 <_Balloc>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5bc:	4604      	mov	r4, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	b976      	cbnz	r6, 800c5e0 <_Balloc+0x28>
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f7ff fff0 	bl	800c5a8 <malloc>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	6260      	str	r0, [r4, #36]	; 0x24
 800c5cc:	b920      	cbnz	r0, 800c5d8 <_Balloc+0x20>
 800c5ce:	4b18      	ldr	r3, [pc, #96]	; (800c630 <_Balloc+0x78>)
 800c5d0:	4818      	ldr	r0, [pc, #96]	; (800c634 <_Balloc+0x7c>)
 800c5d2:	2166      	movs	r1, #102	; 0x66
 800c5d4:	f000 fde8 	bl	800d1a8 <__assert_func>
 800c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5dc:	6006      	str	r6, [r0, #0]
 800c5de:	60c6      	str	r6, [r0, #12]
 800c5e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c5e2:	68f3      	ldr	r3, [r6, #12]
 800c5e4:	b183      	cbz	r3, 800c608 <_Balloc+0x50>
 800c5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5ee:	b9b8      	cbnz	r0, 800c620 <_Balloc+0x68>
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5f6:	1d72      	adds	r2, r6, #5
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 fb5a 	bl	800ccb4 <_calloc_r>
 800c600:	b160      	cbz	r0, 800c61c <_Balloc+0x64>
 800c602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c606:	e00e      	b.n	800c626 <_Balloc+0x6e>
 800c608:	2221      	movs	r2, #33	; 0x21
 800c60a:	2104      	movs	r1, #4
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 fb51 	bl	800ccb4 <_calloc_r>
 800c612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c614:	60f0      	str	r0, [r6, #12]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e4      	bne.n	800c5e6 <_Balloc+0x2e>
 800c61c:	2000      	movs	r0, #0
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	6802      	ldr	r2, [r0, #0]
 800c622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c626:	2300      	movs	r3, #0
 800c628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c62c:	e7f7      	b.n	800c61e <_Balloc+0x66>
 800c62e:	bf00      	nop
 800c630:	08010055 	.word	0x08010055
 800c634:	0801013c 	.word	0x0801013c

0800c638 <_Bfree>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c63c:	4605      	mov	r5, r0
 800c63e:	460c      	mov	r4, r1
 800c640:	b976      	cbnz	r6, 800c660 <_Bfree+0x28>
 800c642:	2010      	movs	r0, #16
 800c644:	f7ff ffb0 	bl	800c5a8 <malloc>
 800c648:	4602      	mov	r2, r0
 800c64a:	6268      	str	r0, [r5, #36]	; 0x24
 800c64c:	b920      	cbnz	r0, 800c658 <_Bfree+0x20>
 800c64e:	4b09      	ldr	r3, [pc, #36]	; (800c674 <_Bfree+0x3c>)
 800c650:	4809      	ldr	r0, [pc, #36]	; (800c678 <_Bfree+0x40>)
 800c652:	218a      	movs	r1, #138	; 0x8a
 800c654:	f000 fda8 	bl	800d1a8 <__assert_func>
 800c658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c65c:	6006      	str	r6, [r0, #0]
 800c65e:	60c6      	str	r6, [r0, #12]
 800c660:	b13c      	cbz	r4, 800c672 <_Bfree+0x3a>
 800c662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c664:	6862      	ldr	r2, [r4, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c66c:	6021      	str	r1, [r4, #0]
 800c66e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	08010055 	.word	0x08010055
 800c678:	0801013c 	.word	0x0801013c

0800c67c <__multadd>:
 800c67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c680:	690e      	ldr	r6, [r1, #16]
 800c682:	4607      	mov	r7, r0
 800c684:	4698      	mov	r8, r3
 800c686:	460c      	mov	r4, r1
 800c688:	f101 0014 	add.w	r0, r1, #20
 800c68c:	2300      	movs	r3, #0
 800c68e:	6805      	ldr	r5, [r0, #0]
 800c690:	b2a9      	uxth	r1, r5
 800c692:	fb02 8101 	mla	r1, r2, r1, r8
 800c696:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c69a:	0c2d      	lsrs	r5, r5, #16
 800c69c:	fb02 c505 	mla	r5, r2, r5, ip
 800c6a0:	b289      	uxth	r1, r1
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c6a8:	429e      	cmp	r6, r3
 800c6aa:	f840 1b04 	str.w	r1, [r0], #4
 800c6ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c6b2:	dcec      	bgt.n	800c68e <__multadd+0x12>
 800c6b4:	f1b8 0f00 	cmp.w	r8, #0
 800c6b8:	d022      	beq.n	800c700 <__multadd+0x84>
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	42b3      	cmp	r3, r6
 800c6be:	dc19      	bgt.n	800c6f4 <__multadd+0x78>
 800c6c0:	6861      	ldr	r1, [r4, #4]
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	3101      	adds	r1, #1
 800c6c6:	f7ff ff77 	bl	800c5b8 <_Balloc>
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	b928      	cbnz	r0, 800c6da <__multadd+0x5e>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <__multadd+0x8c>)
 800c6d2:	480e      	ldr	r0, [pc, #56]	; (800c70c <__multadd+0x90>)
 800c6d4:	21b5      	movs	r1, #181	; 0xb5
 800c6d6:	f000 fd67 	bl	800d1a8 <__assert_func>
 800c6da:	6922      	ldr	r2, [r4, #16]
 800c6dc:	3202      	adds	r2, #2
 800c6de:	f104 010c 	add.w	r1, r4, #12
 800c6e2:	0092      	lsls	r2, r2, #2
 800c6e4:	300c      	adds	r0, #12
 800c6e6:	f7fe f969 	bl	800a9bc <memcpy>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f7ff ffa3 	bl	800c638 <_Bfree>
 800c6f2:	462c      	mov	r4, r5
 800c6f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c6f8:	3601      	adds	r6, #1
 800c6fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800c6fe:	6126      	str	r6, [r4, #16]
 800c700:	4620      	mov	r0, r4
 800c702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c706:	bf00      	nop
 800c708:	080100cb 	.word	0x080100cb
 800c70c:	0801013c 	.word	0x0801013c

0800c710 <__hi0bits>:
 800c710:	0c03      	lsrs	r3, r0, #16
 800c712:	041b      	lsls	r3, r3, #16
 800c714:	b9d3      	cbnz	r3, 800c74c <__hi0bits+0x3c>
 800c716:	0400      	lsls	r0, r0, #16
 800c718:	2310      	movs	r3, #16
 800c71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c71e:	bf04      	itt	eq
 800c720:	0200      	lsleq	r0, r0, #8
 800c722:	3308      	addeq	r3, #8
 800c724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c728:	bf04      	itt	eq
 800c72a:	0100      	lsleq	r0, r0, #4
 800c72c:	3304      	addeq	r3, #4
 800c72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c732:	bf04      	itt	eq
 800c734:	0080      	lsleq	r0, r0, #2
 800c736:	3302      	addeq	r3, #2
 800c738:	2800      	cmp	r0, #0
 800c73a:	db05      	blt.n	800c748 <__hi0bits+0x38>
 800c73c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c740:	f103 0301 	add.w	r3, r3, #1
 800c744:	bf08      	it	eq
 800c746:	2320      	moveq	r3, #32
 800c748:	4618      	mov	r0, r3
 800c74a:	4770      	bx	lr
 800c74c:	2300      	movs	r3, #0
 800c74e:	e7e4      	b.n	800c71a <__hi0bits+0xa>

0800c750 <__lo0bits>:
 800c750:	6803      	ldr	r3, [r0, #0]
 800c752:	f013 0207 	ands.w	r2, r3, #7
 800c756:	4601      	mov	r1, r0
 800c758:	d00b      	beq.n	800c772 <__lo0bits+0x22>
 800c75a:	07da      	lsls	r2, r3, #31
 800c75c:	d424      	bmi.n	800c7a8 <__lo0bits+0x58>
 800c75e:	0798      	lsls	r0, r3, #30
 800c760:	bf49      	itett	mi
 800c762:	085b      	lsrmi	r3, r3, #1
 800c764:	089b      	lsrpl	r3, r3, #2
 800c766:	2001      	movmi	r0, #1
 800c768:	600b      	strmi	r3, [r1, #0]
 800c76a:	bf5c      	itt	pl
 800c76c:	600b      	strpl	r3, [r1, #0]
 800c76e:	2002      	movpl	r0, #2
 800c770:	4770      	bx	lr
 800c772:	b298      	uxth	r0, r3
 800c774:	b9b0      	cbnz	r0, 800c7a4 <__lo0bits+0x54>
 800c776:	0c1b      	lsrs	r3, r3, #16
 800c778:	2010      	movs	r0, #16
 800c77a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c77e:	bf04      	itt	eq
 800c780:	0a1b      	lsreq	r3, r3, #8
 800c782:	3008      	addeq	r0, #8
 800c784:	071a      	lsls	r2, r3, #28
 800c786:	bf04      	itt	eq
 800c788:	091b      	lsreq	r3, r3, #4
 800c78a:	3004      	addeq	r0, #4
 800c78c:	079a      	lsls	r2, r3, #30
 800c78e:	bf04      	itt	eq
 800c790:	089b      	lsreq	r3, r3, #2
 800c792:	3002      	addeq	r0, #2
 800c794:	07da      	lsls	r2, r3, #31
 800c796:	d403      	bmi.n	800c7a0 <__lo0bits+0x50>
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	f100 0001 	add.w	r0, r0, #1
 800c79e:	d005      	beq.n	800c7ac <__lo0bits+0x5c>
 800c7a0:	600b      	str	r3, [r1, #0]
 800c7a2:	4770      	bx	lr
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	e7e8      	b.n	800c77a <__lo0bits+0x2a>
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	4770      	bx	lr
 800c7ac:	2020      	movs	r0, #32
 800c7ae:	4770      	bx	lr

0800c7b0 <__i2b>:
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	f7ff feff 	bl	800c5b8 <_Balloc>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	b928      	cbnz	r0, 800c7ca <__i2b+0x1a>
 800c7be:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <__i2b+0x24>)
 800c7c0:	4805      	ldr	r0, [pc, #20]	; (800c7d8 <__i2b+0x28>)
 800c7c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c7c6:	f000 fcef 	bl	800d1a8 <__assert_func>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	6144      	str	r4, [r0, #20]
 800c7ce:	6103      	str	r3, [r0, #16]
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	bf00      	nop
 800c7d4:	080100cb 	.word	0x080100cb
 800c7d8:	0801013c 	.word	0x0801013c

0800c7dc <__multiply>:
 800c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	690a      	ldr	r2, [r1, #16]
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	bfb8      	it	lt
 800c7ea:	460b      	movlt	r3, r1
 800c7ec:	460d      	mov	r5, r1
 800c7ee:	bfbc      	itt	lt
 800c7f0:	4625      	movlt	r5, r4
 800c7f2:	461c      	movlt	r4, r3
 800c7f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c7f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c7fc:	68ab      	ldr	r3, [r5, #8]
 800c7fe:	6869      	ldr	r1, [r5, #4]
 800c800:	eb0a 0709 	add.w	r7, sl, r9
 800c804:	42bb      	cmp	r3, r7
 800c806:	b085      	sub	sp, #20
 800c808:	bfb8      	it	lt
 800c80a:	3101      	addlt	r1, #1
 800c80c:	f7ff fed4 	bl	800c5b8 <_Balloc>
 800c810:	b930      	cbnz	r0, 800c820 <__multiply+0x44>
 800c812:	4602      	mov	r2, r0
 800c814:	4b42      	ldr	r3, [pc, #264]	; (800c920 <__multiply+0x144>)
 800c816:	4843      	ldr	r0, [pc, #268]	; (800c924 <__multiply+0x148>)
 800c818:	f240 115d 	movw	r1, #349	; 0x15d
 800c81c:	f000 fcc4 	bl	800d1a8 <__assert_func>
 800c820:	f100 0614 	add.w	r6, r0, #20
 800c824:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c828:	4633      	mov	r3, r6
 800c82a:	2200      	movs	r2, #0
 800c82c:	4543      	cmp	r3, r8
 800c82e:	d31e      	bcc.n	800c86e <__multiply+0x92>
 800c830:	f105 0c14 	add.w	ip, r5, #20
 800c834:	f104 0314 	add.w	r3, r4, #20
 800c838:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c83c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	ebac 0205 	sub.w	r2, ip, r5
 800c846:	3a15      	subs	r2, #21
 800c848:	f022 0203 	bic.w	r2, r2, #3
 800c84c:	3204      	adds	r2, #4
 800c84e:	f105 0115 	add.w	r1, r5, #21
 800c852:	458c      	cmp	ip, r1
 800c854:	bf38      	it	cc
 800c856:	2204      	movcc	r2, #4
 800c858:	9201      	str	r2, [sp, #4]
 800c85a:	9a02      	ldr	r2, [sp, #8]
 800c85c:	9303      	str	r3, [sp, #12]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d808      	bhi.n	800c874 <__multiply+0x98>
 800c862:	2f00      	cmp	r7, #0
 800c864:	dc55      	bgt.n	800c912 <__multiply+0x136>
 800c866:	6107      	str	r7, [r0, #16]
 800c868:	b005      	add	sp, #20
 800c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86e:	f843 2b04 	str.w	r2, [r3], #4
 800c872:	e7db      	b.n	800c82c <__multiply+0x50>
 800c874:	f8b3 a000 	ldrh.w	sl, [r3]
 800c878:	f1ba 0f00 	cmp.w	sl, #0
 800c87c:	d020      	beq.n	800c8c0 <__multiply+0xe4>
 800c87e:	f105 0e14 	add.w	lr, r5, #20
 800c882:	46b1      	mov	r9, r6
 800c884:	2200      	movs	r2, #0
 800c886:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c88a:	f8d9 b000 	ldr.w	fp, [r9]
 800c88e:	b2a1      	uxth	r1, r4
 800c890:	fa1f fb8b 	uxth.w	fp, fp
 800c894:	fb0a b101 	mla	r1, sl, r1, fp
 800c898:	4411      	add	r1, r2
 800c89a:	f8d9 2000 	ldr.w	r2, [r9]
 800c89e:	0c24      	lsrs	r4, r4, #16
 800c8a0:	0c12      	lsrs	r2, r2, #16
 800c8a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800c8a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c8aa:	b289      	uxth	r1, r1
 800c8ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c8b0:	45f4      	cmp	ip, lr
 800c8b2:	f849 1b04 	str.w	r1, [r9], #4
 800c8b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c8ba:	d8e4      	bhi.n	800c886 <__multiply+0xaa>
 800c8bc:	9901      	ldr	r1, [sp, #4]
 800c8be:	5072      	str	r2, [r6, r1]
 800c8c0:	9a03      	ldr	r2, [sp, #12]
 800c8c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	f1b9 0f00 	cmp.w	r9, #0
 800c8cc:	d01f      	beq.n	800c90e <__multiply+0x132>
 800c8ce:	6834      	ldr	r4, [r6, #0]
 800c8d0:	f105 0114 	add.w	r1, r5, #20
 800c8d4:	46b6      	mov	lr, r6
 800c8d6:	f04f 0a00 	mov.w	sl, #0
 800c8da:	880a      	ldrh	r2, [r1, #0]
 800c8dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c8e0:	fb09 b202 	mla	r2, r9, r2, fp
 800c8e4:	4492      	add	sl, r2
 800c8e6:	b2a4      	uxth	r4, r4
 800c8e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c8ec:	f84e 4b04 	str.w	r4, [lr], #4
 800c8f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800c8f4:	f8be 2000 	ldrh.w	r2, [lr]
 800c8f8:	0c24      	lsrs	r4, r4, #16
 800c8fa:	fb09 2404 	mla	r4, r9, r4, r2
 800c8fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c902:	458c      	cmp	ip, r1
 800c904:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c908:	d8e7      	bhi.n	800c8da <__multiply+0xfe>
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	50b4      	str	r4, [r6, r2]
 800c90e:	3604      	adds	r6, #4
 800c910:	e7a3      	b.n	800c85a <__multiply+0x7e>
 800c912:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1a5      	bne.n	800c866 <__multiply+0x8a>
 800c91a:	3f01      	subs	r7, #1
 800c91c:	e7a1      	b.n	800c862 <__multiply+0x86>
 800c91e:	bf00      	nop
 800c920:	080100cb 	.word	0x080100cb
 800c924:	0801013c 	.word	0x0801013c

0800c928 <__pow5mult>:
 800c928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c92c:	4615      	mov	r5, r2
 800c92e:	f012 0203 	ands.w	r2, r2, #3
 800c932:	4606      	mov	r6, r0
 800c934:	460f      	mov	r7, r1
 800c936:	d007      	beq.n	800c948 <__pow5mult+0x20>
 800c938:	4c25      	ldr	r4, [pc, #148]	; (800c9d0 <__pow5mult+0xa8>)
 800c93a:	3a01      	subs	r2, #1
 800c93c:	2300      	movs	r3, #0
 800c93e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c942:	f7ff fe9b 	bl	800c67c <__multadd>
 800c946:	4607      	mov	r7, r0
 800c948:	10ad      	asrs	r5, r5, #2
 800c94a:	d03d      	beq.n	800c9c8 <__pow5mult+0xa0>
 800c94c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c94e:	b97c      	cbnz	r4, 800c970 <__pow5mult+0x48>
 800c950:	2010      	movs	r0, #16
 800c952:	f7ff fe29 	bl	800c5a8 <malloc>
 800c956:	4602      	mov	r2, r0
 800c958:	6270      	str	r0, [r6, #36]	; 0x24
 800c95a:	b928      	cbnz	r0, 800c968 <__pow5mult+0x40>
 800c95c:	4b1d      	ldr	r3, [pc, #116]	; (800c9d4 <__pow5mult+0xac>)
 800c95e:	481e      	ldr	r0, [pc, #120]	; (800c9d8 <__pow5mult+0xb0>)
 800c960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c964:	f000 fc20 	bl	800d1a8 <__assert_func>
 800c968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c96c:	6004      	str	r4, [r0, #0]
 800c96e:	60c4      	str	r4, [r0, #12]
 800c970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c978:	b94c      	cbnz	r4, 800c98e <__pow5mult+0x66>
 800c97a:	f240 2171 	movw	r1, #625	; 0x271
 800c97e:	4630      	mov	r0, r6
 800c980:	f7ff ff16 	bl	800c7b0 <__i2b>
 800c984:	2300      	movs	r3, #0
 800c986:	f8c8 0008 	str.w	r0, [r8, #8]
 800c98a:	4604      	mov	r4, r0
 800c98c:	6003      	str	r3, [r0, #0]
 800c98e:	f04f 0900 	mov.w	r9, #0
 800c992:	07eb      	lsls	r3, r5, #31
 800c994:	d50a      	bpl.n	800c9ac <__pow5mult+0x84>
 800c996:	4639      	mov	r1, r7
 800c998:	4622      	mov	r2, r4
 800c99a:	4630      	mov	r0, r6
 800c99c:	f7ff ff1e 	bl	800c7dc <__multiply>
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7ff fe47 	bl	800c638 <_Bfree>
 800c9aa:	4647      	mov	r7, r8
 800c9ac:	106d      	asrs	r5, r5, #1
 800c9ae:	d00b      	beq.n	800c9c8 <__pow5mult+0xa0>
 800c9b0:	6820      	ldr	r0, [r4, #0]
 800c9b2:	b938      	cbnz	r0, 800c9c4 <__pow5mult+0x9c>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7ff ff0f 	bl	800c7dc <__multiply>
 800c9be:	6020      	str	r0, [r4, #0]
 800c9c0:	f8c0 9000 	str.w	r9, [r0]
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	e7e4      	b.n	800c992 <__pow5mult+0x6a>
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ce:	bf00      	nop
 800c9d0:	08010290 	.word	0x08010290
 800c9d4:	08010055 	.word	0x08010055
 800c9d8:	0801013c 	.word	0x0801013c

0800c9dc <__lshift>:
 800c9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	6849      	ldr	r1, [r1, #4]
 800c9e4:	6923      	ldr	r3, [r4, #16]
 800c9e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9ea:	68a3      	ldr	r3, [r4, #8]
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	4691      	mov	r9, r2
 800c9f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9f4:	f108 0601 	add.w	r6, r8, #1
 800c9f8:	42b3      	cmp	r3, r6
 800c9fa:	db0b      	blt.n	800ca14 <__lshift+0x38>
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f7ff fddb 	bl	800c5b8 <_Balloc>
 800ca02:	4605      	mov	r5, r0
 800ca04:	b948      	cbnz	r0, 800ca1a <__lshift+0x3e>
 800ca06:	4602      	mov	r2, r0
 800ca08:	4b28      	ldr	r3, [pc, #160]	; (800caac <__lshift+0xd0>)
 800ca0a:	4829      	ldr	r0, [pc, #164]	; (800cab0 <__lshift+0xd4>)
 800ca0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca10:	f000 fbca 	bl	800d1a8 <__assert_func>
 800ca14:	3101      	adds	r1, #1
 800ca16:	005b      	lsls	r3, r3, #1
 800ca18:	e7ee      	b.n	800c9f8 <__lshift+0x1c>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f100 0114 	add.w	r1, r0, #20
 800ca20:	f100 0210 	add.w	r2, r0, #16
 800ca24:	4618      	mov	r0, r3
 800ca26:	4553      	cmp	r3, sl
 800ca28:	db33      	blt.n	800ca92 <__lshift+0xb6>
 800ca2a:	6920      	ldr	r0, [r4, #16]
 800ca2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca30:	f104 0314 	add.w	r3, r4, #20
 800ca34:	f019 091f 	ands.w	r9, r9, #31
 800ca38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca40:	d02b      	beq.n	800ca9a <__lshift+0xbe>
 800ca42:	f1c9 0e20 	rsb	lr, r9, #32
 800ca46:	468a      	mov	sl, r1
 800ca48:	2200      	movs	r2, #0
 800ca4a:	6818      	ldr	r0, [r3, #0]
 800ca4c:	fa00 f009 	lsl.w	r0, r0, r9
 800ca50:	4302      	orrs	r2, r0
 800ca52:	f84a 2b04 	str.w	r2, [sl], #4
 800ca56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca5a:	459c      	cmp	ip, r3
 800ca5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca60:	d8f3      	bhi.n	800ca4a <__lshift+0x6e>
 800ca62:	ebac 0304 	sub.w	r3, ip, r4
 800ca66:	3b15      	subs	r3, #21
 800ca68:	f023 0303 	bic.w	r3, r3, #3
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	f104 0015 	add.w	r0, r4, #21
 800ca72:	4584      	cmp	ip, r0
 800ca74:	bf38      	it	cc
 800ca76:	2304      	movcc	r3, #4
 800ca78:	50ca      	str	r2, [r1, r3]
 800ca7a:	b10a      	cbz	r2, 800ca80 <__lshift+0xa4>
 800ca7c:	f108 0602 	add.w	r6, r8, #2
 800ca80:	3e01      	subs	r6, #1
 800ca82:	4638      	mov	r0, r7
 800ca84:	612e      	str	r6, [r5, #16]
 800ca86:	4621      	mov	r1, r4
 800ca88:	f7ff fdd6 	bl	800c638 <_Bfree>
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca96:	3301      	adds	r3, #1
 800ca98:	e7c5      	b.n	800ca26 <__lshift+0x4a>
 800ca9a:	3904      	subs	r1, #4
 800ca9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800caa0:	f841 2f04 	str.w	r2, [r1, #4]!
 800caa4:	459c      	cmp	ip, r3
 800caa6:	d8f9      	bhi.n	800ca9c <__lshift+0xc0>
 800caa8:	e7ea      	b.n	800ca80 <__lshift+0xa4>
 800caaa:	bf00      	nop
 800caac:	080100cb 	.word	0x080100cb
 800cab0:	0801013c 	.word	0x0801013c

0800cab4 <__mcmp>:
 800cab4:	b530      	push	{r4, r5, lr}
 800cab6:	6902      	ldr	r2, [r0, #16]
 800cab8:	690c      	ldr	r4, [r1, #16]
 800caba:	1b12      	subs	r2, r2, r4
 800cabc:	d10e      	bne.n	800cadc <__mcmp+0x28>
 800cabe:	f100 0314 	add.w	r3, r0, #20
 800cac2:	3114      	adds	r1, #20
 800cac4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cac8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cacc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cad0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cad4:	42a5      	cmp	r5, r4
 800cad6:	d003      	beq.n	800cae0 <__mcmp+0x2c>
 800cad8:	d305      	bcc.n	800cae6 <__mcmp+0x32>
 800cada:	2201      	movs	r2, #1
 800cadc:	4610      	mov	r0, r2
 800cade:	bd30      	pop	{r4, r5, pc}
 800cae0:	4283      	cmp	r3, r0
 800cae2:	d3f3      	bcc.n	800cacc <__mcmp+0x18>
 800cae4:	e7fa      	b.n	800cadc <__mcmp+0x28>
 800cae6:	f04f 32ff 	mov.w	r2, #4294967295
 800caea:	e7f7      	b.n	800cadc <__mcmp+0x28>

0800caec <__mdiff>:
 800caec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	460c      	mov	r4, r1
 800caf2:	4606      	mov	r6, r0
 800caf4:	4611      	mov	r1, r2
 800caf6:	4620      	mov	r0, r4
 800caf8:	4617      	mov	r7, r2
 800cafa:	f7ff ffdb 	bl	800cab4 <__mcmp>
 800cafe:	1e05      	subs	r5, r0, #0
 800cb00:	d110      	bne.n	800cb24 <__mdiff+0x38>
 800cb02:	4629      	mov	r1, r5
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7ff fd57 	bl	800c5b8 <_Balloc>
 800cb0a:	b930      	cbnz	r0, 800cb1a <__mdiff+0x2e>
 800cb0c:	4b39      	ldr	r3, [pc, #228]	; (800cbf4 <__mdiff+0x108>)
 800cb0e:	4602      	mov	r2, r0
 800cb10:	f240 2132 	movw	r1, #562	; 0x232
 800cb14:	4838      	ldr	r0, [pc, #224]	; (800cbf8 <__mdiff+0x10c>)
 800cb16:	f000 fb47 	bl	800d1a8 <__assert_func>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb24:	bfa4      	itt	ge
 800cb26:	463b      	movge	r3, r7
 800cb28:	4627      	movge	r7, r4
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	bfa6      	itte	ge
 800cb30:	461c      	movge	r4, r3
 800cb32:	2500      	movge	r5, #0
 800cb34:	2501      	movlt	r5, #1
 800cb36:	f7ff fd3f 	bl	800c5b8 <_Balloc>
 800cb3a:	b920      	cbnz	r0, 800cb46 <__mdiff+0x5a>
 800cb3c:	4b2d      	ldr	r3, [pc, #180]	; (800cbf4 <__mdiff+0x108>)
 800cb3e:	4602      	mov	r2, r0
 800cb40:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cb44:	e7e6      	b.n	800cb14 <__mdiff+0x28>
 800cb46:	693e      	ldr	r6, [r7, #16]
 800cb48:	60c5      	str	r5, [r0, #12]
 800cb4a:	6925      	ldr	r5, [r4, #16]
 800cb4c:	f107 0114 	add.w	r1, r7, #20
 800cb50:	f104 0914 	add.w	r9, r4, #20
 800cb54:	f100 0e14 	add.w	lr, r0, #20
 800cb58:	f107 0210 	add.w	r2, r7, #16
 800cb5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cb60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cb64:	46f2      	mov	sl, lr
 800cb66:	2700      	movs	r7, #0
 800cb68:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb70:	fa1f f883 	uxth.w	r8, r3
 800cb74:	fa17 f78b 	uxtah	r7, r7, fp
 800cb78:	0c1b      	lsrs	r3, r3, #16
 800cb7a:	eba7 0808 	sub.w	r8, r7, r8
 800cb7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb86:	fa1f f888 	uxth.w	r8, r8
 800cb8a:	141f      	asrs	r7, r3, #16
 800cb8c:	454d      	cmp	r5, r9
 800cb8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb92:	f84a 3b04 	str.w	r3, [sl], #4
 800cb96:	d8e7      	bhi.n	800cb68 <__mdiff+0x7c>
 800cb98:	1b2b      	subs	r3, r5, r4
 800cb9a:	3b15      	subs	r3, #21
 800cb9c:	f023 0303 	bic.w	r3, r3, #3
 800cba0:	3304      	adds	r3, #4
 800cba2:	3415      	adds	r4, #21
 800cba4:	42a5      	cmp	r5, r4
 800cba6:	bf38      	it	cc
 800cba8:	2304      	movcc	r3, #4
 800cbaa:	4419      	add	r1, r3
 800cbac:	4473      	add	r3, lr
 800cbae:	469e      	mov	lr, r3
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	4565      	cmp	r5, ip
 800cbb4:	d30e      	bcc.n	800cbd4 <__mdiff+0xe8>
 800cbb6:	f10c 0203 	add.w	r2, ip, #3
 800cbba:	1a52      	subs	r2, r2, r1
 800cbbc:	f022 0203 	bic.w	r2, r2, #3
 800cbc0:	3903      	subs	r1, #3
 800cbc2:	458c      	cmp	ip, r1
 800cbc4:	bf38      	it	cc
 800cbc6:	2200      	movcc	r2, #0
 800cbc8:	441a      	add	r2, r3
 800cbca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cbce:	b17b      	cbz	r3, 800cbf0 <__mdiff+0x104>
 800cbd0:	6106      	str	r6, [r0, #16]
 800cbd2:	e7a5      	b.n	800cb20 <__mdiff+0x34>
 800cbd4:	f855 8b04 	ldr.w	r8, [r5], #4
 800cbd8:	fa17 f488 	uxtah	r4, r7, r8
 800cbdc:	1422      	asrs	r2, r4, #16
 800cbde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cbe2:	b2a4      	uxth	r4, r4
 800cbe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cbe8:	f84e 4b04 	str.w	r4, [lr], #4
 800cbec:	1417      	asrs	r7, r2, #16
 800cbee:	e7e0      	b.n	800cbb2 <__mdiff+0xc6>
 800cbf0:	3e01      	subs	r6, #1
 800cbf2:	e7ea      	b.n	800cbca <__mdiff+0xde>
 800cbf4:	080100cb 	.word	0x080100cb
 800cbf8:	0801013c 	.word	0x0801013c

0800cbfc <__d2b>:
 800cbfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc00:	4689      	mov	r9, r1
 800cc02:	2101      	movs	r1, #1
 800cc04:	ec57 6b10 	vmov	r6, r7, d0
 800cc08:	4690      	mov	r8, r2
 800cc0a:	f7ff fcd5 	bl	800c5b8 <_Balloc>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	b930      	cbnz	r0, 800cc20 <__d2b+0x24>
 800cc12:	4602      	mov	r2, r0
 800cc14:	4b25      	ldr	r3, [pc, #148]	; (800ccac <__d2b+0xb0>)
 800cc16:	4826      	ldr	r0, [pc, #152]	; (800ccb0 <__d2b+0xb4>)
 800cc18:	f240 310a 	movw	r1, #778	; 0x30a
 800cc1c:	f000 fac4 	bl	800d1a8 <__assert_func>
 800cc20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc28:	bb35      	cbnz	r5, 800cc78 <__d2b+0x7c>
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	d028      	beq.n	800cc82 <__d2b+0x86>
 800cc30:	4668      	mov	r0, sp
 800cc32:	9600      	str	r6, [sp, #0]
 800cc34:	f7ff fd8c 	bl	800c750 <__lo0bits>
 800cc38:	9900      	ldr	r1, [sp, #0]
 800cc3a:	b300      	cbz	r0, 800cc7e <__d2b+0x82>
 800cc3c:	9a01      	ldr	r2, [sp, #4]
 800cc3e:	f1c0 0320 	rsb	r3, r0, #32
 800cc42:	fa02 f303 	lsl.w	r3, r2, r3
 800cc46:	430b      	orrs	r3, r1
 800cc48:	40c2      	lsrs	r2, r0
 800cc4a:	6163      	str	r3, [r4, #20]
 800cc4c:	9201      	str	r2, [sp, #4]
 800cc4e:	9b01      	ldr	r3, [sp, #4]
 800cc50:	61a3      	str	r3, [r4, #24]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	bf14      	ite	ne
 800cc56:	2202      	movne	r2, #2
 800cc58:	2201      	moveq	r2, #1
 800cc5a:	6122      	str	r2, [r4, #16]
 800cc5c:	b1d5      	cbz	r5, 800cc94 <__d2b+0x98>
 800cc5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc62:	4405      	add	r5, r0
 800cc64:	f8c9 5000 	str.w	r5, [r9]
 800cc68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc6c:	f8c8 0000 	str.w	r0, [r8]
 800cc70:	4620      	mov	r0, r4
 800cc72:	b003      	add	sp, #12
 800cc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc7c:	e7d5      	b.n	800cc2a <__d2b+0x2e>
 800cc7e:	6161      	str	r1, [r4, #20]
 800cc80:	e7e5      	b.n	800cc4e <__d2b+0x52>
 800cc82:	a801      	add	r0, sp, #4
 800cc84:	f7ff fd64 	bl	800c750 <__lo0bits>
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	6163      	str	r3, [r4, #20]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	6122      	str	r2, [r4, #16]
 800cc90:	3020      	adds	r0, #32
 800cc92:	e7e3      	b.n	800cc5c <__d2b+0x60>
 800cc94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc9c:	f8c9 0000 	str.w	r0, [r9]
 800cca0:	6918      	ldr	r0, [r3, #16]
 800cca2:	f7ff fd35 	bl	800c710 <__hi0bits>
 800cca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccaa:	e7df      	b.n	800cc6c <__d2b+0x70>
 800ccac:	080100cb 	.word	0x080100cb
 800ccb0:	0801013c 	.word	0x0801013c

0800ccb4 <_calloc_r>:
 800ccb4:	b513      	push	{r0, r1, r4, lr}
 800ccb6:	434a      	muls	r2, r1
 800ccb8:	4611      	mov	r1, r2
 800ccba:	9201      	str	r2, [sp, #4]
 800ccbc:	f000 f85a 	bl	800cd74 <_malloc_r>
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	b118      	cbz	r0, 800cccc <_calloc_r+0x18>
 800ccc4:	9a01      	ldr	r2, [sp, #4]
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	f7fd fe86 	bl	800a9d8 <memset>
 800cccc:	4620      	mov	r0, r4
 800ccce:	b002      	add	sp, #8
 800ccd0:	bd10      	pop	{r4, pc}
	...

0800ccd4 <_free_r>:
 800ccd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccd6:	2900      	cmp	r1, #0
 800ccd8:	d048      	beq.n	800cd6c <_free_r+0x98>
 800ccda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccde:	9001      	str	r0, [sp, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f1a1 0404 	sub.w	r4, r1, #4
 800cce6:	bfb8      	it	lt
 800cce8:	18e4      	addlt	r4, r4, r3
 800ccea:	f000 fae3 	bl	800d2b4 <__malloc_lock>
 800ccee:	4a20      	ldr	r2, [pc, #128]	; (800cd70 <_free_r+0x9c>)
 800ccf0:	9801      	ldr	r0, [sp, #4]
 800ccf2:	6813      	ldr	r3, [r2, #0]
 800ccf4:	4615      	mov	r5, r2
 800ccf6:	b933      	cbnz	r3, 800cd06 <_free_r+0x32>
 800ccf8:	6063      	str	r3, [r4, #4]
 800ccfa:	6014      	str	r4, [r2, #0]
 800ccfc:	b003      	add	sp, #12
 800ccfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd02:	f000 badd 	b.w	800d2c0 <__malloc_unlock>
 800cd06:	42a3      	cmp	r3, r4
 800cd08:	d90b      	bls.n	800cd22 <_free_r+0x4e>
 800cd0a:	6821      	ldr	r1, [r4, #0]
 800cd0c:	1862      	adds	r2, r4, r1
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	bf04      	itt	eq
 800cd12:	681a      	ldreq	r2, [r3, #0]
 800cd14:	685b      	ldreq	r3, [r3, #4]
 800cd16:	6063      	str	r3, [r4, #4]
 800cd18:	bf04      	itt	eq
 800cd1a:	1852      	addeq	r2, r2, r1
 800cd1c:	6022      	streq	r2, [r4, #0]
 800cd1e:	602c      	str	r4, [r5, #0]
 800cd20:	e7ec      	b.n	800ccfc <_free_r+0x28>
 800cd22:	461a      	mov	r2, r3
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	b10b      	cbz	r3, 800cd2c <_free_r+0x58>
 800cd28:	42a3      	cmp	r3, r4
 800cd2a:	d9fa      	bls.n	800cd22 <_free_r+0x4e>
 800cd2c:	6811      	ldr	r1, [r2, #0]
 800cd2e:	1855      	adds	r5, r2, r1
 800cd30:	42a5      	cmp	r5, r4
 800cd32:	d10b      	bne.n	800cd4c <_free_r+0x78>
 800cd34:	6824      	ldr	r4, [r4, #0]
 800cd36:	4421      	add	r1, r4
 800cd38:	1854      	adds	r4, r2, r1
 800cd3a:	42a3      	cmp	r3, r4
 800cd3c:	6011      	str	r1, [r2, #0]
 800cd3e:	d1dd      	bne.n	800ccfc <_free_r+0x28>
 800cd40:	681c      	ldr	r4, [r3, #0]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	6053      	str	r3, [r2, #4]
 800cd46:	4421      	add	r1, r4
 800cd48:	6011      	str	r1, [r2, #0]
 800cd4a:	e7d7      	b.n	800ccfc <_free_r+0x28>
 800cd4c:	d902      	bls.n	800cd54 <_free_r+0x80>
 800cd4e:	230c      	movs	r3, #12
 800cd50:	6003      	str	r3, [r0, #0]
 800cd52:	e7d3      	b.n	800ccfc <_free_r+0x28>
 800cd54:	6825      	ldr	r5, [r4, #0]
 800cd56:	1961      	adds	r1, r4, r5
 800cd58:	428b      	cmp	r3, r1
 800cd5a:	bf04      	itt	eq
 800cd5c:	6819      	ldreq	r1, [r3, #0]
 800cd5e:	685b      	ldreq	r3, [r3, #4]
 800cd60:	6063      	str	r3, [r4, #4]
 800cd62:	bf04      	itt	eq
 800cd64:	1949      	addeq	r1, r1, r5
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	6054      	str	r4, [r2, #4]
 800cd6a:	e7c7      	b.n	800ccfc <_free_r+0x28>
 800cd6c:	b003      	add	sp, #12
 800cd6e:	bd30      	pop	{r4, r5, pc}
 800cd70:	200004bc 	.word	0x200004bc

0800cd74 <_malloc_r>:
 800cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd76:	1ccd      	adds	r5, r1, #3
 800cd78:	f025 0503 	bic.w	r5, r5, #3
 800cd7c:	3508      	adds	r5, #8
 800cd7e:	2d0c      	cmp	r5, #12
 800cd80:	bf38      	it	cc
 800cd82:	250c      	movcc	r5, #12
 800cd84:	2d00      	cmp	r5, #0
 800cd86:	4606      	mov	r6, r0
 800cd88:	db01      	blt.n	800cd8e <_malloc_r+0x1a>
 800cd8a:	42a9      	cmp	r1, r5
 800cd8c:	d903      	bls.n	800cd96 <_malloc_r+0x22>
 800cd8e:	230c      	movs	r3, #12
 800cd90:	6033      	str	r3, [r6, #0]
 800cd92:	2000      	movs	r0, #0
 800cd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd96:	f000 fa8d 	bl	800d2b4 <__malloc_lock>
 800cd9a:	4921      	ldr	r1, [pc, #132]	; (800ce20 <_malloc_r+0xac>)
 800cd9c:	680a      	ldr	r2, [r1, #0]
 800cd9e:	4614      	mov	r4, r2
 800cda0:	b99c      	cbnz	r4, 800cdca <_malloc_r+0x56>
 800cda2:	4f20      	ldr	r7, [pc, #128]	; (800ce24 <_malloc_r+0xb0>)
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	b923      	cbnz	r3, 800cdb2 <_malloc_r+0x3e>
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f000 f996 	bl	800d0dc <_sbrk_r>
 800cdb0:	6038      	str	r0, [r7, #0]
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f000 f991 	bl	800d0dc <_sbrk_r>
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	d123      	bne.n	800ce06 <_malloc_r+0x92>
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	6033      	str	r3, [r6, #0]
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f000 fa7c 	bl	800d2c0 <__malloc_unlock>
 800cdc8:	e7e3      	b.n	800cd92 <_malloc_r+0x1e>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	1b5b      	subs	r3, r3, r5
 800cdce:	d417      	bmi.n	800ce00 <_malloc_r+0x8c>
 800cdd0:	2b0b      	cmp	r3, #11
 800cdd2:	d903      	bls.n	800cddc <_malloc_r+0x68>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	441c      	add	r4, r3
 800cdd8:	6025      	str	r5, [r4, #0]
 800cdda:	e004      	b.n	800cde6 <_malloc_r+0x72>
 800cddc:	6863      	ldr	r3, [r4, #4]
 800cdde:	42a2      	cmp	r2, r4
 800cde0:	bf0c      	ite	eq
 800cde2:	600b      	streq	r3, [r1, #0]
 800cde4:	6053      	strne	r3, [r2, #4]
 800cde6:	4630      	mov	r0, r6
 800cde8:	f000 fa6a 	bl	800d2c0 <__malloc_unlock>
 800cdec:	f104 000b 	add.w	r0, r4, #11
 800cdf0:	1d23      	adds	r3, r4, #4
 800cdf2:	f020 0007 	bic.w	r0, r0, #7
 800cdf6:	1ac2      	subs	r2, r0, r3
 800cdf8:	d0cc      	beq.n	800cd94 <_malloc_r+0x20>
 800cdfa:	1a1b      	subs	r3, r3, r0
 800cdfc:	50a3      	str	r3, [r4, r2]
 800cdfe:	e7c9      	b.n	800cd94 <_malloc_r+0x20>
 800ce00:	4622      	mov	r2, r4
 800ce02:	6864      	ldr	r4, [r4, #4]
 800ce04:	e7cc      	b.n	800cda0 <_malloc_r+0x2c>
 800ce06:	1cc4      	adds	r4, r0, #3
 800ce08:	f024 0403 	bic.w	r4, r4, #3
 800ce0c:	42a0      	cmp	r0, r4
 800ce0e:	d0e3      	beq.n	800cdd8 <_malloc_r+0x64>
 800ce10:	1a21      	subs	r1, r4, r0
 800ce12:	4630      	mov	r0, r6
 800ce14:	f000 f962 	bl	800d0dc <_sbrk_r>
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d1dd      	bne.n	800cdd8 <_malloc_r+0x64>
 800ce1c:	e7cf      	b.n	800cdbe <_malloc_r+0x4a>
 800ce1e:	bf00      	nop
 800ce20:	200004bc 	.word	0x200004bc
 800ce24:	200004c0 	.word	0x200004c0

0800ce28 <__sfputc_r>:
 800ce28:	6893      	ldr	r3, [r2, #8]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	b410      	push	{r4}
 800ce30:	6093      	str	r3, [r2, #8]
 800ce32:	da08      	bge.n	800ce46 <__sfputc_r+0x1e>
 800ce34:	6994      	ldr	r4, [r2, #24]
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	db01      	blt.n	800ce3e <__sfputc_r+0x16>
 800ce3a:	290a      	cmp	r1, #10
 800ce3c:	d103      	bne.n	800ce46 <__sfputc_r+0x1e>
 800ce3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce42:	f7fe ba53 	b.w	800b2ec <__swbuf_r>
 800ce46:	6813      	ldr	r3, [r2, #0]
 800ce48:	1c58      	adds	r0, r3, #1
 800ce4a:	6010      	str	r0, [r2, #0]
 800ce4c:	7019      	strb	r1, [r3, #0]
 800ce4e:	4608      	mov	r0, r1
 800ce50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <__sfputs_r>:
 800ce56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce58:	4606      	mov	r6, r0
 800ce5a:	460f      	mov	r7, r1
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	18d5      	adds	r5, r2, r3
 800ce60:	42ac      	cmp	r4, r5
 800ce62:	d101      	bne.n	800ce68 <__sfputs_r+0x12>
 800ce64:	2000      	movs	r0, #0
 800ce66:	e007      	b.n	800ce78 <__sfputs_r+0x22>
 800ce68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6c:	463a      	mov	r2, r7
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ffda 	bl	800ce28 <__sfputc_r>
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	d1f3      	bne.n	800ce60 <__sfputs_r+0xa>
 800ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce7c <_vfiprintf_r>:
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	460d      	mov	r5, r1
 800ce82:	b09d      	sub	sp, #116	; 0x74
 800ce84:	4614      	mov	r4, r2
 800ce86:	4698      	mov	r8, r3
 800ce88:	4606      	mov	r6, r0
 800ce8a:	b118      	cbz	r0, 800ce94 <_vfiprintf_r+0x18>
 800ce8c:	6983      	ldr	r3, [r0, #24]
 800ce8e:	b90b      	cbnz	r3, 800ce94 <_vfiprintf_r+0x18>
 800ce90:	f7ff fa80 	bl	800c394 <__sinit>
 800ce94:	4b89      	ldr	r3, [pc, #548]	; (800d0bc <_vfiprintf_r+0x240>)
 800ce96:	429d      	cmp	r5, r3
 800ce98:	d11b      	bne.n	800ced2 <_vfiprintf_r+0x56>
 800ce9a:	6875      	ldr	r5, [r6, #4]
 800ce9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce9e:	07d9      	lsls	r1, r3, #31
 800cea0:	d405      	bmi.n	800ceae <_vfiprintf_r+0x32>
 800cea2:	89ab      	ldrh	r3, [r5, #12]
 800cea4:	059a      	lsls	r2, r3, #22
 800cea6:	d402      	bmi.n	800ceae <_vfiprintf_r+0x32>
 800cea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceaa:	f7ff fb16 	bl	800c4da <__retarget_lock_acquire_recursive>
 800ceae:	89ab      	ldrh	r3, [r5, #12]
 800ceb0:	071b      	lsls	r3, r3, #28
 800ceb2:	d501      	bpl.n	800ceb8 <_vfiprintf_r+0x3c>
 800ceb4:	692b      	ldr	r3, [r5, #16]
 800ceb6:	b9eb      	cbnz	r3, 800cef4 <_vfiprintf_r+0x78>
 800ceb8:	4629      	mov	r1, r5
 800ceba:	4630      	mov	r0, r6
 800cebc:	f7fe fa68 	bl	800b390 <__swsetup_r>
 800cec0:	b1c0      	cbz	r0, 800cef4 <_vfiprintf_r+0x78>
 800cec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cec4:	07dc      	lsls	r4, r3, #31
 800cec6:	d50e      	bpl.n	800cee6 <_vfiprintf_r+0x6a>
 800cec8:	f04f 30ff 	mov.w	r0, #4294967295
 800cecc:	b01d      	add	sp, #116	; 0x74
 800cece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced2:	4b7b      	ldr	r3, [pc, #492]	; (800d0c0 <_vfiprintf_r+0x244>)
 800ced4:	429d      	cmp	r5, r3
 800ced6:	d101      	bne.n	800cedc <_vfiprintf_r+0x60>
 800ced8:	68b5      	ldr	r5, [r6, #8]
 800ceda:	e7df      	b.n	800ce9c <_vfiprintf_r+0x20>
 800cedc:	4b79      	ldr	r3, [pc, #484]	; (800d0c4 <_vfiprintf_r+0x248>)
 800cede:	429d      	cmp	r5, r3
 800cee0:	bf08      	it	eq
 800cee2:	68f5      	ldreq	r5, [r6, #12]
 800cee4:	e7da      	b.n	800ce9c <_vfiprintf_r+0x20>
 800cee6:	89ab      	ldrh	r3, [r5, #12]
 800cee8:	0598      	lsls	r0, r3, #22
 800ceea:	d4ed      	bmi.n	800cec8 <_vfiprintf_r+0x4c>
 800ceec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceee:	f7ff faf5 	bl	800c4dc <__retarget_lock_release_recursive>
 800cef2:	e7e9      	b.n	800cec8 <_vfiprintf_r+0x4c>
 800cef4:	2300      	movs	r3, #0
 800cef6:	9309      	str	r3, [sp, #36]	; 0x24
 800cef8:	2320      	movs	r3, #32
 800cefa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cefe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf02:	2330      	movs	r3, #48	; 0x30
 800cf04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d0c8 <_vfiprintf_r+0x24c>
 800cf08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf0c:	f04f 0901 	mov.w	r9, #1
 800cf10:	4623      	mov	r3, r4
 800cf12:	469a      	mov	sl, r3
 800cf14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf18:	b10a      	cbz	r2, 800cf1e <_vfiprintf_r+0xa2>
 800cf1a:	2a25      	cmp	r2, #37	; 0x25
 800cf1c:	d1f9      	bne.n	800cf12 <_vfiprintf_r+0x96>
 800cf1e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf22:	d00b      	beq.n	800cf3c <_vfiprintf_r+0xc0>
 800cf24:	465b      	mov	r3, fp
 800cf26:	4622      	mov	r2, r4
 800cf28:	4629      	mov	r1, r5
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f7ff ff93 	bl	800ce56 <__sfputs_r>
 800cf30:	3001      	adds	r0, #1
 800cf32:	f000 80aa 	beq.w	800d08a <_vfiprintf_r+0x20e>
 800cf36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf38:	445a      	add	r2, fp
 800cf3a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 80a2 	beq.w	800d08a <_vfiprintf_r+0x20e>
 800cf46:	2300      	movs	r3, #0
 800cf48:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf50:	f10a 0a01 	add.w	sl, sl, #1
 800cf54:	9304      	str	r3, [sp, #16]
 800cf56:	9307      	str	r3, [sp, #28]
 800cf58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5c:	931a      	str	r3, [sp, #104]	; 0x68
 800cf5e:	4654      	mov	r4, sl
 800cf60:	2205      	movs	r2, #5
 800cf62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf66:	4858      	ldr	r0, [pc, #352]	; (800d0c8 <_vfiprintf_r+0x24c>)
 800cf68:	f7f3 f94a 	bl	8000200 <memchr>
 800cf6c:	9a04      	ldr	r2, [sp, #16]
 800cf6e:	b9d8      	cbnz	r0, 800cfa8 <_vfiprintf_r+0x12c>
 800cf70:	06d1      	lsls	r1, r2, #27
 800cf72:	bf44      	itt	mi
 800cf74:	2320      	movmi	r3, #32
 800cf76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf7a:	0713      	lsls	r3, r2, #28
 800cf7c:	bf44      	itt	mi
 800cf7e:	232b      	movmi	r3, #43	; 0x2b
 800cf80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf84:	f89a 3000 	ldrb.w	r3, [sl]
 800cf88:	2b2a      	cmp	r3, #42	; 0x2a
 800cf8a:	d015      	beq.n	800cfb8 <_vfiprintf_r+0x13c>
 800cf8c:	9a07      	ldr	r2, [sp, #28]
 800cf8e:	4654      	mov	r4, sl
 800cf90:	2000      	movs	r0, #0
 800cf92:	f04f 0c0a 	mov.w	ip, #10
 800cf96:	4621      	mov	r1, r4
 800cf98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9c:	3b30      	subs	r3, #48	; 0x30
 800cf9e:	2b09      	cmp	r3, #9
 800cfa0:	d94e      	bls.n	800d040 <_vfiprintf_r+0x1c4>
 800cfa2:	b1b0      	cbz	r0, 800cfd2 <_vfiprintf_r+0x156>
 800cfa4:	9207      	str	r2, [sp, #28]
 800cfa6:	e014      	b.n	800cfd2 <_vfiprintf_r+0x156>
 800cfa8:	eba0 0308 	sub.w	r3, r0, r8
 800cfac:	fa09 f303 	lsl.w	r3, r9, r3
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	9304      	str	r3, [sp, #16]
 800cfb4:	46a2      	mov	sl, r4
 800cfb6:	e7d2      	b.n	800cf5e <_vfiprintf_r+0xe2>
 800cfb8:	9b03      	ldr	r3, [sp, #12]
 800cfba:	1d19      	adds	r1, r3, #4
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	9103      	str	r1, [sp, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	bfbb      	ittet	lt
 800cfc4:	425b      	neglt	r3, r3
 800cfc6:	f042 0202 	orrlt.w	r2, r2, #2
 800cfca:	9307      	strge	r3, [sp, #28]
 800cfcc:	9307      	strlt	r3, [sp, #28]
 800cfce:	bfb8      	it	lt
 800cfd0:	9204      	strlt	r2, [sp, #16]
 800cfd2:	7823      	ldrb	r3, [r4, #0]
 800cfd4:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd6:	d10c      	bne.n	800cff2 <_vfiprintf_r+0x176>
 800cfd8:	7863      	ldrb	r3, [r4, #1]
 800cfda:	2b2a      	cmp	r3, #42	; 0x2a
 800cfdc:	d135      	bne.n	800d04a <_vfiprintf_r+0x1ce>
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	1d1a      	adds	r2, r3, #4
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	9203      	str	r2, [sp, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	bfb8      	it	lt
 800cfea:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfee:	3402      	adds	r4, #2
 800cff0:	9305      	str	r3, [sp, #20]
 800cff2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0d8 <_vfiprintf_r+0x25c>
 800cff6:	7821      	ldrb	r1, [r4, #0]
 800cff8:	2203      	movs	r2, #3
 800cffa:	4650      	mov	r0, sl
 800cffc:	f7f3 f900 	bl	8000200 <memchr>
 800d000:	b140      	cbz	r0, 800d014 <_vfiprintf_r+0x198>
 800d002:	2340      	movs	r3, #64	; 0x40
 800d004:	eba0 000a 	sub.w	r0, r0, sl
 800d008:	fa03 f000 	lsl.w	r0, r3, r0
 800d00c:	9b04      	ldr	r3, [sp, #16]
 800d00e:	4303      	orrs	r3, r0
 800d010:	3401      	adds	r4, #1
 800d012:	9304      	str	r3, [sp, #16]
 800d014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d018:	482c      	ldr	r0, [pc, #176]	; (800d0cc <_vfiprintf_r+0x250>)
 800d01a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d01e:	2206      	movs	r2, #6
 800d020:	f7f3 f8ee 	bl	8000200 <memchr>
 800d024:	2800      	cmp	r0, #0
 800d026:	d03f      	beq.n	800d0a8 <_vfiprintf_r+0x22c>
 800d028:	4b29      	ldr	r3, [pc, #164]	; (800d0d0 <_vfiprintf_r+0x254>)
 800d02a:	bb1b      	cbnz	r3, 800d074 <_vfiprintf_r+0x1f8>
 800d02c:	9b03      	ldr	r3, [sp, #12]
 800d02e:	3307      	adds	r3, #7
 800d030:	f023 0307 	bic.w	r3, r3, #7
 800d034:	3308      	adds	r3, #8
 800d036:	9303      	str	r3, [sp, #12]
 800d038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03a:	443b      	add	r3, r7
 800d03c:	9309      	str	r3, [sp, #36]	; 0x24
 800d03e:	e767      	b.n	800cf10 <_vfiprintf_r+0x94>
 800d040:	fb0c 3202 	mla	r2, ip, r2, r3
 800d044:	460c      	mov	r4, r1
 800d046:	2001      	movs	r0, #1
 800d048:	e7a5      	b.n	800cf96 <_vfiprintf_r+0x11a>
 800d04a:	2300      	movs	r3, #0
 800d04c:	3401      	adds	r4, #1
 800d04e:	9305      	str	r3, [sp, #20]
 800d050:	4619      	mov	r1, r3
 800d052:	f04f 0c0a 	mov.w	ip, #10
 800d056:	4620      	mov	r0, r4
 800d058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d05c:	3a30      	subs	r2, #48	; 0x30
 800d05e:	2a09      	cmp	r2, #9
 800d060:	d903      	bls.n	800d06a <_vfiprintf_r+0x1ee>
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0c5      	beq.n	800cff2 <_vfiprintf_r+0x176>
 800d066:	9105      	str	r1, [sp, #20]
 800d068:	e7c3      	b.n	800cff2 <_vfiprintf_r+0x176>
 800d06a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d06e:	4604      	mov	r4, r0
 800d070:	2301      	movs	r3, #1
 800d072:	e7f0      	b.n	800d056 <_vfiprintf_r+0x1da>
 800d074:	ab03      	add	r3, sp, #12
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	462a      	mov	r2, r5
 800d07a:	4b16      	ldr	r3, [pc, #88]	; (800d0d4 <_vfiprintf_r+0x258>)
 800d07c:	a904      	add	r1, sp, #16
 800d07e:	4630      	mov	r0, r6
 800d080:	f7fd fd52 	bl	800ab28 <_printf_float>
 800d084:	4607      	mov	r7, r0
 800d086:	1c78      	adds	r0, r7, #1
 800d088:	d1d6      	bne.n	800d038 <_vfiprintf_r+0x1bc>
 800d08a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d08c:	07d9      	lsls	r1, r3, #31
 800d08e:	d405      	bmi.n	800d09c <_vfiprintf_r+0x220>
 800d090:	89ab      	ldrh	r3, [r5, #12]
 800d092:	059a      	lsls	r2, r3, #22
 800d094:	d402      	bmi.n	800d09c <_vfiprintf_r+0x220>
 800d096:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d098:	f7ff fa20 	bl	800c4dc <__retarget_lock_release_recursive>
 800d09c:	89ab      	ldrh	r3, [r5, #12]
 800d09e:	065b      	lsls	r3, r3, #25
 800d0a0:	f53f af12 	bmi.w	800cec8 <_vfiprintf_r+0x4c>
 800d0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0a6:	e711      	b.n	800cecc <_vfiprintf_r+0x50>
 800d0a8:	ab03      	add	r3, sp, #12
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	462a      	mov	r2, r5
 800d0ae:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <_vfiprintf_r+0x258>)
 800d0b0:	a904      	add	r1, sp, #16
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f7fd ffdc 	bl	800b070 <_printf_i>
 800d0b8:	e7e4      	b.n	800d084 <_vfiprintf_r+0x208>
 800d0ba:	bf00      	nop
 800d0bc:	080100fc 	.word	0x080100fc
 800d0c0:	0801011c 	.word	0x0801011c
 800d0c4:	080100dc 	.word	0x080100dc
 800d0c8:	0801029c 	.word	0x0801029c
 800d0cc:	080102a6 	.word	0x080102a6
 800d0d0:	0800ab29 	.word	0x0800ab29
 800d0d4:	0800ce57 	.word	0x0800ce57
 800d0d8:	080102a2 	.word	0x080102a2

0800d0dc <_sbrk_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d06      	ldr	r5, [pc, #24]	; (800d0f8 <_sbrk_r+0x1c>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	f7f5 f8bc 	bl	8002264 <_sbrk>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_sbrk_r+0x1a>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_sbrk_r+0x1a>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	2000088c 	.word	0x2000088c

0800d0fc <__sread>:
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	460c      	mov	r4, r1
 800d100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d104:	f000 f8e2 	bl	800d2cc <_read_r>
 800d108:	2800      	cmp	r0, #0
 800d10a:	bfab      	itete	ge
 800d10c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d10e:	89a3      	ldrhlt	r3, [r4, #12]
 800d110:	181b      	addge	r3, r3, r0
 800d112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d116:	bfac      	ite	ge
 800d118:	6563      	strge	r3, [r4, #84]	; 0x54
 800d11a:	81a3      	strhlt	r3, [r4, #12]
 800d11c:	bd10      	pop	{r4, pc}

0800d11e <__swrite>:
 800d11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	461f      	mov	r7, r3
 800d124:	898b      	ldrh	r3, [r1, #12]
 800d126:	05db      	lsls	r3, r3, #23
 800d128:	4605      	mov	r5, r0
 800d12a:	460c      	mov	r4, r1
 800d12c:	4616      	mov	r6, r2
 800d12e:	d505      	bpl.n	800d13c <__swrite+0x1e>
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	2302      	movs	r3, #2
 800d136:	2200      	movs	r2, #0
 800d138:	f000 f898 	bl	800d26c <_lseek_r>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	4628      	mov	r0, r5
 800d14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	f000 b817 	b.w	800d184 <_write_r>

0800d156 <__sseek>:
 800d156:	b510      	push	{r4, lr}
 800d158:	460c      	mov	r4, r1
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	f000 f885 	bl	800d26c <_lseek_r>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	bf15      	itete	ne
 800d168:	6560      	strne	r0, [r4, #84]	; 0x54
 800d16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d172:	81a3      	strheq	r3, [r4, #12]
 800d174:	bf18      	it	ne
 800d176:	81a3      	strhne	r3, [r4, #12]
 800d178:	bd10      	pop	{r4, pc}

0800d17a <__sclose>:
 800d17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17e:	f000 b831 	b.w	800d1e4 <_close_r>
	...

0800d184 <_write_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d07      	ldr	r5, [pc, #28]	; (800d1a4 <_write_r+0x20>)
 800d188:	4604      	mov	r4, r0
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f7f5 f815 	bl	80021c2 <_write>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_write_r+0x1e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_write_r+0x1e>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	2000088c 	.word	0x2000088c

0800d1a8 <__assert_func>:
 800d1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1aa:	4614      	mov	r4, r2
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <__assert_func+0x2c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	68d8      	ldr	r0, [r3, #12]
 800d1b6:	b14c      	cbz	r4, 800d1cc <__assert_func+0x24>
 800d1b8:	4b07      	ldr	r3, [pc, #28]	; (800d1d8 <__assert_func+0x30>)
 800d1ba:	9100      	str	r1, [sp, #0]
 800d1bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1c0:	4906      	ldr	r1, [pc, #24]	; (800d1dc <__assert_func+0x34>)
 800d1c2:	462b      	mov	r3, r5
 800d1c4:	f000 f81e 	bl	800d204 <fiprintf>
 800d1c8:	f000 f89f 	bl	800d30a <abort>
 800d1cc:	4b04      	ldr	r3, [pc, #16]	; (800d1e0 <__assert_func+0x38>)
 800d1ce:	461c      	mov	r4, r3
 800d1d0:	e7f3      	b.n	800d1ba <__assert_func+0x12>
 800d1d2:	bf00      	nop
 800d1d4:	20000064 	.word	0x20000064
 800d1d8:	080102ad 	.word	0x080102ad
 800d1dc:	080102ba 	.word	0x080102ba
 800d1e0:	080102e8 	.word	0x080102e8

0800d1e4 <_close_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d06      	ldr	r5, [pc, #24]	; (800d200 <_close_r+0x1c>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	f7f5 f803 	bl	80021fa <_close>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_close_r+0x1a>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_close_r+0x1a>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	2000088c 	.word	0x2000088c

0800d204 <fiprintf>:
 800d204:	b40e      	push	{r1, r2, r3}
 800d206:	b503      	push	{r0, r1, lr}
 800d208:	4601      	mov	r1, r0
 800d20a:	ab03      	add	r3, sp, #12
 800d20c:	4805      	ldr	r0, [pc, #20]	; (800d224 <fiprintf+0x20>)
 800d20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d212:	6800      	ldr	r0, [r0, #0]
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	f7ff fe31 	bl	800ce7c <_vfiprintf_r>
 800d21a:	b002      	add	sp, #8
 800d21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d220:	b003      	add	sp, #12
 800d222:	4770      	bx	lr
 800d224:	20000064 	.word	0x20000064

0800d228 <_fstat_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	; (800d248 <_fstat_r+0x20>)
 800d22c:	2300      	movs	r3, #0
 800d22e:	4604      	mov	r4, r0
 800d230:	4608      	mov	r0, r1
 800d232:	4611      	mov	r1, r2
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	f7f4 ffec 	bl	8002212 <_fstat>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d102      	bne.n	800d244 <_fstat_r+0x1c>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b103      	cbz	r3, 800d244 <_fstat_r+0x1c>
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	bf00      	nop
 800d248:	2000088c 	.word	0x2000088c

0800d24c <_isatty_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	; (800d268 <_isatty_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f4 ffeb 	bl	8002232 <_isatty>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_isatty_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_isatty_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	2000088c 	.word	0x2000088c

0800d26c <_lseek_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d07      	ldr	r5, [pc, #28]	; (800d28c <_lseek_r+0x20>)
 800d270:	4604      	mov	r4, r0
 800d272:	4608      	mov	r0, r1
 800d274:	4611      	mov	r1, r2
 800d276:	2200      	movs	r2, #0
 800d278:	602a      	str	r2, [r5, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	f7f4 ffe4 	bl	8002248 <_lseek>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <_lseek_r+0x1e>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b103      	cbz	r3, 800d28a <_lseek_r+0x1e>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	2000088c 	.word	0x2000088c

0800d290 <__ascii_mbtowc>:
 800d290:	b082      	sub	sp, #8
 800d292:	b901      	cbnz	r1, 800d296 <__ascii_mbtowc+0x6>
 800d294:	a901      	add	r1, sp, #4
 800d296:	b142      	cbz	r2, 800d2aa <__ascii_mbtowc+0x1a>
 800d298:	b14b      	cbz	r3, 800d2ae <__ascii_mbtowc+0x1e>
 800d29a:	7813      	ldrb	r3, [r2, #0]
 800d29c:	600b      	str	r3, [r1, #0]
 800d29e:	7812      	ldrb	r2, [r2, #0]
 800d2a0:	1e10      	subs	r0, r2, #0
 800d2a2:	bf18      	it	ne
 800d2a4:	2001      	movne	r0, #1
 800d2a6:	b002      	add	sp, #8
 800d2a8:	4770      	bx	lr
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	e7fb      	b.n	800d2a6 <__ascii_mbtowc+0x16>
 800d2ae:	f06f 0001 	mvn.w	r0, #1
 800d2b2:	e7f8      	b.n	800d2a6 <__ascii_mbtowc+0x16>

0800d2b4 <__malloc_lock>:
 800d2b4:	4801      	ldr	r0, [pc, #4]	; (800d2bc <__malloc_lock+0x8>)
 800d2b6:	f7ff b910 	b.w	800c4da <__retarget_lock_acquire_recursive>
 800d2ba:	bf00      	nop
 800d2bc:	20000884 	.word	0x20000884

0800d2c0 <__malloc_unlock>:
 800d2c0:	4801      	ldr	r0, [pc, #4]	; (800d2c8 <__malloc_unlock+0x8>)
 800d2c2:	f7ff b90b 	b.w	800c4dc <__retarget_lock_release_recursive>
 800d2c6:	bf00      	nop
 800d2c8:	20000884 	.word	0x20000884

0800d2cc <_read_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d07      	ldr	r5, [pc, #28]	; (800d2ec <_read_r+0x20>)
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f7f4 ff54 	bl	8002188 <_read>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_read_r+0x1e>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_read_r+0x1e>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	2000088c 	.word	0x2000088c

0800d2f0 <__ascii_wctomb>:
 800d2f0:	b149      	cbz	r1, 800d306 <__ascii_wctomb+0x16>
 800d2f2:	2aff      	cmp	r2, #255	; 0xff
 800d2f4:	bf85      	ittet	hi
 800d2f6:	238a      	movhi	r3, #138	; 0x8a
 800d2f8:	6003      	strhi	r3, [r0, #0]
 800d2fa:	700a      	strbls	r2, [r1, #0]
 800d2fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d300:	bf98      	it	ls
 800d302:	2001      	movls	r0, #1
 800d304:	4770      	bx	lr
 800d306:	4608      	mov	r0, r1
 800d308:	4770      	bx	lr

0800d30a <abort>:
 800d30a:	b508      	push	{r3, lr}
 800d30c:	2006      	movs	r0, #6
 800d30e:	f000 f82b 	bl	800d368 <raise>
 800d312:	2001      	movs	r0, #1
 800d314:	f7f4 ff2e 	bl	8002174 <_exit>

0800d318 <_raise_r>:
 800d318:	291f      	cmp	r1, #31
 800d31a:	b538      	push	{r3, r4, r5, lr}
 800d31c:	4604      	mov	r4, r0
 800d31e:	460d      	mov	r5, r1
 800d320:	d904      	bls.n	800d32c <_raise_r+0x14>
 800d322:	2316      	movs	r3, #22
 800d324:	6003      	str	r3, [r0, #0]
 800d326:	f04f 30ff 	mov.w	r0, #4294967295
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d32e:	b112      	cbz	r2, 800d336 <_raise_r+0x1e>
 800d330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d334:	b94b      	cbnz	r3, 800d34a <_raise_r+0x32>
 800d336:	4620      	mov	r0, r4
 800d338:	f000 f830 	bl	800d39c <_getpid_r>
 800d33c:	462a      	mov	r2, r5
 800d33e:	4601      	mov	r1, r0
 800d340:	4620      	mov	r0, r4
 800d342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d346:	f000 b817 	b.w	800d378 <_kill_r>
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d00a      	beq.n	800d364 <_raise_r+0x4c>
 800d34e:	1c59      	adds	r1, r3, #1
 800d350:	d103      	bne.n	800d35a <_raise_r+0x42>
 800d352:	2316      	movs	r3, #22
 800d354:	6003      	str	r3, [r0, #0]
 800d356:	2001      	movs	r0, #1
 800d358:	e7e7      	b.n	800d32a <_raise_r+0x12>
 800d35a:	2400      	movs	r4, #0
 800d35c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d360:	4628      	mov	r0, r5
 800d362:	4798      	blx	r3
 800d364:	2000      	movs	r0, #0
 800d366:	e7e0      	b.n	800d32a <_raise_r+0x12>

0800d368 <raise>:
 800d368:	4b02      	ldr	r3, [pc, #8]	; (800d374 <raise+0xc>)
 800d36a:	4601      	mov	r1, r0
 800d36c:	6818      	ldr	r0, [r3, #0]
 800d36e:	f7ff bfd3 	b.w	800d318 <_raise_r>
 800d372:	bf00      	nop
 800d374:	20000064 	.word	0x20000064

0800d378 <_kill_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4d07      	ldr	r5, [pc, #28]	; (800d398 <_kill_r+0x20>)
 800d37c:	2300      	movs	r3, #0
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	4611      	mov	r1, r2
 800d384:	602b      	str	r3, [r5, #0]
 800d386:	f7f4 fee5 	bl	8002154 <_kill>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	d102      	bne.n	800d394 <_kill_r+0x1c>
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	b103      	cbz	r3, 800d394 <_kill_r+0x1c>
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	bd38      	pop	{r3, r4, r5, pc}
 800d396:	bf00      	nop
 800d398:	2000088c 	.word	0x2000088c

0800d39c <_getpid_r>:
 800d39c:	f7f4 bed2 	b.w	8002144 <_getpid>

0800d3a0 <_init>:
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	bf00      	nop
 800d3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a6:	bc08      	pop	{r3}
 800d3a8:	469e      	mov	lr, r3
 800d3aa:	4770      	bx	lr

0800d3ac <_fini>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	bf00      	nop
 800d3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b2:	bc08      	pop	{r3}
 800d3b4:	469e      	mov	lr, r3
 800d3b6:	4770      	bx	lr
